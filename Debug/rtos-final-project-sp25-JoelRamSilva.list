
rtos-final-project-sp25-JoelRamSilva.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ae8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015ac  08009c98  08009c98  0000ac98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b244  0800b244  0000d0f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b244  0800b244  0000c244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b24c  0800b24c  0000d0f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b24c  0800b24c  0000c24c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b250  0800b250  0000c250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f0  20000000  0800b254  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d0f0  2**0
                  CONTENTS
 10 .bss          00029d60  200000f0  200000f0  0000d0f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20029e50  20029e50  0000d0f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d0f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000190d6  00000000  00000000  0000d120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004690  00000000  00000000  000261f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018e0  00000000  00000000  0002a888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001309  00000000  00000000  0002c168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029825  00000000  00000000  0002d471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020a55  00000000  00000000  00056c96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea06e  00000000  00000000  000776eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00161759  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000073cc  00000000  00000000  0016179c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  00168b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000f0 	.word	0x200000f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009c80 	.word	0x08009c80

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000f4 	.word	0x200000f4
 80001ec:	08009c80 	.word	0x08009c80

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	@ 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2iz>:
 800086c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000870:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000874:	d215      	bcs.n	80008a2 <__aeabi_d2iz+0x36>
 8000876:	d511      	bpl.n	800089c <__aeabi_d2iz+0x30>
 8000878:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800087c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000880:	d912      	bls.n	80008a8 <__aeabi_d2iz+0x3c>
 8000882:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000886:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800088a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800088e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000892:	fa23 f002 	lsr.w	r0, r3, r2
 8000896:	bf18      	it	ne
 8000898:	4240      	negne	r0, r0
 800089a:	4770      	bx	lr
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	4770      	bx	lr
 80008a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008a6:	d105      	bne.n	80008b4 <__aeabi_d2iz+0x48>
 80008a8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80008ac:	bf08      	it	eq
 80008ae:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80008b2:	4770      	bx	lr
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop

080008bc <__aeabi_uldivmod>:
 80008bc:	b953      	cbnz	r3, 80008d4 <__aeabi_uldivmod+0x18>
 80008be:	b94a      	cbnz	r2, 80008d4 <__aeabi_uldivmod+0x18>
 80008c0:	2900      	cmp	r1, #0
 80008c2:	bf08      	it	eq
 80008c4:	2800      	cmpeq	r0, #0
 80008c6:	bf1c      	itt	ne
 80008c8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80008cc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80008d0:	f000 b96a 	b.w	8000ba8 <__aeabi_idiv0>
 80008d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008dc:	f000 f806 	bl	80008ec <__udivmoddi4>
 80008e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e8:	b004      	add	sp, #16
 80008ea:	4770      	bx	lr

080008ec <__udivmoddi4>:
 80008ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008f0:	9d08      	ldr	r5, [sp, #32]
 80008f2:	460c      	mov	r4, r1
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d14e      	bne.n	8000996 <__udivmoddi4+0xaa>
 80008f8:	4694      	mov	ip, r2
 80008fa:	458c      	cmp	ip, r1
 80008fc:	4686      	mov	lr, r0
 80008fe:	fab2 f282 	clz	r2, r2
 8000902:	d962      	bls.n	80009ca <__udivmoddi4+0xde>
 8000904:	b14a      	cbz	r2, 800091a <__udivmoddi4+0x2e>
 8000906:	f1c2 0320 	rsb	r3, r2, #32
 800090a:	4091      	lsls	r1, r2
 800090c:	fa20 f303 	lsr.w	r3, r0, r3
 8000910:	fa0c fc02 	lsl.w	ip, ip, r2
 8000914:	4319      	orrs	r1, r3
 8000916:	fa00 fe02 	lsl.w	lr, r0, r2
 800091a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800091e:	fa1f f68c 	uxth.w	r6, ip
 8000922:	fbb1 f4f7 	udiv	r4, r1, r7
 8000926:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800092a:	fb07 1114 	mls	r1, r7, r4, r1
 800092e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000932:	fb04 f106 	mul.w	r1, r4, r6
 8000936:	4299      	cmp	r1, r3
 8000938:	d90a      	bls.n	8000950 <__udivmoddi4+0x64>
 800093a:	eb1c 0303 	adds.w	r3, ip, r3
 800093e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000942:	f080 8112 	bcs.w	8000b6a <__udivmoddi4+0x27e>
 8000946:	4299      	cmp	r1, r3
 8000948:	f240 810f 	bls.w	8000b6a <__udivmoddi4+0x27e>
 800094c:	3c02      	subs	r4, #2
 800094e:	4463      	add	r3, ip
 8000950:	1a59      	subs	r1, r3, r1
 8000952:	fa1f f38e 	uxth.w	r3, lr
 8000956:	fbb1 f0f7 	udiv	r0, r1, r7
 800095a:	fb07 1110 	mls	r1, r7, r0, r1
 800095e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000962:	fb00 f606 	mul.w	r6, r0, r6
 8000966:	429e      	cmp	r6, r3
 8000968:	d90a      	bls.n	8000980 <__udivmoddi4+0x94>
 800096a:	eb1c 0303 	adds.w	r3, ip, r3
 800096e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000972:	f080 80fc 	bcs.w	8000b6e <__udivmoddi4+0x282>
 8000976:	429e      	cmp	r6, r3
 8000978:	f240 80f9 	bls.w	8000b6e <__udivmoddi4+0x282>
 800097c:	4463      	add	r3, ip
 800097e:	3802      	subs	r0, #2
 8000980:	1b9b      	subs	r3, r3, r6
 8000982:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000986:	2100      	movs	r1, #0
 8000988:	b11d      	cbz	r5, 8000992 <__udivmoddi4+0xa6>
 800098a:	40d3      	lsrs	r3, r2
 800098c:	2200      	movs	r2, #0
 800098e:	e9c5 3200 	strd	r3, r2, [r5]
 8000992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000996:	428b      	cmp	r3, r1
 8000998:	d905      	bls.n	80009a6 <__udivmoddi4+0xba>
 800099a:	b10d      	cbz	r5, 80009a0 <__udivmoddi4+0xb4>
 800099c:	e9c5 0100 	strd	r0, r1, [r5]
 80009a0:	2100      	movs	r1, #0
 80009a2:	4608      	mov	r0, r1
 80009a4:	e7f5      	b.n	8000992 <__udivmoddi4+0xa6>
 80009a6:	fab3 f183 	clz	r1, r3
 80009aa:	2900      	cmp	r1, #0
 80009ac:	d146      	bne.n	8000a3c <__udivmoddi4+0x150>
 80009ae:	42a3      	cmp	r3, r4
 80009b0:	d302      	bcc.n	80009b8 <__udivmoddi4+0xcc>
 80009b2:	4290      	cmp	r0, r2
 80009b4:	f0c0 80f0 	bcc.w	8000b98 <__udivmoddi4+0x2ac>
 80009b8:	1a86      	subs	r6, r0, r2
 80009ba:	eb64 0303 	sbc.w	r3, r4, r3
 80009be:	2001      	movs	r0, #1
 80009c0:	2d00      	cmp	r5, #0
 80009c2:	d0e6      	beq.n	8000992 <__udivmoddi4+0xa6>
 80009c4:	e9c5 6300 	strd	r6, r3, [r5]
 80009c8:	e7e3      	b.n	8000992 <__udivmoddi4+0xa6>
 80009ca:	2a00      	cmp	r2, #0
 80009cc:	f040 8090 	bne.w	8000af0 <__udivmoddi4+0x204>
 80009d0:	eba1 040c 	sub.w	r4, r1, ip
 80009d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009d8:	fa1f f78c 	uxth.w	r7, ip
 80009dc:	2101      	movs	r1, #1
 80009de:	fbb4 f6f8 	udiv	r6, r4, r8
 80009e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009e6:	fb08 4416 	mls	r4, r8, r6, r4
 80009ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009ee:	fb07 f006 	mul.w	r0, r7, r6
 80009f2:	4298      	cmp	r0, r3
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x11c>
 80009f6:	eb1c 0303 	adds.w	r3, ip, r3
 80009fa:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80009fe:	d202      	bcs.n	8000a06 <__udivmoddi4+0x11a>
 8000a00:	4298      	cmp	r0, r3
 8000a02:	f200 80cd 	bhi.w	8000ba0 <__udivmoddi4+0x2b4>
 8000a06:	4626      	mov	r6, r4
 8000a08:	1a1c      	subs	r4, r3, r0
 8000a0a:	fa1f f38e 	uxth.w	r3, lr
 8000a0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a12:	fb08 4410 	mls	r4, r8, r0, r4
 8000a16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a1a:	fb00 f707 	mul.w	r7, r0, r7
 8000a1e:	429f      	cmp	r7, r3
 8000a20:	d908      	bls.n	8000a34 <__udivmoddi4+0x148>
 8000a22:	eb1c 0303 	adds.w	r3, ip, r3
 8000a26:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000a2a:	d202      	bcs.n	8000a32 <__udivmoddi4+0x146>
 8000a2c:	429f      	cmp	r7, r3
 8000a2e:	f200 80b0 	bhi.w	8000b92 <__udivmoddi4+0x2a6>
 8000a32:	4620      	mov	r0, r4
 8000a34:	1bdb      	subs	r3, r3, r7
 8000a36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a3a:	e7a5      	b.n	8000988 <__udivmoddi4+0x9c>
 8000a3c:	f1c1 0620 	rsb	r6, r1, #32
 8000a40:	408b      	lsls	r3, r1
 8000a42:	fa22 f706 	lsr.w	r7, r2, r6
 8000a46:	431f      	orrs	r7, r3
 8000a48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a50:	ea43 030c 	orr.w	r3, r3, ip
 8000a54:	40f4      	lsrs	r4, r6
 8000a56:	fa00 f801 	lsl.w	r8, r0, r1
 8000a5a:	0c38      	lsrs	r0, r7, #16
 8000a5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a60:	fbb4 fef0 	udiv	lr, r4, r0
 8000a64:	fa1f fc87 	uxth.w	ip, r7
 8000a68:	fb00 441e 	mls	r4, r0, lr, r4
 8000a6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a70:	fb0e f90c 	mul.w	r9, lr, ip
 8000a74:	45a1      	cmp	r9, r4
 8000a76:	fa02 f201 	lsl.w	r2, r2, r1
 8000a7a:	d90a      	bls.n	8000a92 <__udivmoddi4+0x1a6>
 8000a7c:	193c      	adds	r4, r7, r4
 8000a7e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000a82:	f080 8084 	bcs.w	8000b8e <__udivmoddi4+0x2a2>
 8000a86:	45a1      	cmp	r9, r4
 8000a88:	f240 8081 	bls.w	8000b8e <__udivmoddi4+0x2a2>
 8000a8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a90:	443c      	add	r4, r7
 8000a92:	eba4 0409 	sub.w	r4, r4, r9
 8000a96:	fa1f f983 	uxth.w	r9, r3
 8000a9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000aa2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000aa6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000aaa:	45a4      	cmp	ip, r4
 8000aac:	d907      	bls.n	8000abe <__udivmoddi4+0x1d2>
 8000aae:	193c      	adds	r4, r7, r4
 8000ab0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ab4:	d267      	bcs.n	8000b86 <__udivmoddi4+0x29a>
 8000ab6:	45a4      	cmp	ip, r4
 8000ab8:	d965      	bls.n	8000b86 <__udivmoddi4+0x29a>
 8000aba:	3b02      	subs	r3, #2
 8000abc:	443c      	add	r4, r7
 8000abe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ac2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ac6:	eba4 040c 	sub.w	r4, r4, ip
 8000aca:	429c      	cmp	r4, r3
 8000acc:	46ce      	mov	lr, r9
 8000ace:	469c      	mov	ip, r3
 8000ad0:	d351      	bcc.n	8000b76 <__udivmoddi4+0x28a>
 8000ad2:	d04e      	beq.n	8000b72 <__udivmoddi4+0x286>
 8000ad4:	b155      	cbz	r5, 8000aec <__udivmoddi4+0x200>
 8000ad6:	ebb8 030e 	subs.w	r3, r8, lr
 8000ada:	eb64 040c 	sbc.w	r4, r4, ip
 8000ade:	fa04 f606 	lsl.w	r6, r4, r6
 8000ae2:	40cb      	lsrs	r3, r1
 8000ae4:	431e      	orrs	r6, r3
 8000ae6:	40cc      	lsrs	r4, r1
 8000ae8:	e9c5 6400 	strd	r6, r4, [r5]
 8000aec:	2100      	movs	r1, #0
 8000aee:	e750      	b.n	8000992 <__udivmoddi4+0xa6>
 8000af0:	f1c2 0320 	rsb	r3, r2, #32
 8000af4:	fa20 f103 	lsr.w	r1, r0, r3
 8000af8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000afc:	fa24 f303 	lsr.w	r3, r4, r3
 8000b00:	4094      	lsls	r4, r2
 8000b02:	430c      	orrs	r4, r1
 8000b04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b0c:	fa1f f78c 	uxth.w	r7, ip
 8000b10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b14:	fb08 3110 	mls	r1, r8, r0, r3
 8000b18:	0c23      	lsrs	r3, r4, #16
 8000b1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b1e:	fb00 f107 	mul.w	r1, r0, r7
 8000b22:	4299      	cmp	r1, r3
 8000b24:	d908      	bls.n	8000b38 <__udivmoddi4+0x24c>
 8000b26:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000b2e:	d22c      	bcs.n	8000b8a <__udivmoddi4+0x29e>
 8000b30:	4299      	cmp	r1, r3
 8000b32:	d92a      	bls.n	8000b8a <__udivmoddi4+0x29e>
 8000b34:	3802      	subs	r0, #2
 8000b36:	4463      	add	r3, ip
 8000b38:	1a5b      	subs	r3, r3, r1
 8000b3a:	b2a4      	uxth	r4, r4
 8000b3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b40:	fb08 3311 	mls	r3, r8, r1, r3
 8000b44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b48:	fb01 f307 	mul.w	r3, r1, r7
 8000b4c:	42a3      	cmp	r3, r4
 8000b4e:	d908      	bls.n	8000b62 <__udivmoddi4+0x276>
 8000b50:	eb1c 0404 	adds.w	r4, ip, r4
 8000b54:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000b58:	d213      	bcs.n	8000b82 <__udivmoddi4+0x296>
 8000b5a:	42a3      	cmp	r3, r4
 8000b5c:	d911      	bls.n	8000b82 <__udivmoddi4+0x296>
 8000b5e:	3902      	subs	r1, #2
 8000b60:	4464      	add	r4, ip
 8000b62:	1ae4      	subs	r4, r4, r3
 8000b64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b68:	e739      	b.n	80009de <__udivmoddi4+0xf2>
 8000b6a:	4604      	mov	r4, r0
 8000b6c:	e6f0      	b.n	8000950 <__udivmoddi4+0x64>
 8000b6e:	4608      	mov	r0, r1
 8000b70:	e706      	b.n	8000980 <__udivmoddi4+0x94>
 8000b72:	45c8      	cmp	r8, r9
 8000b74:	d2ae      	bcs.n	8000ad4 <__udivmoddi4+0x1e8>
 8000b76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b7e:	3801      	subs	r0, #1
 8000b80:	e7a8      	b.n	8000ad4 <__udivmoddi4+0x1e8>
 8000b82:	4631      	mov	r1, r6
 8000b84:	e7ed      	b.n	8000b62 <__udivmoddi4+0x276>
 8000b86:	4603      	mov	r3, r0
 8000b88:	e799      	b.n	8000abe <__udivmoddi4+0x1d2>
 8000b8a:	4630      	mov	r0, r6
 8000b8c:	e7d4      	b.n	8000b38 <__udivmoddi4+0x24c>
 8000b8e:	46d6      	mov	lr, sl
 8000b90:	e77f      	b.n	8000a92 <__udivmoddi4+0x1a6>
 8000b92:	4463      	add	r3, ip
 8000b94:	3802      	subs	r0, #2
 8000b96:	e74d      	b.n	8000a34 <__udivmoddi4+0x148>
 8000b98:	4606      	mov	r6, r0
 8000b9a:	4623      	mov	r3, r4
 8000b9c:	4608      	mov	r0, r1
 8000b9e:	e70f      	b.n	80009c0 <__udivmoddi4+0xd4>
 8000ba0:	3e02      	subs	r6, #2
 8000ba2:	4463      	add	r3, ip
 8000ba4:	e730      	b.n	8000a08 <__udivmoddi4+0x11c>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_idiv0>:
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <Button_Init>:


#include "Button_Driver.h"

void Button_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8000bfc <Button_Init+0x50>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc8:	4a0c      	ldr	r2, [pc, #48]	@ (8000bfc <Button_Init+0x50>)
 8000bca:	f043 0301 	orr.w	r3, r3, #1
 8000bce:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bfc <Button_Init+0x50>)
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd4:	f003 0301 	and.w	r3, r3, #1
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	683b      	ldr	r3, [r7, #0]

    // PA0 PUL UP/DOWN
    GPIO_InitStruct.Pin = BUTTON_PIN;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000be4:	2302      	movs	r3, #2
 8000be6:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	4619      	mov	r1, r3
 8000bec:	4804      	ldr	r0, [pc, #16]	@ (8000c00 <Button_Init+0x54>)
 8000bee:	f003 fb03 	bl	80041f8 <HAL_GPIO_Init>
}
 8000bf2:	bf00      	nop
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020000 	.word	0x40020000

08000c04 <Button_IsPressed>:

bool Button_IsPressed(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
    return (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_PIN) == GPIO_PIN_SET);
 8000c08:	2101      	movs	r1, #1
 8000c0a:	4805      	ldr	r0, [pc, #20]	@ (8000c20 <Button_IsPressed+0x1c>)
 8000c0c:	f003 fdac 	bl	8004768 <HAL_GPIO_ReadPin>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	bf0c      	ite	eq
 8000c16:	2301      	moveq	r3, #1
 8000c18:	2300      	movne	r3, #0
 8000c1a:	b2db      	uxtb	r3, r3
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40020000 	.word	0x40020000

08000c24 <StartButtonTask>:
 *      Author: joelrsilva
 */

#include "Button_Task.h"

void StartButtonTask(void const * argument){
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b094      	sub	sp, #80	@ 0x50
 8000c28:	af02      	add	r7, sp, #8
 8000c2a:	6078      	str	r0, [r7, #4]
    Button_Init();
 8000c2c:	f7ff ffbe 	bl	8000bac <Button_Init>

    bool previous_state = false;
 8000c30:	2300      	movs	r3, #0
 8000c32:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint32_t press_time = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	643b      	str	r3, [r7, #64]	@ 0x40

    // Ray gun charge bar
    int bar_x = 195;
 8000c3a:	23c3      	movs	r3, #195	@ 0xc3
 8000c3c:	627b      	str	r3, [r7, #36]	@ 0x24
    int bar_y_base = 55;
 8000c3e:	2337      	movs	r3, #55	@ 0x37
 8000c40:	623b      	str	r3, [r7, #32]
    int bar_spacing = 5;
 8000c42:	2305      	movs	r3, #5
 8000c44:	61fb      	str	r3, [r7, #28]
    int max_bar_units = 10;
 8000c46:	230a      	movs	r3, #10
 8000c48:	61bb      	str	r3, [r7, #24]

    // Double-tap tracker
    static uint32_t last_press_time = 0;

    for (;;) {
        if (current_state != STATE_PLAY) {
 8000c4a:	4b79      	ldr	r3, [pc, #484]	@ (8000e30 <StartButtonTask+0x20c>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d003      	beq.n	8000c5a <StartButtonTask+0x36>
            osDelay(50);
 8000c52:	2032      	movs	r0, #50	@ 0x32
 8000c54:	f006 faf9 	bl	800724a <osDelay>
            continue;
 8000c58:	e0e8      	b.n	8000e2c <StartButtonTask+0x208>
        }
        bool current_state = Button_IsPressed();
 8000c5a:	f7ff ffd3 	bl	8000c04 <Button_IsPressed>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	75fb      	strb	r3, [r7, #23]
        uint32_t now = HAL_GetTick();
 8000c62:	f003 f9d7 	bl	8004014 <HAL_GetTick>
 8000c66:	6138      	str	r0, [r7, #16]

        // Update energy and shield system every frame
        Capacitor_Update();
 8000c68:	f000 f90a 	bl	8000e80 <Capacitor_Update>

        // ===== Detect Double ap to Toggle Shield =====
        if (current_state && !previous_state) {
 8000c6c:	7dfb      	ldrb	r3, [r7, #23]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d023      	beq.n	8000cba <StartButtonTask+0x96>
 8000c72:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000c76:	f083 0301 	eor.w	r3, r3, #1
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d01c      	beq.n	8000cba <StartButtonTask+0x96>
            if (now - last_press_time <= 250) {
 8000c80:	4b6c      	ldr	r3, [pc, #432]	@ (8000e34 <StartButtonTask+0x210>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	1ad3      	subs	r3, r2, r3
 8000c88:	2bfa      	cmp	r3, #250	@ 0xfa
 8000c8a:	d80b      	bhi.n	8000ca4 <StartButtonTask+0x80>
                printf("Double tap detected!\n");
 8000c8c:	486a      	ldr	r0, [pc, #424]	@ (8000e38 <StartButtonTask+0x214>)
 8000c8e:	f008 f9b1 	bl	8008ff4 <puts>
                if (shield_active) {
 8000c92:	4b6a      	ldr	r3, [pc, #424]	@ (8000e3c <StartButtonTask+0x218>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d002      	beq.n	8000ca0 <StartButtonTask+0x7c>
                    DeactivateShield();
 8000c9a:	f002 f913 	bl	8002ec4 <DeactivateShield>
 8000c9e:	e001      	b.n	8000ca4 <StartButtonTask+0x80>
                } else {
                    ActivateShield();
 8000ca0:	f002 f8c4 	bl	8002e2c <ActivateShield>
                }
            }
            last_press_time = now;
 8000ca4:	4a63      	ldr	r2, [pc, #396]	@ (8000e34 <StartButtonTask+0x210>)
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	6013      	str	r3, [r2, #0]
            press_time = now;
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	643b      	str	r3, [r7, #64]	@ 0x40
            //printf("Button Pressed!\r\n");
            fflush(stdout);
 8000cae:	4b64      	ldr	r3, [pc, #400]	@ (8000e40 <StartButtonTask+0x21c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f008 f821 	bl	8008cfc <fflush>
        }

        // ===== Charging Bar  =====
        if (current_state && previous_state) {
 8000cba:	7dfb      	ldrb	r3, [r7, #23]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d068      	beq.n	8000d92 <StartButtonTask+0x16e>
 8000cc0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d064      	beq.n	8000d92 <StartButtonTask+0x16e>
            uint32_t held_duration = now - press_time;
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
            if (held_duration >= 2999){
 8000cd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000cd2:	f640 32b6 	movw	r2, #2998	@ 0xbb6
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d905      	bls.n	8000ce6 <StartButtonTask+0xc2>
            	held_duration = 3000;
 8000cda:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
            	FireRailgun(held_duration);
 8000ce0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000ce2:	f001 ff81 	bl	8002be8 <FireRailgun>
            }

            uint8_t units = (held_duration * max_bar_units) / 3000;
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000cea:	fb02 f303 	mul.w	r3, r2, r3
 8000cee:	4a55      	ldr	r2, [pc, #340]	@ (8000e44 <StartButtonTask+0x220>)
 8000cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf4:	099b      	lsrs	r3, r3, #6
 8000cf6:	73fb      	strb	r3, [r7, #15]

            for (int i = 0; i < max_bar_units; i++) {
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000cfc:	e013      	b.n	8000d26 <StartButtonTask+0x102>
                LCD_DisplayChar(bar_x, bar_y_base - (i * bar_spacing), ' ');
 8000cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d00:	b298      	uxth	r0, r3
 8000d02:	6a3b      	ldr	r3, [r7, #32]
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d08:	b299      	uxth	r1, r3
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	fb11 f303 	smulbb	r3, r1, r3
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	2220      	movs	r2, #32
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f001 fa8e 	bl	800223c <LCD_DisplayChar>
            for (int i = 0; i < max_bar_units; i++) {
 8000d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d22:	3301      	adds	r3, #1
 8000d24:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000d26:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	dbe7      	blt.n	8000cfe <StartButtonTask+0xda>
            }

            for (int i = 0; i < units; i++) {
 8000d2e:	2300      	movs	r3, #0
 8000d30:	637b      	str	r3, [r7, #52]	@ 0x34
 8000d32:	e013      	b.n	8000d5c <StartButtonTask+0x138>
                LCD_DisplayChar(bar_x, bar_y_base - (i * bar_spacing), '_');
 8000d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d36:	b298      	uxth	r0, r3
 8000d38:	6a3b      	ldr	r3, [r7, #32]
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d3e:	b299      	uxth	r1, r3
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	fb11 f303 	smulbb	r3, r1, r3
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	1ad3      	subs	r3, r2, r3
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	225f      	movs	r2, #95	@ 0x5f
 8000d50:	4619      	mov	r1, r3
 8000d52:	f001 fa73 	bl	800223c <LCD_DisplayChar>
            for (int i = 0; i < units; i++) {
 8000d56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d58:	3301      	adds	r3, #1
 8000d5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000d60:	429a      	cmp	r2, r3
 8000d62:	dbe7      	blt.n	8000d34 <StartButtonTask+0x110>
            }
            //GREEN LED brightness
            uint8_t brightness = (held_duration * 100) / 12000;
 8000d64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d66:	2264      	movs	r2, #100	@ 0x64
 8000d68:	fb02 f303 	mul.w	r3, r2, r3
 8000d6c:	4a35      	ldr	r2, [pc, #212]	@ (8000e44 <StartButtonTask+0x220>)
 8000d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d72:	0a1b      	lsrs	r3, r3, #8
 8000d74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            if (brightness > 100){
 8000d78:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d7c:	2b64      	cmp	r3, #100	@ 0x64
 8000d7e:	d902      	bls.n	8000d86 <StartButtonTask+0x162>
            	brightness = 100;  // Safety clamp
 8000d80:	2364      	movs	r3, #100	@ 0x64
 8000d82:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            }
            set_brightness(brightness);
 8000d86:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f002 fec8 	bl	8003b20 <set_brightness>
        if (current_state && previous_state) {
 8000d90:	e046      	b.n	8000e20 <StartButtonTask+0x1fc>
        }

        // ===== Release: Fire Railgun and Consume Energy =====
        else if (!current_state && previous_state) {
 8000d92:	7dfb      	ldrb	r3, [r7, #23]
 8000d94:	f083 0301 	eor.w	r3, r3, #1
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d040      	beq.n	8000e20 <StartButtonTask+0x1fc>
 8000d9e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d03c      	beq.n	8000e20 <StartButtonTask+0x1fc>
            uint32_t hold_duration = now - press_time;
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (hold_duration < 150) {
 8000dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000db0:	2b95      	cmp	r3, #149	@ 0x95
 8000db2:	d935      	bls.n	8000e20 <StartButtonTask+0x1fc>
                //printf("Tap too short, WILL NOT SHOOT.\n");
            } else {
                if (hold_duration >= 3000) {
 8000db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000db6:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d905      	bls.n	8000dca <StartButtonTask+0x1a6>
                	hold_duration = 3000;
 8000dbe:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                	FireRailgun(hold_duration);
 8000dc4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000dc6:	f001 ff0f 	bl	8002be8 <FireRailgun>
                }

                //printf("Button Released! Hold Duration = %lu ms\r\n", hold_duration);
                // Convert hold duration to energy consumption
                uint32_t amount_to_consume = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
                if (hold_duration >= 2500) {
 8000dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dd0:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d903      	bls.n	8000de0 <StartButtonTask+0x1bc>
                    amount_to_consume = (MAX_CAPACITOR_ENERGY * 3) / 10;
 8000dd8:	f44f 7361 	mov.w	r3, #900	@ 0x384
 8000ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000dde:	e00a      	b.n	8000df6 <StartButtonTask+0x1d2>
                } else if (hold_duration >= 2000) {
 8000de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000de2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000de6:	d303      	bcc.n	8000df0 <StartButtonTask+0x1cc>
                    amount_to_consume = (MAX_CAPACITOR_ENERGY * 2) / 10;
 8000de8:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8000dec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000dee:	e002      	b.n	8000df6 <StartButtonTask+0x1d2>
                } else {
                    amount_to_consume = (MAX_CAPACITOR_ENERGY * 1) / 10;
 8000df0:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000df4:	62bb      	str	r3, [r7, #40]	@ 0x28
                }

                Capacitor_Consume(amount_to_consume);
 8000df6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000df8:	f000 f826 	bl	8000e48 <Capacitor_Consume>
                Capacitor_DrawBar(215, 55, 5, 10);  // show result immediately
 8000dfc:	230a      	movs	r3, #10
 8000dfe:	2205      	movs	r2, #5
 8000e00:	2137      	movs	r1, #55	@ 0x37
 8000e02:	20d7      	movs	r0, #215	@ 0xd7
 8000e04:	f000 f870 	bl	8000ee8 <Capacitor_DrawBar>
                FireRailgun(hold_duration);
 8000e08:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000e0a:	f001 feed 	bl	8002be8 <FireRailgun>


                // Clear railgun charge bar
                LCD_Clear_Rectangle(195, 20, 16, 25 * 10, LCD_COLOR_WHITE);
 8000e0e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	23fa      	movs	r3, #250	@ 0xfa
 8000e16:	2210      	movs	r2, #16
 8000e18:	2114      	movs	r1, #20
 8000e1a:	20c3      	movs	r0, #195	@ 0xc3
 8000e1c:	f001 faee 	bl	80023fc <LCD_Clear_Rectangle>
            }
        }

        previous_state = current_state;
 8000e20:	7dfb      	ldrb	r3, [r7, #23]
 8000e22:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        osDelay(10);
 8000e26:	200a      	movs	r0, #10
 8000e28:	f006 fa0f 	bl	800724a <osDelay>
    for (;;) {
 8000e2c:	e70d      	b.n	8000c4a <StartButtonTask+0x26>
 8000e2e:	bf00      	nop
 8000e30:	20025ac8 	.word	0x20025ac8
 8000e34:	2000010c 	.word	0x2000010c
 8000e38:	08009c98 	.word	0x08009c98
 8000e3c:	20025aec 	.word	0x20025aec
 8000e40:	200000a0 	.word	0x200000a0
 8000e44:	057619f1 	.word	0x057619f1

08000e48 <Capacitor_Consume>:
#include "Capacitor.h"
#include "LCD_Driver.h"

uint32_t capacitor_energy = MAX_CAPACITOR_ENERGY;

void Capacitor_Consume(uint32_t amount) {
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
    if (amount > capacitor_energy) {
 8000e50:	4b0a      	ldr	r3, [pc, #40]	@ (8000e7c <Capacitor_Consume+0x34>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d903      	bls.n	8000e62 <Capacitor_Consume+0x1a>
        capacitor_energy = 0;
 8000e5a:	4b08      	ldr	r3, [pc, #32]	@ (8000e7c <Capacitor_Consume+0x34>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
    } else {
        capacitor_energy -= amount;
    }
    //printf("Capacitor energy: %lu\n", capacitor_energy);  // ← Add this
}
 8000e60:	e005      	b.n	8000e6e <Capacitor_Consume+0x26>
        capacitor_energy -= amount;
 8000e62:	4b06      	ldr	r3, [pc, #24]	@ (8000e7c <Capacitor_Consume+0x34>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	4a04      	ldr	r2, [pc, #16]	@ (8000e7c <Capacitor_Consume+0x34>)
 8000e6c:	6013      	str	r3, [r2, #0]
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000000 	.word	0x20000000

08000e80 <Capacitor_Update>:

void Capacitor_Set(uint32_t amount) {
    capacitor_energy = (amount > MAX_CAPACITOR_ENERGY) ? MAX_CAPACITOR_ENERGY : amount;
}

void Capacitor_Update(void) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
    static uint32_t last_charge_time = 0;
    uint32_t now = HAL_GetTick();
 8000e86:	f003 f8c5 	bl	8004014 <HAL_GetTick>
 8000e8a:	6078      	str	r0, [r7, #4]

    // Recharge capacitor every 300 ms````
    if (now - last_charge_time >= 300) {
 8000e8c:	4b14      	ldr	r3, [pc, #80]	@ (8000ee0 <Capacitor_Update+0x60>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000e98:	d317      	bcc.n	8000eca <Capacitor_Update+0x4a>
        if (capacitor_energy < MAX_CAPACITOR_ENERGY) {
 8000e9a:	4b12      	ldr	r3, [pc, #72]	@ (8000ee4 <Capacitor_Update+0x64>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d80e      	bhi.n	8000ec4 <Capacitor_Update+0x44>
            capacitor_energy += 60;
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee4 <Capacitor_Update+0x64>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	333c      	adds	r3, #60	@ 0x3c
 8000eac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ee4 <Capacitor_Update+0x64>)
 8000eae:	6013      	str	r3, [r2, #0]
            if (capacitor_energy > MAX_CAPACITOR_ENERGY)
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee4 <Capacitor_Update+0x64>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d903      	bls.n	8000ec4 <Capacitor_Update+0x44>
                capacitor_energy = MAX_CAPACITOR_ENERGY;
 8000ebc:	4b09      	ldr	r3, [pc, #36]	@ (8000ee4 <Capacitor_Update+0x64>)
 8000ebe:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000ec2:	601a      	str	r2, [r3, #0]
            //printf("Capacitor energy: %lu\n", capacitor_energy);
        }
        last_charge_time = now;
 8000ec4:	4a06      	ldr	r2, [pc, #24]	@ (8000ee0 <Capacitor_Update+0x60>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6013      	str	r3, [r2, #0]
    }
    Capacitor_DrawBar(215, 55, 5, 10);
 8000eca:	230a      	movs	r3, #10
 8000ecc:	2205      	movs	r2, #5
 8000ece:	2137      	movs	r1, #55	@ 0x37
 8000ed0:	20d7      	movs	r0, #215	@ 0xd7
 8000ed2:	f000 f809 	bl	8000ee8 <Capacitor_DrawBar>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000110 	.word	0x20000110
 8000ee4:	20000000 	.word	0x20000000

08000ee8 <Capacitor_DrawBar>:


void Capacitor_DrawBar(int x, int y_base, int spacing, int max_units) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
 8000ef4:	603b      	str	r3, [r7, #0]
    uint8_t units = capacitor_energy / 300;
 8000ef6:	4b24      	ldr	r3, [pc, #144]	@ (8000f88 <Capacitor_DrawBar+0xa0>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a24      	ldr	r2, [pc, #144]	@ (8000f8c <Capacitor_DrawBar+0xa4>)
 8000efc:	fba2 2303 	umull	r2, r3, r2, r3
 8000f00:	095b      	lsrs	r3, r3, #5
 8000f02:	77fb      	strb	r3, [r7, #31]
    if (units > max_units){
 8000f04:	7ffb      	ldrb	r3, [r7, #31]
 8000f06:	683a      	ldr	r2, [r7, #0]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	da01      	bge.n	8000f10 <Capacitor_DrawBar+0x28>
    	units = max_units;
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	77fb      	strb	r3, [r7, #31]
    }

    // Draw charged bars in BLACK
    for (int i = 0; i < units; i++) {
 8000f10:	2300      	movs	r3, #0
 8000f12:	61bb      	str	r3, [r7, #24]
 8000f14:	e013      	b.n	8000f3e <Capacitor_DrawBar+0x56>
        LCD_DisplayCharColored(x, y_base - (i * spacing), '_', LCD_COLOR_BLACK);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	b298      	uxth	r0, r3
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	b299      	uxth	r1, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	fb11 f303 	smulbb	r3, r1, r3
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	b299      	uxth	r1, r3
 8000f30:	2300      	movs	r3, #0
 8000f32:	225f      	movs	r2, #95	@ 0x5f
 8000f34:	f001 f962 	bl	80021fc <LCD_DisplayCharColored>
    for (int i = 0; i < units; i++) {
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	61bb      	str	r3, [r7, #24]
 8000f3e:	7ffb      	ldrb	r3, [r7, #31]
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	dbe7      	blt.n	8000f16 <Capacitor_DrawBar+0x2e>
    }

    // Draw the depleted bars in WHITE
    for (int i = units; i < max_units; i++) {
 8000f46:	7ffb      	ldrb	r3, [r7, #31]
 8000f48:	617b      	str	r3, [r7, #20]
 8000f4a:	e014      	b.n	8000f76 <Capacitor_DrawBar+0x8e>
        LCD_DisplayCharColored(x, y_base - (i * spacing), '_', LCD_COLOR_WHITE);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	b298      	uxth	r0, r3
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	b299      	uxth	r1, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	fb11 f303 	smulbb	r3, r1, r3
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	b299      	uxth	r1, r3
 8000f66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f6a:	225f      	movs	r2, #95	@ 0x5f
 8000f6c:	f001 f946 	bl	80021fc <LCD_DisplayCharColored>
    for (int i = units; i < max_units; i++) {
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	3301      	adds	r3, #1
 8000f74:	617b      	str	r3, [r7, #20]
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	dbe6      	blt.n	8000f4c <Capacitor_DrawBar+0x64>
    }
}
 8000f7e:	bf00      	nop
 8000f80:	bf00      	nop
 8000f82:	3720      	adds	r7, #32
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000000 	.word	0x20000000
 8000f8c:	1b4e81b5 	.word	0x1b4e81b5

08000f90 <SatchelHitsPlatform>:
//        HandleCollisions(platform_x);
//        //osDelay(50);  // Temporarily slow it down for visibility
//    }
//}

bool SatchelHitsPlatform(float satchel_x, float satchel_y, int platform_x) {
 8000f90:	b480      	push	{r7}
 8000f92:	b089      	sub	sp, #36	@ 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f9a:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f9e:	6078      	str	r0, [r7, #4]
    float platform_left = platform_x;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	ee07 3a90 	vmov	s15, r3
 8000fa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000faa:	edc7 7a07 	vstr	s15, [r7, #28]
    float platform_right = platform_x + PLATFORM_WIDTH;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	333c      	adds	r3, #60	@ 0x3c
 8000fb2:	ee07 3a90 	vmov	s15, r3
 8000fb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fba:	edc7 7a06 	vstr	s15, [r7, #24]
    float platform_top = PLATFORM_Y;
 8000fbe:	4b1b      	ldr	r3, [pc, #108]	@ (800102c <SatchelHitsPlatform+0x9c>)
 8000fc0:	617b      	str	r3, [r7, #20]

    return (
        satchel_y >= platform_top &&
        satchel_y <= platform_top + PLATFORM_HEIGHT &&
        satchel_x >= platform_left &&
 8000fc2:	ed97 7a02 	vldr	s14, [r7, #8]
 8000fc6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd2:	db20      	blt.n	8001016 <SatchelHitsPlatform+0x86>
        satchel_y <= platform_top + PLATFORM_HEIGHT &&
 8000fd4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fd8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000fdc:	ee77 7a87 	vadd.f32	s15, s15, s14
        satchel_y >= platform_top &&
 8000fe0:	ed97 7a02 	vldr	s14, [r7, #8]
 8000fe4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fec:	d813      	bhi.n	8001016 <SatchelHitsPlatform+0x86>
        satchel_y <= platform_top + PLATFORM_HEIGHT &&
 8000fee:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ff2:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ff6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ffe:	db0a      	blt.n	8001016 <SatchelHitsPlatform+0x86>
        satchel_x >= platform_left &&
 8001000:	ed97 7a03 	vldr	s14, [r7, #12]
 8001004:	edd7 7a06 	vldr	s15, [r7, #24]
 8001008:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800100c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001010:	d801      	bhi.n	8001016 <SatchelHitsPlatform+0x86>
 8001012:	2301      	movs	r3, #1
 8001014:	e000      	b.n	8001018 <SatchelHitsPlatform+0x88>
 8001016:	2300      	movs	r3, #0
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	b2db      	uxtb	r3, r3
        satchel_x <= platform_right
    );
}
 800101e:	4618      	mov	r0, r3
 8001020:	3724      	adds	r7, #36	@ 0x24
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	43820000 	.word	0x43820000

08001030 <SatchelHitsShield>:




bool SatchelHitsShield(float satchel_x, float satchel_y, int platform_x) {
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	@ 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	ed87 0a03 	vstr	s0, [r7, #12]
 800103a:	edc7 0a02 	vstr	s1, [r7, #8]
 800103e:	6078      	str	r0, [r7, #4]
    float shield_center_x = platform_x + 30;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	331e      	adds	r3, #30
 8001044:	ee07 3a90 	vmov	s15, r3
 8001048:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800104c:	edc7 7a07 	vstr	s15, [r7, #28]
    float shield_radius = 40;  // Adjust as needed
 8001050:	4b16      	ldr	r3, [pc, #88]	@ (80010ac <SatchelHitsShield+0x7c>)
 8001052:	61bb      	str	r3, [r7, #24]

    float dx = satchel_x - shield_center_x;
 8001054:	ed97 7a03 	vldr	s14, [r7, #12]
 8001058:	edd7 7a07 	vldr	s15, [r7, #28]
 800105c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001060:	edc7 7a05 	vstr	s15, [r7, #20]
    float dy = satchel_y - PLATFORM_Y;
 8001064:	edd7 7a02 	vldr	s15, [r7, #8]
 8001068:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80010b0 <SatchelHitsShield+0x80>
 800106c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001070:	edc7 7a04 	vstr	s15, [r7, #16]

    return (dx * dx + dy * dy <= shield_radius * shield_radius);
 8001074:	edd7 7a05 	vldr	s15, [r7, #20]
 8001078:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800107c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001080:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001084:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001088:	edd7 7a06 	vldr	s15, [r7, #24]
 800108c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001090:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001098:	bf94      	ite	ls
 800109a:	2301      	movls	r3, #1
 800109c:	2300      	movhi	r3, #0
 800109e:	b2db      	uxtb	r3, r3
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3724      	adds	r7, #36	@ 0x24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	42200000 	.word	0x42200000
 80010b0:	43820000 	.word	0x43820000

080010b4 <HandleCollisions>:
   //big maybe
    return false;
}


void HandleCollisions(int platform_x) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
//    static bool castle_hit = false;
//    static bool prisoners_escaping = false;
//    static uint32_t escape_start_time = 0;

    // === Handle prisoners escaping RED LED blinking ===
    if (prisoners_escaping) {
 80010bc:	4b91      	ldr	r3, [pc, #580]	@ (8001304 <HandleCollisions+0x250>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d036      	beq.n	8001132 <HandleCollisions+0x7e>
        uint32_t now = HAL_GetTick();
 80010c4:	f002 ffa6 	bl	8004014 <HAL_GetTick>
 80010c8:	60f8      	str	r0, [r7, #12]
        //PrisonerEscapeAnimation();

        // blink  red LED every 300ms
        if (now - last_blink_time >= 300) {
 80010ca:	4b8f      	ldr	r3, [pc, #572]	@ (8001308 <HandleCollisions+0x254>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80010d6:	d319      	bcc.n	800110c <HandleCollisions+0x58>
            last_blink_time = now;
 80010d8:	4a8b      	ldr	r2, [pc, #556]	@ (8001308 <HandleCollisions+0x254>)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	6013      	str	r3, [r2, #0]

            if (red_led_on) {
 80010de:	4b8b      	ldr	r3, [pc, #556]	@ (800130c <HandleCollisions+0x258>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d009      	beq.n	80010fa <HandleCollisions+0x46>
                RED_LED_OFF();
 80010e6:	4b8a      	ldr	r3, [pc, #552]	@ (8001310 <HandleCollisions+0x25c>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4a89      	ldr	r2, [pc, #548]	@ (8001310 <HandleCollisions+0x25c>)
 80010ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80010f0:	6153      	str	r3, [r2, #20]
                red_led_on = false;
 80010f2:	4b86      	ldr	r3, [pc, #536]	@ (800130c <HandleCollisions+0x258>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]
 80010f8:	e008      	b.n	800110c <HandleCollisions+0x58>
            } else {
                RED_LED_ON();
 80010fa:	4b85      	ldr	r3, [pc, #532]	@ (8001310 <HandleCollisions+0x25c>)
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	4a84      	ldr	r2, [pc, #528]	@ (8001310 <HandleCollisions+0x25c>)
 8001100:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001104:	6153      	str	r3, [r2, #20]
                red_led_on = true;
 8001106:	4b81      	ldr	r3, [pc, #516]	@ (800130c <HandleCollisions+0x258>)
 8001108:	2201      	movs	r2, #1
 800110a:	701a      	strb	r2, [r3, #0]
            }
        }

        // If 5 seconds passed, WIN the game
        if (now - escape_start_time >= 5000) {
 800110c:	4b81      	ldr	r3, [pc, #516]	@ (8001314 <HandleCollisions+0x260>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	68fa      	ldr	r2, [r7, #12]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001118:	4293      	cmp	r3, r2
 800111a:	d90a      	bls.n	8001132 <HandleCollisions+0x7e>
            RED_LED_OFF();
 800111c:	4b7c      	ldr	r3, [pc, #496]	@ (8001310 <HandleCollisions+0x25c>)
 800111e:	695b      	ldr	r3, [r3, #20]
 8001120:	4a7b      	ldr	r2, [pc, #492]	@ (8001310 <HandleCollisions+0x25c>)
 8001122:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001126:	6153      	str	r3, [r2, #20]
            prisoners_escaping = false;
 8001128:	4b76      	ldr	r3, [pc, #472]	@ (8001304 <HandleCollisions+0x250>)
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
            Game_Win();
 800112e:	f000 f95f 	bl	80013f0 <Game_Win>
        }
    }

    // === Satchel/enemy bullet collision  ===
    for (int i = 0; i < MAX_SATCHELS; i++) {
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
 8001136:	e069      	b.n	800120c <HandleCollisions+0x158>
        if (!satchels[i].active) continue;
 8001138:	4977      	ldr	r1, [pc, #476]	@ (8001318 <HandleCollisions+0x264>)
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	4613      	mov	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4413      	add	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	440b      	add	r3, r1
 8001146:	3310      	adds	r3, #16
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	f083 0301 	eor.w	r3, r3, #1
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2b00      	cmp	r3, #0
 8001152:	d157      	bne.n	8001204 <HandleCollisions+0x150>

        if (shield_active && SatchelHitsShield(satchels[i].x, satchels[i].y, platform_x)) {
 8001154:	4b71      	ldr	r3, [pc, #452]	@ (800131c <HandleCollisions+0x268>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d029      	beq.n	80011b0 <HandleCollisions+0xfc>
 800115c:	496e      	ldr	r1, [pc, #440]	@ (8001318 <HandleCollisions+0x264>)
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	4613      	mov	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4413      	add	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	440b      	add	r3, r1
 800116a:	edd3 7a00 	vldr	s15, [r3]
 800116e:	496a      	ldr	r1, [pc, #424]	@ (8001318 <HandleCollisions+0x264>)
 8001170:	697a      	ldr	r2, [r7, #20]
 8001172:	4613      	mov	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	440b      	add	r3, r1
 800117c:	3304      	adds	r3, #4
 800117e:	ed93 7a00 	vldr	s14, [r3]
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	eef0 0a47 	vmov.f32	s1, s14
 8001188:	eeb0 0a67 	vmov.f32	s0, s15
 800118c:	f7ff ff50 	bl	8001030 <SatchelHitsShield>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d00c      	beq.n	80011b0 <HandleCollisions+0xfc>
            //printf("Satchel %d hit the shield at (%d, %d)\n", i, (int)satchels[i].x, (int)satchels[i].y);
            satchels[i].active = false;
 8001196:	4960      	ldr	r1, [pc, #384]	@ (8001318 <HandleCollisions+0x264>)
 8001198:	697a      	ldr	r2, [r7, #20]
 800119a:	4613      	mov	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	440b      	add	r3, r1
 80011a4:	3310      	adds	r3, #16
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]
            Shield_TakeHit();
 80011aa:	f001 fea9 	bl	8002f00 <Shield_TakeHit>
 80011ae:	e02a      	b.n	8001206 <HandleCollisions+0x152>
        } else if (SatchelHitsPlatform(satchels[i].x, satchels[i].y, platform_x)) {
 80011b0:	4959      	ldr	r1, [pc, #356]	@ (8001318 <HandleCollisions+0x264>)
 80011b2:	697a      	ldr	r2, [r7, #20]
 80011b4:	4613      	mov	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	440b      	add	r3, r1
 80011be:	edd3 7a00 	vldr	s15, [r3]
 80011c2:	4955      	ldr	r1, [pc, #340]	@ (8001318 <HandleCollisions+0x264>)
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	4613      	mov	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	440b      	add	r3, r1
 80011d0:	3304      	adds	r3, #4
 80011d2:	ed93 7a00 	vldr	s14, [r3]
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	eef0 0a47 	vmov.f32	s1, s14
 80011dc:	eeb0 0a67 	vmov.f32	s0, s15
 80011e0:	f7ff fed6 	bl	8000f90 <SatchelHitsPlatform>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d00d      	beq.n	8001206 <HandleCollisions+0x152>
            //printf("Satchel %d hit the platform at (%d, %d)\n", i, (int)satchels[i].x, (int)satchels[i].y);
            satchels[i].active = false;
 80011ea:	494b      	ldr	r1, [pc, #300]	@ (8001318 <HandleCollisions+0x264>)
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	4613      	mov	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4413      	add	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	440b      	add	r3, r1
 80011f8:	3310      	adds	r3, #16
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
            Game_Lose();
 80011fe:	f000 f8eb 	bl	80013d8 <Game_Lose>
 8001202:	e000      	b.n	8001206 <HandleCollisions+0x152>
        if (!satchels[i].active) continue;
 8001204:	bf00      	nop
    for (int i = 0; i < MAX_SATCHELS; i++) {
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	3301      	adds	r3, #1
 800120a:	617b      	str	r3, [r7, #20]
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	2b02      	cmp	r3, #2
 8001210:	dd92      	ble.n	8001138 <HandleCollisions+0x84>
        }
    }

    // === Slug/bullet collision ===
    if (projectile.active) {
 8001212:	4b43      	ldr	r3, [pc, #268]	@ (8001320 <HandleCollisions+0x26c>)
 8001214:	7c1b      	ldrb	r3, [r3, #16]
 8001216:	2b00      	cmp	r3, #0
 8001218:	f000 80ca 	beq.w	80013b0 <HandleCollisions+0x2fc>
        // 1. Self-hit check
        if (projectile.y >= 255 &&
 800121c:	4b40      	ldr	r3, [pc, #256]	@ (8001320 <HandleCollisions+0x26c>)
 800121e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001222:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8001324 <HandleCollisions+0x270>
 8001226:	eef4 7ac7 	vcmpe.f32	s15, s14
 800122a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800122e:	db38      	blt.n	80012a2 <HandleCollisions+0x1ee>
            projectile.x >= platform_x &&
 8001230:	4b3b      	ldr	r3, [pc, #236]	@ (8001320 <HandleCollisions+0x26c>)
 8001232:	ed93 7a00 	vldr	s14, [r3]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	ee07 3a90 	vmov	s15, r3
 800123c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        if (projectile.y >= 255 &&
 8001240:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001248:	db2b      	blt.n	80012a2 <HandleCollisions+0x1ee>
            projectile.x <= platform_x + PLATFORM_WIDTH) {
 800124a:	4b35      	ldr	r3, [pc, #212]	@ (8001320 <HandleCollisions+0x26c>)
 800124c:	ed93 7a00 	vldr	s14, [r3]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	333c      	adds	r3, #60	@ 0x3c
 8001254:	ee07 3a90 	vmov	s15, r3
 8001258:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            projectile.x >= platform_x &&
 800125c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001264:	d81d      	bhi.n	80012a2 <HandleCollisions+0x1ee>

            //printf("Slug hit yourself at (%d, %d)\n", (int)projectile.x, (int)projectile.y);
            projectile.active = false;
 8001266:	4b2e      	ldr	r3, [pc, #184]	@ (8001320 <HandleCollisions+0x26c>)
 8001268:	2200      	movs	r2, #0
 800126a:	741a      	strb	r2, [r3, #16]

            if (shield_active) {
 800126c:	4b2b      	ldr	r3, [pc, #172]	@ (800131c <HandleCollisions+0x268>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d013      	beq.n	800129c <HandleCollisions+0x1e8>
                if (GetShieldHealth() > (SHIELD_MAX_HEALTH / 3)) {
 8001274:	f001 fe9e 	bl	8002fb4 <GetShieldHealth>
 8001278:	4603      	mov	r3, r0
 800127a:	2b03      	cmp	r3, #3
 800127c:	d90b      	bls.n	8001296 <HandleCollisions+0x1e2>
                    for (int j = 0; j < (SHIELD_MAX_HEALTH / 3); j++) {
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	e004      	b.n	800128e <HandleCollisions+0x1da>
                        Shield_TakeHit();
 8001284:	f001 fe3c 	bl	8002f00 <Shield_TakeHit>
                    for (int j = 0; j < (SHIELD_MAX_HEALTH / 3); j++) {
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	3301      	adds	r3, #1
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	2b02      	cmp	r3, #2
 8001292:	ddf7      	ble.n	8001284 <HandleCollisions+0x1d0>
                    Game_Lose();
                }
            } else {
                Game_Lose();
            }
            return;
 8001294:	e08c      	b.n	80013b0 <HandleCollisions+0x2fc>
                    Game_Lose();
 8001296:	f000 f89f 	bl	80013d8 <Game_Lose>
            return;
 800129a:	e089      	b.n	80013b0 <HandleCollisions+0x2fc>
                Game_Lose();
 800129c:	f000 f89c 	bl	80013d8 <Game_Lose>
            return;
 80012a0:	e086      	b.n	80013b0 <HandleCollisions+0x2fc>
        }

        // Castle hit (start escape immediately)
        if (projectile.y <= CASTLE_BOTTOM && projectile.x <= CASTLE_RIGHT) {
 80012a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001320 <HandleCollisions+0x26c>)
 80012a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80012a8:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001328 <HandleCollisions+0x274>
 80012ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b4:	d83c      	bhi.n	8001330 <HandleCollisions+0x27c>
 80012b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001320 <HandleCollisions+0x26c>)
 80012b8:	edd3 7a00 	vldr	s15, [r3]
 80012bc:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800132c <HandleCollisions+0x278>
 80012c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c8:	d832      	bhi.n	8001330 <HandleCollisions+0x27c>
            //printf("Slug hit the castle at (%d, %d)\n", (int)projectile.x, (int)projectile.y);
            projectile.active = false;
 80012ca:	4b15      	ldr	r3, [pc, #84]	@ (8001320 <HandleCollisions+0x26c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	741a      	strb	r2, [r3, #16]

            if (!prisoners_escaping) {  // Only if not already escaping
 80012d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001304 <HandleCollisions+0x250>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	f083 0301 	eor.w	r3, r3, #1
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d00e      	beq.n	80012fc <HandleCollisions+0x248>
                prisoners_escaping = true;
 80012de:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <HandleCollisions+0x250>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	701a      	strb	r2, [r3, #0]
                escape_start_time = HAL_GetTick();
 80012e4:	f002 fe96 	bl	8004014 <HAL_GetTick>
 80012e8:	4603      	mov	r3, r0
 80012ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001314 <HandleCollisions+0x260>)
 80012ec:	6013      	str	r3, [r2, #0]
                RED_LED_ON();
 80012ee:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <HandleCollisions+0x25c>)
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	4a07      	ldr	r2, [pc, #28]	@ (8001310 <HandleCollisions+0x25c>)
 80012f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012f8:	6153      	str	r3, [r2, #20]
            } else {
                // If they are already escaping, shooting again than lose
                Game_Lose();
            }
            return;
 80012fa:	e059      	b.n	80013b0 <HandleCollisions+0x2fc>
                Game_Lose();
 80012fc:	f000 f86c 	bl	80013d8 <Game_Lose>
            return;
 8001300:	e056      	b.n	80013b0 <HandleCollisions+0x2fc>
 8001302:	bf00      	nop
 8001304:	20000118 	.word	0x20000118
 8001308:	20000120 	.word	0x20000120
 800130c:	20000124 	.word	0x20000124
 8001310:	40021800 	.word	0x40021800
 8001314:	2000011c 	.word	0x2000011c
 8001318:	20000138 	.word	0x20000138
 800131c:	20025aec 	.word	0x20025aec
 8001320:	20025ad8 	.word	0x20025ad8
 8001324:	437f0000 	.word	0x437f0000
 8001328:	42b40000 	.word	0x42b40000
 800132c:	42b80000 	.word	0x42b80000
        }

        // 3. Cliff hit (after 2nd hit, start escape)
        if (projectile.y >= HIGH_CLIFF_TOP &&
 8001330:	4b21      	ldr	r3, [pc, #132]	@ (80013b8 <HandleCollisions+0x304>)
 8001332:	edd3 7a01 	vldr	s15, [r3, #4]
 8001336:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80013bc <HandleCollisions+0x308>
 800133a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800133e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001342:	db35      	blt.n	80013b0 <HandleCollisions+0x2fc>
            projectile.x <= HIGH_CLIFF_RIGHT &&
 8001344:	4b1c      	ldr	r3, [pc, #112]	@ (80013b8 <HandleCollisions+0x304>)
 8001346:	edd3 7a00 	vldr	s15, [r3]
        if (projectile.y >= HIGH_CLIFF_TOP &&
 800134a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80013c0 <HandleCollisions+0x30c>
 800134e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001356:	d82b      	bhi.n	80013b0 <HandleCollisions+0x2fc>
            projectile.y <= HIGH_CLIFF_BOTTOM) {
 8001358:	4b17      	ldr	r3, [pc, #92]	@ (80013b8 <HandleCollisions+0x304>)
 800135a:	edd3 7a01 	vldr	s15, [r3, #4]
            projectile.x <= HIGH_CLIFF_RIGHT &&
 800135e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80013c4 <HandleCollisions+0x310>
 8001362:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800136a:	d821      	bhi.n	80013b0 <HandleCollisions+0x2fc>

            projectile.active = false;
 800136c:	4b12      	ldr	r3, [pc, #72]	@ (80013b8 <HandleCollisions+0x304>)
 800136e:	2200      	movs	r2, #0
 8001370:	741a      	strb	r2, [r3, #16]
            cliff_hit_count++;
 8001372:	4b15      	ldr	r3, [pc, #84]	@ (80013c8 <HandleCollisions+0x314>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	3301      	adds	r3, #1
 8001378:	4a13      	ldr	r2, [pc, #76]	@ (80013c8 <HandleCollisions+0x314>)
 800137a:	6013      	str	r3, [r2, #0]
            //printf("Slug hit the cliff! Total hits = %d\n", cliff_hit_count);

            if (cliff_hit_count >= 2 && !prisoners_escaping) {
 800137c:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <HandleCollisions+0x314>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b01      	cmp	r3, #1
 8001382:	dd14      	ble.n	80013ae <HandleCollisions+0x2fa>
 8001384:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <HandleCollisions+0x318>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	f083 0301 	eor.w	r3, r3, #1
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	d00d      	beq.n	80013ae <HandleCollisions+0x2fa>
                prisoners_escaping = true;
 8001392:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <HandleCollisions+0x318>)
 8001394:	2201      	movs	r2, #1
 8001396:	701a      	strb	r2, [r3, #0]
                escape_start_time = HAL_GetTick();
 8001398:	f002 fe3c 	bl	8004014 <HAL_GetTick>
 800139c:	4603      	mov	r3, r0
 800139e:	4a0c      	ldr	r2, [pc, #48]	@ (80013d0 <HandleCollisions+0x31c>)
 80013a0:	6013      	str	r3, [r2, #0]
                RED_LED_ON();
 80013a2:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <HandleCollisions+0x320>)
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	4a0b      	ldr	r2, [pc, #44]	@ (80013d4 <HandleCollisions+0x320>)
 80013a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013ac:	6153      	str	r3, [r2, #20]
            }
            return;
 80013ae:	bf00      	nop
        }
    }
}
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20025ad8 	.word	0x20025ad8
 80013bc:	42b60000 	.word	0x42b60000
 80013c0:	42be0000 	.word	0x42be0000
 80013c4:	43110000 	.word	0x43110000
 80013c8:	20000114 	.word	0x20000114
 80013cc:	20000118 	.word	0x20000118
 80013d0:	2000011c 	.word	0x2000011c
 80013d4:	40021800 	.word	0x40021800

080013d8 <Game_Lose>:



void Game_Lose() {
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
    current_state = STATE_GAME_OVER;
 80013dc:	4b03      	ldr	r3, [pc, #12]	@ (80013ec <Game_Lose+0x14>)
 80013de:	2203      	movs	r2, #3
 80013e0:	701a      	strb	r2, [r3, #0]
    DrawGameOver();
 80013e2:	f001 fba7 	bl	8002b34 <DrawGameOver>
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20025ac8 	.word	0x20025ac8

080013f0 <Game_Win>:

void Game_Win() {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
    current_state = STATE_GAME_OVER;
 80013f4:	4b07      	ldr	r3, [pc, #28]	@ (8001414 <Game_Win+0x24>)
 80013f6:	2203      	movs	r2, #3
 80013f8:	701a      	strb	r2, [r3, #0]
    LCD_Clear(0, LCD_COLOR_WHITE);
 80013fa:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80013fe:	2000      	movs	r0, #0
 8001400:	f000 ffda 	bl	80023b8 <LCD_Clear>
    LCD_DisplayString(50, 120, "YOU WIN!");
 8001404:	4a04      	ldr	r2, [pc, #16]	@ (8001418 <Game_Win+0x28>)
 8001406:	2178      	movs	r1, #120	@ 0x78
 8001408:	2032      	movs	r0, #50	@ 0x32
 800140a:	f000 ff39 	bl	8002280 <LCD_DisplayString>
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20025ac8 	.word	0x20025ac8
 8001418:	08009cb0 	.word	0x08009cb0

0800141c <SetDifficulty>:

#include "Difficulty.h"

DifficultyLevel current_difficulty = MEDIUM;

void SetDifficulty(int selection_index) {
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
    if (selection_index == 0) current_difficulty = EASY;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d103      	bne.n	8001432 <SetDifficulty+0x16>
 800142a:	4b0a      	ldr	r3, [pc, #40]	@ (8001454 <SetDifficulty+0x38>)
 800142c:	2200      	movs	r2, #0
 800142e:	701a      	strb	r2, [r3, #0]
    else if (selection_index == 1) current_difficulty = MEDIUM;
    else current_difficulty = HARD;
}
 8001430:	e009      	b.n	8001446 <SetDifficulty+0x2a>
    else if (selection_index == 1) current_difficulty = MEDIUM;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d103      	bne.n	8001440 <SetDifficulty+0x24>
 8001438:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <SetDifficulty+0x38>)
 800143a:	2201      	movs	r2, #1
 800143c:	701a      	strb	r2, [r3, #0]
}
 800143e:	e002      	b.n	8001446 <SetDifficulty+0x2a>
    else current_difficulty = HARD;
 8001440:	4b04      	ldr	r3, [pc, #16]	@ (8001454 <SetDifficulty+0x38>)
 8001442:	2202      	movs	r2, #2
 8001444:	701a      	strb	r2, [r3, #0]
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	20000004 	.word	0x20000004

08001458 <GetMaxSatchels>:

DifficultyLevel GetDifficulty() {
    return current_difficulty;
}

int GetMaxSatchels() {
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
    switch (current_difficulty) {
 800145c:	4b0b      	ldr	r3, [pc, #44]	@ (800148c <GetMaxSatchels+0x34>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b02      	cmp	r3, #2
 8001462:	d00a      	beq.n	800147a <GetMaxSatchels+0x22>
 8001464:	2b02      	cmp	r3, #2
 8001466:	dc0a      	bgt.n	800147e <GetMaxSatchels+0x26>
 8001468:	2b00      	cmp	r3, #0
 800146a:	d002      	beq.n	8001472 <GetMaxSatchels+0x1a>
 800146c:	2b01      	cmp	r3, #1
 800146e:	d002      	beq.n	8001476 <GetMaxSatchels+0x1e>
 8001470:	e005      	b.n	800147e <GetMaxSatchels+0x26>
        case EASY: return 1;
 8001472:	2301      	movs	r3, #1
 8001474:	e004      	b.n	8001480 <GetMaxSatchels+0x28>
        case MEDIUM: return 2;
 8001476:	2302      	movs	r3, #2
 8001478:	e002      	b.n	8001480 <GetMaxSatchels+0x28>
        case HARD: return 3;
 800147a:	2303      	movs	r3, #3
 800147c:	e000      	b.n	8001480 <GetMaxSatchels+0x28>
        default: return 1;
 800147e:	2301      	movs	r3, #1
    }
}
 8001480:	4618      	mov	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	20000004 	.word	0x20000004

08001490 <StartDisplayTask>:
"    ~  ~  ~ ~ ",
"~ ~ ~  ~   ~ ~ ~"
};


void StartDisplayTask(void const * argument) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]

    //int platform_x = 100; //Start of the cliff
    LCD_Clear(0, LCD_COLOR_WHITE);
 8001498:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800149c:	2000      	movs	r0, #0
 800149e:	f000 ff8b 	bl	80023b8 <LCD_Clear>
	DrawMenu();
 80014a2:	f001 faab 	bl	80029fc <DrawMenu>
//    osDelay(100);
//    LCD_Clear(0, LCD_COLOR_RED);
//    osDelay(100);
//    LCD_Clear(0, LCD_COLOR_WHITE);
//    osDelay(50);
    int platform_y = 260;
 80014a6:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80014aa:	60bb      	str	r3, [r7, #8]

    osDelay(50);
 80014ac:	2032      	movs	r0, #50	@ 0x32
 80014ae:	f005 fecc 	bl	800724a <osDelay>
    GameState previous_state = STATE_MENU;
 80014b2:	2300      	movs	r3, #0
 80014b4:	73fb      	strb	r3, [r7, #15]
    while (1) {
        if (current_state != previous_state) {
 80014b6:	4b34      	ldr	r3, [pc, #208]	@ (8001588 <StartDisplayTask+0xf8>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	7bfa      	ldrb	r2, [r7, #15]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d01c      	beq.n	80014fa <StartDisplayTask+0x6a>

            if (current_state == STATE_PLAY) {
 80014c0:	4b31      	ldr	r3, [pc, #196]	@ (8001588 <StartDisplayTask+0xf8>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d115      	bne.n	80014f4 <StartDisplayTask+0x64>
                LCD_Clear(0, LCD_COLOR_WHITE);
 80014c8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80014cc:	2000      	movs	r0, #0
 80014ce:	f000 ff73 	bl	80023b8 <LCD_Clear>
                // ===Shield Gun Energy
                LCD_DisplayChar(175, 1, 'S');
 80014d2:	2253      	movs	r2, #83	@ 0x53
 80014d4:	2101      	movs	r1, #1
 80014d6:	20af      	movs	r0, #175	@ 0xaf
 80014d8:	f000 feb0 	bl	800223c <LCD_DisplayChar>
                LCD_DisplayChar(195, 1, 'G');
 80014dc:	2247      	movs	r2, #71	@ 0x47
 80014de:	2101      	movs	r1, #1
 80014e0:	20c3      	movs	r0, #195	@ 0xc3
 80014e2:	f000 feab 	bl	800223c <LCD_DisplayChar>
                LCD_DisplayChar(214, 1, 'E');
 80014e6:	2245      	movs	r2, #69	@ 0x45
 80014e8:	2101      	movs	r1, #1
 80014ea:	20d6      	movs	r0, #214	@ 0xd6
 80014ec:	f000 fea6 	bl	800223c <LCD_DisplayChar>
                drawCastleAndCliff();
 80014f0:	f000 f852 	bl	8001598 <drawCastleAndCliff>
            }
            previous_state = current_state;
 80014f4:	4b24      	ldr	r3, [pc, #144]	@ (8001588 <StartDisplayTask+0xf8>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	73fb      	strb	r3, [r7, #15]
        }

        switch (current_state) {
 80014fa:	4b23      	ldr	r3, [pc, #140]	@ (8001588 <StartDisplayTask+0xf8>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b03      	cmp	r3, #3
 8001500:	d038      	beq.n	8001574 <StartDisplayTask+0xe4>
 8001502:	2b03      	cmp	r3, #3
 8001504:	dc39      	bgt.n	800157a <StartDisplayTask+0xea>
 8001506:	2b00      	cmp	r3, #0
 8001508:	d031      	beq.n	800156e <StartDisplayTask+0xde>
 800150a:	2b01      	cmp	r3, #1
 800150c:	d135      	bne.n	800157a <StartDisplayTask+0xea>

        case STATE_PLAY:
            movePlatformWithGyro(&platform_x);
 800150e:	481f      	ldr	r0, [pc, #124]	@ (800158c <StartDisplayTask+0xfc>)
 8001510:	f000 f922 	bl	8001758 <movePlatformWithGyro>
            Railgun_Update();
 8001514:	f001 fbde 	bl	8002cd4 <Railgun_Update>
            UpdateSatchels();
 8001518:	f000 faf8 	bl	8001b0c <UpdateSatchels>
            HandleCollisions(platform_x);
 800151c:	4b1b      	ldr	r3, [pc, #108]	@ (800158c <StartDisplayTask+0xfc>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fdc7 	bl	80010b4 <HandleCollisions>
            if (prisoners_escaping) {
 8001526:	4b1a      	ldr	r3, [pc, #104]	@ (8001590 <StartDisplayTask+0x100>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <StartDisplayTask+0xa2>
                PrisonerEscapeAnimation();
 800152e:	f000 f9b3 	bl	8001898 <PrisonerEscapeAnimation>
            }

            if (shield_active) {
 8001532:	4b18      	ldr	r3, [pc, #96]	@ (8001594 <StartDisplayTask+0x104>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d007      	beq.n	800154a <StartDisplayTask+0xba>
                drawCannonAndPlatform(platform_x, platform_y, LCD_COLOR_BLUE);
 800153a:	4b14      	ldr	r3, [pc, #80]	@ (800158c <StartDisplayTask+0xfc>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	221f      	movs	r2, #31
 8001540:	68b9      	ldr	r1, [r7, #8]
 8001542:	4618      	mov	r0, r3
 8001544:	f000 f852 	bl	80015ec <drawCannonAndPlatform>
 8001548:	e006      	b.n	8001558 <StartDisplayTask+0xc8>
            } else {
                drawCannonAndPlatform(platform_x, platform_y, LCD_COLOR_BLACK);
 800154a:	4b10      	ldr	r3, [pc, #64]	@ (800158c <StartDisplayTask+0xfc>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2200      	movs	r2, #0
 8001550:	68b9      	ldr	r1, [r7, #8]
 8001552:	4618      	mov	r0, r3
 8001554:	f000 f84a 	bl	80015ec <drawCannonAndPlatform>
            }

            if (!SatchelIsActive()) {
 8001558:	f000 f9d6 	bl	8001908 <SatchelIsActive>
 800155c:	4603      	mov	r3, r0
 800155e:	f083 0301 	eor.w	r3, r3, #1
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	d00a      	beq.n	800157e <StartDisplayTask+0xee>
                SpawnSatchel();
 8001568:	f000 f9ee 	bl	8001948 <SpawnSatchel>
            }
            break;
 800156c:	e007      	b.n	800157e <StartDisplayTask+0xee>

         case STATE_MENU:
                HandleMenuInput();
 800156e:	f001 fa8d 	bl	8002a8c <HandleMenuInput>
                break;
 8001572:	e005      	b.n	8001580 <StartDisplayTask+0xf0>

         case STATE_GAME_OVER:
                HandleGameOverInput();
 8001574:	f001 fafc 	bl	8002b70 <HandleGameOverInput>
                break;
 8001578:	e002      	b.n	8001580 <StartDisplayTask+0xf0>

            default:
                break;
 800157a:	bf00      	nop
 800157c:	e000      	b.n	8001580 <StartDisplayTask+0xf0>
            break;
 800157e:	bf00      	nop
        }

        osDelay(50);
 8001580:	2032      	movs	r0, #50	@ 0x32
 8001582:	f005 fe62 	bl	800724a <osDelay>
        if (current_state != previous_state) {
 8001586:	e796      	b.n	80014b6 <StartDisplayTask+0x26>
 8001588:	20025ac8 	.word	0x20025ac8
 800158c:	20000008 	.word	0x20000008
 8001590:	20000118 	.word	0x20000118
 8001594:	20025aec 	.word	0x20025aec

08001598 <drawCastleAndCliff>:
    }
}

void drawCastleAndCliff() {
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
    int y = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
    int line_height = 20;
 80015a2:	2314      	movs	r3, #20
 80015a4:	60bb      	str	r3, [r7, #8]
    int x_offset = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	607b      	str	r3, [r7, #4]

    // Loop through the castle charactr array till hit NULL !!!!MIGHT CHANGE TO CHARACTER BASED!!!!!
    while (castle_and_cliff[y] != NULL) {
 80015aa:	e012      	b.n	80015d2 <drawCastleAndCliff+0x3a>
        //Reducce the display offset
    	LCD_DisplayString(x_offset, y * line_height, (char*)castle_and_cliff[y]);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	b298      	uxth	r0, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	fb12 f303 	smulbb	r3, r2, r3
 80015bc:	b299      	uxth	r1, r3
 80015be:	4a0a      	ldr	r2, [pc, #40]	@ (80015e8 <drawCastleAndCliff+0x50>)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c6:	461a      	mov	r2, r3
 80015c8:	f000 fe5a 	bl	8002280 <LCD_DisplayString>
        y++;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	3301      	adds	r3, #1
 80015d0:	60fb      	str	r3, [r7, #12]
    while (castle_and_cliff[y] != NULL) {
 80015d2:	4a05      	ldr	r2, [pc, #20]	@ (80015e8 <drawCastleAndCliff+0x50>)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1e6      	bne.n	80015ac <drawCastleAndCliff+0x14>
    }
}
 80015de:	bf00      	nop
 80015e0:	bf00      	nop
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	2000000c 	.word	0x2000000c

080015ec <drawCannonAndPlatform>:

void drawCannonAndPlatform(int platform_x, int platform_y, uint16_t color) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08c      	sub	sp, #48	@ 0x30
 80015f0:	af02      	add	r7, sp, #8
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	4613      	mov	r3, r2
 80015f8:	80fb      	strh	r3, [r7, #6]
    static int prev_platform_x = -1;  // Track previous position to clear old platform

    // Only clear if the platform has moved
    if (platform_x != prev_platform_x && prev_platform_x != -1) {
 80015fa:	4b56      	ldr	r3, [pc, #344]	@ (8001754 <drawCannonAndPlatform+0x168>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	429a      	cmp	r2, r3
 8001602:	d041      	beq.n	8001688 <drawCannonAndPlatform+0x9c>
 8001604:	4b53      	ldr	r3, [pc, #332]	@ (8001754 <drawCannonAndPlatform+0x168>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800160c:	d03c      	beq.n	8001688 <drawCannonAndPlatform+0x9c>
        // Clear the old platform: platform is drawn in a 6-character lenght (60px wide)

        // Clear platform left part
        if (prev_platform_x > 30) {
 800160e:	4b51      	ldr	r3, [pc, #324]	@ (8001754 <drawCannonAndPlatform+0x168>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b1e      	cmp	r3, #30
 8001614:	dd0b      	ble.n	800162e <drawCannonAndPlatform+0x42>
            LCD_Clear_Rectangle(prev_platform_x, platform_y, 40, 20, LCD_COLOR_WHITE); // Clear the left side
 8001616:	4b4f      	ldr	r3, [pc, #316]	@ (8001754 <drawCannonAndPlatform+0x168>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	b298      	uxth	r0, r3
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	b299      	uxth	r1, r3
 8001620:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	2314      	movs	r3, #20
 8001628:	2228      	movs	r2, #40	@ 0x28
 800162a:	f000 fee7 	bl	80023fc <LCD_Clear_Rectangle>
        }

        // Clear platform right part
        uint16_t right_start = prev_platform_x + 60;
 800162e:	4b49      	ldr	r3, [pc, #292]	@ (8001754 <drawCannonAndPlatform+0x168>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	b29b      	uxth	r3, r3
 8001634:	333c      	adds	r3, #60	@ 0x3c
 8001636:	847b      	strh	r3, [r7, #34]	@ 0x22
        if (right_start < LCD_PIXEL_WIDTH) {
 8001638:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800163a:	2bef      	cmp	r3, #239	@ 0xef
 800163c:	d80c      	bhi.n	8001658 <drawCannonAndPlatform+0x6c>
            LCD_Clear_Rectangle(right_start, platform_y, LCD_PIXEL_WIDTH - right_start, 20, LCD_COLOR_WHITE);  // Clear the right side
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	b299      	uxth	r1, r3
 8001642:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001644:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001648:	b29a      	uxth	r2, r3
 800164a:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 800164c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	2314      	movs	r3, #20
 8001654:	f000 fed2 	bl	80023fc <LCD_Clear_Rectangle>
        }

        // Clear the old cannon (fixed position relative to the platform)
        int prev_cannon_x = prev_platform_x + 25;
 8001658:	4b3e      	ldr	r3, [pc, #248]	@ (8001754 <drawCannonAndPlatform+0x168>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	3319      	adds	r3, #25
 800165e:	61fb      	str	r3, [r7, #28]
        LCD_Clear_Rectangle(prev_cannon_x, 236, 20, 24, LCD_COLOR_WHITE);  // Top cannon part
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	b298      	uxth	r0, r3
 8001664:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	2318      	movs	r3, #24
 800166c:	2214      	movs	r2, #20
 800166e:	21ec      	movs	r1, #236	@ 0xec
 8001670:	f000 fec4 	bl	80023fc <LCD_Clear_Rectangle>
        LCD_Clear_Rectangle(prev_cannon_x, 250, 30, 24, LCD_COLOR_WHITE);  // Bottom cannon part
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	b298      	uxth	r0, r3
 8001678:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	2318      	movs	r3, #24
 8001680:	221e      	movs	r2, #30
 8001682:	21fa      	movs	r1, #250	@ 0xfa
 8001684:	f000 feba 	bl	80023fc <LCD_Clear_Rectangle>
    }

    // platform limiters
    if (platform_x < 10) {
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2b09      	cmp	r3, #9
 800168c:	dc01      	bgt.n	8001692 <drawCannonAndPlatform+0xa6>
        platform_x = 10;
 800168e:	230a      	movs	r3, #10
 8001690:	60fb      	str	r3, [r7, #12]
    }
    if (platform_x > LCD_PIXEL_WIDTH - 65) {  // Assuming platform is 60px wide (6 * 10px per char)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2baf      	cmp	r3, #175	@ 0xaf
 8001696:	dd01      	ble.n	800169c <drawCannonAndPlatform+0xb0>
        platform_x = LCD_PIXEL_WIDTH - 65;
 8001698:	23af      	movs	r3, #175	@ 0xaf
 800169a:	60fb      	str	r3, [r7, #12]
    }

    // Draw the new platform and cannon at updated position
    int cannon_x = platform_x + 20;   // Center the cannon
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	3314      	adds	r3, #20
 80016a0:	61bb      	str	r3, [r7, #24]
    int cannon_y_top = 236;           // Top part
 80016a2:	23ec      	movs	r3, #236	@ 0xec
 80016a4:	617b      	str	r3, [r7, #20]
    int cannon_y_bottom = 250;        // Bottom part
 80016a6:	23fa      	movs	r3, #250	@ 0xfa
 80016a8:	613b      	str	r3, [r7, #16]

    // Draw the platform (6 '=' characters 10px apart)
    for (int i = 0; i < 5; i++) {
 80016aa:	2300      	movs	r3, #0
 80016ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80016ae:	e013      	b.n	80016d8 <drawCannonAndPlatform+0xec>
        LCD_DisplayCharColored(platform_x + i * 10, platform_y, '=', color);
 80016b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	461a      	mov	r2, r3
 80016b6:	0092      	lsls	r2, r2, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	b29a      	uxth	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	4413      	add	r3, r2
 80016c4:	b298      	uxth	r0, r3
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	b299      	uxth	r1, r3
 80016ca:	88fb      	ldrh	r3, [r7, #6]
 80016cc:	223d      	movs	r2, #61	@ 0x3d
 80016ce:	f000 fd95 	bl	80021fc <LCD_DisplayCharColored>
    for (int i = 0; i < 5; i++) {
 80016d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d4:	3301      	adds	r3, #1
 80016d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80016d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016da:	2b04      	cmp	r3, #4
 80016dc:	dde8      	ble.n	80016b0 <drawCannonAndPlatform+0xc4>
    }

    // Draw the cannon
    // Top: "\\"
    LCD_DisplayCharColored(cannon_x + 1, cannon_y_top, '\\', color);
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	3301      	adds	r3, #1
 80016e4:	b298      	uxth	r0, r3
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	b299      	uxth	r1, r3
 80016ea:	88fb      	ldrh	r3, [r7, #6]
 80016ec:	225c      	movs	r2, #92	@ 0x5c
 80016ee:	f000 fd85 	bl	80021fc <LCD_DisplayCharColored>
    LCD_DisplayCharColored(cannon_x + 6, cannon_y_top, '\\', color);
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	3306      	adds	r3, #6
 80016f8:	b298      	uxth	r0, r3
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	b299      	uxth	r1, r3
 80016fe:	88fb      	ldrh	r3, [r7, #6]
 8001700:	225c      	movs	r2, #92	@ 0x5c
 8001702:	f000 fd7b 	bl	80021fc <LCD_DisplayCharColored>

    // Bottom: "/\\"
    LCD_DisplayCharColored(cannon_x, cannon_y_bottom, '/', color);
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	b298      	uxth	r0, r3
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	b299      	uxth	r1, r3
 800170e:	88fb      	ldrh	r3, [r7, #6]
 8001710:	222f      	movs	r2, #47	@ 0x2f
 8001712:	f000 fd73 	bl	80021fc <LCD_DisplayCharColored>
    LCD_DisplayCharColored(cannon_x + 6, cannon_y_bottom, '\\', color);
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	b29b      	uxth	r3, r3
 800171a:	3306      	adds	r3, #6
 800171c:	b298      	uxth	r0, r3
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	b299      	uxth	r1, r3
 8001722:	88fb      	ldrh	r3, [r7, #6]
 8001724:	225c      	movs	r2, #92	@ 0x5c
 8001726:	f000 fd69 	bl	80021fc <LCD_DisplayCharColored>
    LCD_DisplayCharColored(cannon_x + 11, cannon_y_bottom, '\\', color);
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	b29b      	uxth	r3, r3
 800172e:	330b      	adds	r3, #11
 8001730:	b298      	uxth	r0, r3
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	b299      	uxth	r1, r3
 8001736:	88fb      	ldrh	r3, [r7, #6]
 8001738:	225c      	movs	r2, #92	@ 0x5c
 800173a:	f000 fd5f 	bl	80021fc <LCD_DisplayCharColored>

    // Save the current platform_x for the next iteration
    prev_platform_x = platform_x;
 800173e:	4a05      	ldr	r2, [pc, #20]	@ (8001754 <drawCannonAndPlatform+0x168>)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6013      	str	r3, [r2, #0]
    osDelay(50);
 8001744:	2032      	movs	r0, #50	@ 0x32
 8001746:	f005 fd80 	bl	800724a <osDelay>
}
 800174a:	bf00      	nop
 800174c:	3728      	adds	r7, #40	@ 0x28
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	2000004c 	.word	0x2000004c

08001758 <movePlatformWithGyro>:

void movePlatformWithGyro(int* platform_x) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
    static int prev_gyro_y = 0;   // Previous gyro value for smoothing
    int gyro_y_velocity = Gyro_Get_Velocity();  // Get current gyro Y velocity
 8001760:	f000 fad2 	bl	8001d08 <Gyro_Get_Velocity>
 8001764:	4603      	mov	r3, r0
 8001766:	60bb      	str	r3, [r7, #8]

    // Simple moving average filter for smoothing gyro input
    int filtered_gyro_y = (prev_gyro_y + gyro_y_velocity) / 2;
 8001768:	4b47      	ldr	r3, [pc, #284]	@ (8001888 <movePlatformWithGyro+0x130>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	4413      	add	r3, r2
 8001770:	0fda      	lsrs	r2, r3, #31
 8001772:	4413      	add	r3, r2
 8001774:	105b      	asrs	r3, r3, #1
 8001776:	60fb      	str	r3, [r7, #12]
    prev_gyro_y = filtered_gyro_y;
 8001778:	4a43      	ldr	r2, [pc, #268]	@ (8001888 <movePlatformWithGyro+0x130>)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6013      	str	r3, [r2, #0]

    // Apply deadzone: if the gyro value is within the deadzone, don't update the platform
    if (filtered_gyro_y > -DEADZONE && filtered_gyro_y < DEADZONE) {
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f113 0f09 	cmn.w	r3, #9
 8001784:	db04      	blt.n	8001790 <movePlatformWithGyro+0x38>
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2b09      	cmp	r3, #9
 800178a:	dc01      	bgt.n	8001790 <movePlatformWithGyro+0x38>
        filtered_gyro_y = 0;  // No movement if within the deadzone
 800178c:	2300      	movs	r3, #0
 800178e:	60fb      	str	r3, [r7, #12]
    }

    // Update platform acceleration based on gyro input
    platform_acceleration = filtered_gyro_y / SCALE_FACTOR;  // Apply scaling factor
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4a3e      	ldr	r2, [pc, #248]	@ (800188c <movePlatformWithGyro+0x134>)
 8001794:	fb82 1203 	smull	r1, r2, r2, r3
 8001798:	11d2      	asrs	r2, r2, #7
 800179a:	17db      	asrs	r3, r3, #31
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	4a3c      	ldr	r2, [pc, #240]	@ (8001890 <movePlatformWithGyro+0x138>)
 80017a0:	6013      	str	r3, [r2, #0]

    // Update platform velocity based on the acceleration
    platform_velocity += platform_acceleration;
 80017a2:	4b3c      	ldr	r3, [pc, #240]	@ (8001894 <movePlatformWithGyro+0x13c>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	4b3a      	ldr	r3, [pc, #232]	@ (8001890 <movePlatformWithGyro+0x138>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4413      	add	r3, r2
 80017ac:	4a39      	ldr	r2, [pc, #228]	@ (8001894 <movePlatformWithGyro+0x13c>)
 80017ae:	6013      	str	r3, [r2, #0]

    // Apply friction if the platform is not being accelerated by the gyro
    if (platform_acceleration == 0) {
 80017b0:	4b37      	ldr	r3, [pc, #220]	@ (8001890 <movePlatformWithGyro+0x138>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d112      	bne.n	80017de <movePlatformWithGyro+0x86>
        if (platform_velocity > 0) {
 80017b8:	4b36      	ldr	r3, [pc, #216]	@ (8001894 <movePlatformWithGyro+0x13c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	dd05      	ble.n	80017cc <movePlatformWithGyro+0x74>
            platform_velocity -= FRICTION;  // Apply friction (deceleration)
 80017c0:	4b34      	ldr	r3, [pc, #208]	@ (8001894 <movePlatformWithGyro+0x13c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	3b02      	subs	r3, #2
 80017c6:	4a33      	ldr	r2, [pc, #204]	@ (8001894 <movePlatformWithGyro+0x13c>)
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	e008      	b.n	80017de <movePlatformWithGyro+0x86>
        } else if (platform_velocity < 0) {
 80017cc:	4b31      	ldr	r3, [pc, #196]	@ (8001894 <movePlatformWithGyro+0x13c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	da04      	bge.n	80017de <movePlatformWithGyro+0x86>
            platform_velocity += FRICTION;
 80017d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001894 <movePlatformWithGyro+0x13c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	3302      	adds	r3, #2
 80017da:	4a2e      	ldr	r2, [pc, #184]	@ (8001894 <movePlatformWithGyro+0x13c>)
 80017dc:	6013      	str	r3, [r2, #0]
        }
    }

    // Apply velocity limits (max speed)
    if (platform_velocity > MAX_VELOCITY) {
 80017de:	4b2d      	ldr	r3, [pc, #180]	@ (8001894 <movePlatformWithGyro+0x13c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2b64      	cmp	r3, #100	@ 0x64
 80017e4:	dd02      	ble.n	80017ec <movePlatformWithGyro+0x94>
        platform_velocity = MAX_VELOCITY;
 80017e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001894 <movePlatformWithGyro+0x13c>)
 80017e8:	2264      	movs	r2, #100	@ 0x64
 80017ea:	601a      	str	r2, [r3, #0]
    }
    if (platform_velocity < -MAX_VELOCITY) {
 80017ec:	4b29      	ldr	r3, [pc, #164]	@ (8001894 <movePlatformWithGyro+0x13c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 80017f4:	da03      	bge.n	80017fe <movePlatformWithGyro+0xa6>
        platform_velocity = -MAX_VELOCITY;
 80017f6:	4b27      	ldr	r3, [pc, #156]	@ (8001894 <movePlatformWithGyro+0x13c>)
 80017f8:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 80017fc:	601a      	str	r2, [r3, #0]
    }

    // Update the platform's position based on its velocity
    *platform_x += platform_velocity;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	4b24      	ldr	r3, [pc, #144]	@ (8001894 <movePlatformWithGyro+0x13c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	441a      	add	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	601a      	str	r2, [r3, #0]

    // Apply boundary check and bounce the platform if it hits the edge of the screen
    if (*platform_x < 10) {
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b09      	cmp	r3, #9
 8001812:	dc16      	bgt.n	8001842 <movePlatformWithGyro+0xea>
        *platform_x = 10;  // Keep platform at the left edge
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	220a      	movs	r2, #10
 8001818:	601a      	str	r2, [r3, #0]
        platform_velocity = -platform_velocity * BOUNCE_DAMPING;  // Reverse and dampen velocity (bounce effect)
 800181a:	4b1e      	ldr	r3, [pc, #120]	@ (8001894 <movePlatformWithGyro+0x13c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	425b      	negs	r3, r3
 8001820:	4618      	mov	r0, r3
 8001822:	f7fe ffb9 	bl	8000798 <__aeabi_i2d>
 8001826:	a316      	add	r3, pc, #88	@ (adr r3, 8001880 <movePlatformWithGyro+0x128>)
 8001828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182c:	f7fe fd38 	bl	80002a0 <__aeabi_dmul>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	f7ff f818 	bl	800086c <__aeabi_d2iz>
 800183c:	4603      	mov	r3, r0
 800183e:	4a15      	ldr	r2, [pc, #84]	@ (8001894 <movePlatformWithGyro+0x13c>)
 8001840:	6013      	str	r3, [r2, #0]
    }
    if (*platform_x > LCD_PIXEL_WIDTH - 65) {  // Assuming platform is 60px wide (6 * 10px per char)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2baf      	cmp	r3, #175	@ 0xaf
 8001848:	dd16      	ble.n	8001878 <movePlatformWithGyro+0x120>
        *platform_x = LCD_PIXEL_WIDTH - 65;  // Keep platform at the right edge
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	22af      	movs	r2, #175	@ 0xaf
 800184e:	601a      	str	r2, [r3, #0]
        platform_velocity = -platform_velocity * BOUNCE_DAMPING;  // Reverse and dampen velocity (bounce effect)
 8001850:	4b10      	ldr	r3, [pc, #64]	@ (8001894 <movePlatformWithGyro+0x13c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	425b      	negs	r3, r3
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe ff9e 	bl	8000798 <__aeabi_i2d>
 800185c:	a308      	add	r3, pc, #32	@ (adr r3, 8001880 <movePlatformWithGyro+0x128>)
 800185e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001862:	f7fe fd1d 	bl	80002a0 <__aeabi_dmul>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4610      	mov	r0, r2
 800186c:	4619      	mov	r1, r3
 800186e:	f7fe fffd 	bl	800086c <__aeabi_d2iz>
 8001872:	4603      	mov	r3, r0
 8001874:	4a07      	ldr	r2, [pc, #28]	@ (8001894 <movePlatformWithGyro+0x13c>)
 8001876:	6013      	str	r3, [r2, #0]
    }
}
 8001878:	bf00      	nop
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	cccccccd 	.word	0xcccccccd
 8001884:	3feccccc 	.word	0x3feccccc
 8001888:	20000130 	.word	0x20000130
 800188c:	51eb851f 	.word	0x51eb851f
 8001890:	2000012c 	.word	0x2000012c
 8001894:	20000128 	.word	0x20000128

08001898 <PrisonerEscapeAnimation>:

void PrisonerEscapeAnimation(void) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
    static int x = 7;
    static uint32_t last_update_time = 0;

    uint32_t now = HAL_GetTick();
 800189e:	f002 fbb9 	bl	8004014 <HAL_GetTick>
 80018a2:	6078      	str	r0, [r7, #4]

    if (now - last_update_time < 50) {
 80018a4:	4b16      	ldr	r3, [pc, #88]	@ (8001900 <PrisonerEscapeAnimation+0x68>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b31      	cmp	r3, #49	@ 0x31
 80018ae:	d920      	bls.n	80018f2 <PrisonerEscapeAnimation+0x5a>
        return;  //  update every 50ms
    }
    last_update_time = now;
 80018b0:	4a13      	ldr	r2, [pc, #76]	@ (8001900 <PrisonerEscapeAnimation+0x68>)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6013      	str	r3, [r2, #0]

    if (x >= 80) {
 80018b6:	4b13      	ldr	r3, [pc, #76]	@ (8001904 <PrisonerEscapeAnimation+0x6c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b4f      	cmp	r3, #79	@ 0x4f
 80018bc:	dc1b      	bgt.n	80018f6 <PrisonerEscapeAnimation+0x5e>
        return;  // Finished animation
    }

    // Draw prisoner normally in black
    LCD_DisplayCharColored(x, 88, '|', LCD_COLOR_RED);
 80018be:	4b11      	ldr	r3, [pc, #68]	@ (8001904 <PrisonerEscapeAnimation+0x6c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	b298      	uxth	r0, r3
 80018c4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80018c8:	227c      	movs	r2, #124	@ 0x7c
 80018ca:	2158      	movs	r1, #88	@ 0x58
 80018cc:	f000 fc96 	bl	80021fc <LCD_DisplayCharColored>

    // Erase previous prisoner by drawing '|' in white color
    LCD_DisplayCharColored(x - 2, 88, '|', LCD_COLOR_WHITE);
 80018d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001904 <PrisonerEscapeAnimation+0x6c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	3b02      	subs	r3, #2
 80018d8:	b298      	uxth	r0, r3
 80018da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018de:	227c      	movs	r2, #124	@ 0x7c
 80018e0:	2158      	movs	r1, #88	@ 0x58
 80018e2:	f000 fc8b 	bl	80021fc <LCD_DisplayCharColored>

    x += 2;  // Move forward
 80018e6:	4b07      	ldr	r3, [pc, #28]	@ (8001904 <PrisonerEscapeAnimation+0x6c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	3302      	adds	r3, #2
 80018ec:	4a05      	ldr	r2, [pc, #20]	@ (8001904 <PrisonerEscapeAnimation+0x6c>)
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	e002      	b.n	80018f8 <PrisonerEscapeAnimation+0x60>
        return;  //  update every 50ms
 80018f2:	bf00      	nop
 80018f4:	e000      	b.n	80018f8 <PrisonerEscapeAnimation+0x60>
        return;  // Finished animation
 80018f6:	bf00      	nop
}
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000134 	.word	0x20000134
 8001904:	20000050 	.word	0x20000050

08001908 <SatchelIsActive>:

Satchel satchels[MAX_SATCHELS];
Satchel satchel = { .active = false };
float satchel_gravity = 1.0f;

bool SatchelIsActive() {
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
	return satchel.active && satchel.y < 270;
 800190c:	4b0c      	ldr	r3, [pc, #48]	@ (8001940 <SatchelIsActive+0x38>)
 800190e:	7c1b      	ldrb	r3, [r3, #16]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00b      	beq.n	800192c <SatchelIsActive+0x24>
 8001914:	4b0a      	ldr	r3, [pc, #40]	@ (8001940 <SatchelIsActive+0x38>)
 8001916:	edd3 7a01 	vldr	s15, [r3, #4]
 800191a:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001944 <SatchelIsActive+0x3c>
 800191e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001926:	d501      	bpl.n	800192c <SatchelIsActive+0x24>
 8001928:	2301      	movs	r3, #1
 800192a:	e000      	b.n	800192e <SatchelIsActive+0x26>
 800192c:	2300      	movs	r3, #0
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	b2db      	uxtb	r3, r3
}
 8001934:	4618      	mov	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	20000174 	.word	0x20000174
 8001944:	43870000 	.word	0x43870000

08001948 <SpawnSatchel>:
    for (int i = 0; i < MAX_SATCHELS; i++) {
        satchels[i].active = false;
    }
}

void SpawnSatchel() {
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
    int active_count = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < MAX_SATCHELS; i++) {
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	e010      	b.n	800197a <SpawnSatchel+0x32>
        if (satchels[i].active) {
 8001958:	4965      	ldr	r1, [pc, #404]	@ (8001af0 <SpawnSatchel+0x1a8>)
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4613      	mov	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	440b      	add	r3, r1
 8001966:	3310      	adds	r3, #16
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d002      	beq.n	8001974 <SpawnSatchel+0x2c>
            active_count++;
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	3301      	adds	r3, #1
 8001972:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < MAX_SATCHELS; i++) {
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	3301      	adds	r3, #1
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	2b02      	cmp	r3, #2
 800197e:	ddeb      	ble.n	8001958 <SpawnSatchel+0x10>
        }
    }

    if (active_count >= GetMaxSatchels()) {
 8001980:	f7ff fd6a 	bl	8001458 <GetMaxSatchels>
 8001984:	4602      	mov	r2, r0
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	4293      	cmp	r3, r2
 800198a:	f280 80ac 	bge.w	8001ae6 <SpawnSatchel+0x19e>
        return;
    }

    for (int i = 0; i < MAX_SATCHELS; i++) {
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	e0a3      	b.n	8001adc <SpawnSatchel+0x194>
        if (!satchels[i].active) {
 8001994:	4956      	ldr	r1, [pc, #344]	@ (8001af0 <SpawnSatchel+0x1a8>)
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	4613      	mov	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	3310      	adds	r3, #16
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	f083 0301 	eor.w	r3, r3, #1
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 8092 	beq.w	8001ad6 <SpawnSatchel+0x18e>
            satchels[i].x = 50;
 80019b2:	494f      	ldr	r1, [pc, #316]	@ (8001af0 <SpawnSatchel+0x1a8>)
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	440b      	add	r3, r1
 80019c0:	4a4c      	ldr	r2, [pc, #304]	@ (8001af4 <SpawnSatchel+0x1ac>)
 80019c2:	601a      	str	r2, [r3, #0]
            satchels[i].y = 140;
 80019c4:	494a      	ldr	r1, [pc, #296]	@ (8001af0 <SpawnSatchel+0x1a8>)
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	4613      	mov	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	440b      	add	r3, r1
 80019d2:	3304      	adds	r3, #4
 80019d4:	4a48      	ldr	r2, [pc, #288]	@ (8001af8 <SpawnSatchel+0x1b0>)
 80019d6:	601a      	str	r2, [r3, #0]

            // Randomize vx between 1–7, vy between -4–-8 (upward)
            float vx = 1.0f + ((rand() % 100) / 100.0f) * 5.0f;  // 1.0 → 7.0
 80019d8:	f007 f9a4 	bl	8008d24 <rand>
 80019dc:	4603      	mov	r3, r0
 80019de:	4a47      	ldr	r2, [pc, #284]	@ (8001afc <SpawnSatchel+0x1b4>)
 80019e0:	fb82 1203 	smull	r1, r2, r2, r3
 80019e4:	1151      	asrs	r1, r2, #5
 80019e6:	17da      	asrs	r2, r3, #31
 80019e8:	1a8a      	subs	r2, r1, r2
 80019ea:	2164      	movs	r1, #100	@ 0x64
 80019ec:	fb01 f202 	mul.w	r2, r1, r2
 80019f0:	1a9a      	subs	r2, r3, r2
 80019f2:	ee07 2a90 	vmov	s15, r2
 80019f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019fa:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8001b00 <SpawnSatchel+0x1b8>
 80019fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a02:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001a06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001a0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a12:	edc7 7a02 	vstr	s15, [r7, #8]
            float vy = -(1.0f + ((rand() % 100) / 100.0f) * 4.0f);  // -1.0 → -5.0 (up)
 8001a16:	f007 f985 	bl	8008d24 <rand>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4a37      	ldr	r2, [pc, #220]	@ (8001afc <SpawnSatchel+0x1b4>)
 8001a1e:	fb82 1203 	smull	r1, r2, r2, r3
 8001a22:	1151      	asrs	r1, r2, #5
 8001a24:	17da      	asrs	r2, r3, #31
 8001a26:	1a8a      	subs	r2, r1, r2
 8001a28:	2164      	movs	r1, #100	@ 0x64
 8001a2a:	fb01 f202 	mul.w	r2, r1, r2
 8001a2e:	1a9a      	subs	r2, r3, r2
 8001a30:	ee07 2a90 	vmov	s15, r2
 8001a34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a38:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8001b00 <SpawnSatchel+0x1b8>
 8001a3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a40:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001a44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001a4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a50:	eef1 7a67 	vneg.f32	s15, s15
 8001a54:	edc7 7a01 	vstr	s15, [r7, #4]

            satchel_gravity = ENEMY_GRAVITY_MIN + ((rand() % 100) / 100.0f) * (ENEMY_GRAVITY_MAX - ENEMY_GRAVITY_MIN);
 8001a58:	f007 f964 	bl	8008d24 <rand>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	4a27      	ldr	r2, [pc, #156]	@ (8001afc <SpawnSatchel+0x1b4>)
 8001a60:	fb82 1203 	smull	r1, r2, r2, r3
 8001a64:	1151      	asrs	r1, r2, #5
 8001a66:	17da      	asrs	r2, r3, #31
 8001a68:	1a8a      	subs	r2, r1, r2
 8001a6a:	2164      	movs	r1, #100	@ 0x64
 8001a6c:	fb01 f202 	mul.w	r2, r1, r2
 8001a70:	1a9a      	subs	r2, r3, r2
 8001a72:	ee07 2a90 	vmov	s15, r2
 8001a76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a7a:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8001b00 <SpawnSatchel+0x1b8>
 8001a7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a82:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001b04 <SpawnSatchel+0x1bc>
 8001a86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a8a:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001b04 <SpawnSatchel+0x1bc>
 8001a8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a92:	4b1d      	ldr	r3, [pc, #116]	@ (8001b08 <SpawnSatchel+0x1c0>)
 8001a94:	edc3 7a00 	vstr	s15, [r3]

            satchels[i].vx = vx;
 8001a98:	4915      	ldr	r1, [pc, #84]	@ (8001af0 <SpawnSatchel+0x1a8>)
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	3308      	adds	r3, #8
 8001aa8:	68ba      	ldr	r2, [r7, #8]
 8001aaa:	601a      	str	r2, [r3, #0]
            satchels[i].vy = vy;
 8001aac:	4910      	ldr	r1, [pc, #64]	@ (8001af0 <SpawnSatchel+0x1a8>)
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	440b      	add	r3, r1
 8001aba:	330c      	adds	r3, #12
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	601a      	str	r2, [r3, #0]
            satchels[i].active = true;
 8001ac0:	490b      	ldr	r1, [pc, #44]	@ (8001af0 <SpawnSatchel+0x1a8>)
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	440b      	add	r3, r1
 8001ace:	3310      	adds	r3, #16
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	701a      	strb	r2, [r3, #0]
            break;
 8001ad4:	e008      	b.n	8001ae8 <SpawnSatchel+0x1a0>
    for (int i = 0; i < MAX_SATCHELS; i++) {
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	f77f af58 	ble.w	8001994 <SpawnSatchel+0x4c>
 8001ae4:	e000      	b.n	8001ae8 <SpawnSatchel+0x1a0>
        return;
 8001ae6:	bf00      	nop
        }
    }
}
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000138 	.word	0x20000138
 8001af4:	42480000 	.word	0x42480000
 8001af8:	430c0000 	.word	0x430c0000
 8001afc:	51eb851f 	.word	0x51eb851f
 8001b00:	42c80000 	.word	0x42c80000
 8001b04:	3dcccccd 	.word	0x3dcccccd
 8001b08:	20000054 	.word	0x20000054

08001b0c <UpdateSatchels>:



void UpdateSatchels() {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
	fflush(stdout);
 8001b12:	4b78      	ldr	r3, [pc, #480]	@ (8001cf4 <UpdateSatchels+0x1e8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f007 f8ef 	bl	8008cfc <fflush>
    bool any_active = false;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < MAX_SATCHELS; i++) {
 8001b22:	2300      	movs	r3, #0
 8001b24:	603b      	str	r3, [r7, #0]
 8001b26:	e0dc      	b.n	8001ce2 <UpdateSatchels+0x1d6>
        if (!satchels[i].active) continue;
 8001b28:	4973      	ldr	r1, [pc, #460]	@ (8001cf8 <UpdateSatchels+0x1ec>)
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	440b      	add	r3, r1
 8001b36:	3310      	adds	r3, #16
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	f083 0301 	eor.w	r3, r3, #1
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f040 80ca 	bne.w	8001cda <UpdateSatchels+0x1ce>
        any_active = true;
 8001b46:	2301      	movs	r3, #1
 8001b48:	71fb      	strb	r3, [r7, #7]
        // Satchel physics update
        LCD_Draw_Circle_Fill((int)satchels[i].x, (int)satchels[i].y, 3, LCD_COLOR_WHITE);
 8001b4a:	496b      	ldr	r1, [pc, #428]	@ (8001cf8 <UpdateSatchels+0x1ec>)
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	440b      	add	r3, r1
 8001b58:	edd3 7a00 	vldr	s15, [r3]
 8001b5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b60:	ee17 3a90 	vmov	r3, s15
 8001b64:	b298      	uxth	r0, r3
 8001b66:	4964      	ldr	r1, [pc, #400]	@ (8001cf8 <UpdateSatchels+0x1ec>)
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	440b      	add	r3, r1
 8001b74:	3304      	adds	r3, #4
 8001b76:	edd3 7a00 	vldr	s15, [r3]
 8001b7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b7e:	ee17 3a90 	vmov	r3, s15
 8001b82:	b299      	uxth	r1, r3
 8001b84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b88:	2203      	movs	r2, #3
 8001b8a:	f000 fbc1 	bl	8002310 <LCD_Draw_Circle_Fill>
        satchels[i].vy += satchel_gravity;
 8001b8e:	495a      	ldr	r1, [pc, #360]	@ (8001cf8 <UpdateSatchels+0x1ec>)
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	4613      	mov	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	440b      	add	r3, r1
 8001b9c:	330c      	adds	r3, #12
 8001b9e:	ed93 7a00 	vldr	s14, [r3]
 8001ba2:	4b56      	ldr	r3, [pc, #344]	@ (8001cfc <UpdateSatchels+0x1f0>)
 8001ba4:	edd3 7a00 	vldr	s15, [r3]
 8001ba8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bac:	4952      	ldr	r1, [pc, #328]	@ (8001cf8 <UpdateSatchels+0x1ec>)
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4413      	add	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	440b      	add	r3, r1
 8001bba:	330c      	adds	r3, #12
 8001bbc:	edc3 7a00 	vstr	s15, [r3]
        satchels[i].y += satchels[i].vy;
 8001bc0:	494d      	ldr	r1, [pc, #308]	@ (8001cf8 <UpdateSatchels+0x1ec>)
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	440b      	add	r3, r1
 8001bce:	3304      	adds	r3, #4
 8001bd0:	ed93 7a00 	vldr	s14, [r3]
 8001bd4:	4948      	ldr	r1, [pc, #288]	@ (8001cf8 <UpdateSatchels+0x1ec>)
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	440b      	add	r3, r1
 8001be2:	330c      	adds	r3, #12
 8001be4:	edd3 7a00 	vldr	s15, [r3]
 8001be8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bec:	4942      	ldr	r1, [pc, #264]	@ (8001cf8 <UpdateSatchels+0x1ec>)
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	edc3 7a00 	vstr	s15, [r3]
        satchels[i].x += satchels[i].vx;
 8001c00:	493d      	ldr	r1, [pc, #244]	@ (8001cf8 <UpdateSatchels+0x1ec>)
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	ed93 7a00 	vldr	s14, [r3]
 8001c12:	4939      	ldr	r1, [pc, #228]	@ (8001cf8 <UpdateSatchels+0x1ec>)
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	4613      	mov	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	440b      	add	r3, r1
 8001c20:	3308      	adds	r3, #8
 8001c22:	edd3 7a00 	vldr	s15, [r3]
 8001c26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c2a:	4933      	ldr	r1, [pc, #204]	@ (8001cf8 <UpdateSatchels+0x1ec>)
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	440b      	add	r3, r1
 8001c38:	edc3 7a00 	vstr	s15, [r3]
        if (satchels[i].y >= 280 || satchels[i].x >= 235) {
 8001c3c:	492e      	ldr	r1, [pc, #184]	@ (8001cf8 <UpdateSatchels+0x1ec>)
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	4613      	mov	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	440b      	add	r3, r1
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	edd3 7a00 	vldr	s15, [r3]
 8001c50:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001d00 <UpdateSatchels+0x1f4>
 8001c54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5c:	da0f      	bge.n	8001c7e <UpdateSatchels+0x172>
 8001c5e:	4926      	ldr	r1, [pc, #152]	@ (8001cf8 <UpdateSatchels+0x1ec>)
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	edd3 7a00 	vldr	s15, [r3]
 8001c70:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001d04 <UpdateSatchels+0x1f8>
 8001c74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c7c:	db0a      	blt.n	8001c94 <UpdateSatchels+0x188>
            satchels[i].active = false;
 8001c7e:	491e      	ldr	r1, [pc, #120]	@ (8001cf8 <UpdateSatchels+0x1ec>)
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	4613      	mov	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	440b      	add	r3, r1
 8001c8c:	3310      	adds	r3, #16
 8001c8e:	2200      	movs	r2, #0
 8001c90:	701a      	strb	r2, [r3, #0]
 8001c92:	e023      	b.n	8001cdc <UpdateSatchels+0x1d0>
        } else {
            LCD_Draw_Circle_Fill((int)satchels[i].x, (int)satchels[i].y, 3, LCD_COLOR_RED);
 8001c94:	4918      	ldr	r1, [pc, #96]	@ (8001cf8 <UpdateSatchels+0x1ec>)
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	edd3 7a00 	vldr	s15, [r3]
 8001ca6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001caa:	ee17 3a90 	vmov	r3, s15
 8001cae:	b298      	uxth	r0, r3
 8001cb0:	4911      	ldr	r1, [pc, #68]	@ (8001cf8 <UpdateSatchels+0x1ec>)
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	3304      	adds	r3, #4
 8001cc0:	edd3 7a00 	vldr	s15, [r3]
 8001cc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cc8:	ee17 3a90 	vmov	r3, s15
 8001ccc:	b299      	uxth	r1, r3
 8001cce:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001cd2:	2203      	movs	r2, #3
 8001cd4:	f000 fb1c 	bl	8002310 <LCD_Draw_Circle_Fill>
 8001cd8:	e000      	b.n	8001cdc <UpdateSatchels+0x1d0>
        if (!satchels[i].active) continue;
 8001cda:	bf00      	nop
    for (int i = 0; i < MAX_SATCHELS; i++) {
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	603b      	str	r3, [r7, #0]
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	f77f af1f 	ble.w	8001b28 <UpdateSatchels+0x1c>
        }
    }
    if (!any_active) {
        //printf("No active satchels right now.\n");
    }
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	200000a0 	.word	0x200000a0
 8001cf8:	20000138 	.word	0x20000138
 8001cfc:	20000054 	.word	0x20000054
 8001d00:	438c0000 	.word	0x438c0000
 8001d04:	436b0000 	.word	0x436b0000

08001d08 <Gyro_Get_Velocity>:
    Gyro_Transmit_Data(&cmd);
    Gyro_Transmit_Data(&tx_buff);
    Gyro_Slave_Disable();
}

int16_t Gyro_Get_Velocity(){
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
    int16_t yval = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	80fb      	strh	r3, [r7, #6]
    uint8_t cmd = (GYRO_READ | MS_BIT | OUT_Y_L);
 8001d12:	23ea      	movs	r3, #234	@ 0xea
 8001d14:	717b      	strb	r3, [r7, #5]
    uint8_t rxbuff_yl = 0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	713b      	strb	r3, [r7, #4]
    uint8_t rxbuff_yh = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	70fb      	strb	r3, [r7, #3]

    Gyro_Slave_Enable();
 8001d1e:	f000 f82f 	bl	8001d80 <Gyro_Slave_Enable>
    Gyro_Transmit_Data(&cmd);
 8001d22:	1d7b      	adds	r3, r7, #5
 8001d24:	4618      	mov	r0, r3
 8001d26:	f000 f85d 	bl	8001de4 <Gyro_Transmit_Data>
    Gyro_Receive_Data(&rxbuff_yl);
 8001d2a:	1d3b      	adds	r3, r7, #4
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f000 f83f 	bl	8001db0 <Gyro_Receive_Data>
    Gyro_Receive_Data(&rxbuff_yh);
 8001d32:	1cfb      	adds	r3, r7, #3
 8001d34:	4618      	mov	r0, r3
 8001d36:	f000 f83b 	bl	8001db0 <Gyro_Receive_Data>
    Gyro_Slave_Disable();
 8001d3a:	f000 f82d 	bl	8001d98 <Gyro_Slave_Disable>

    yval = (int16_t)((rxbuff_yh << 8) | rxbuff_yl);
 8001d3e:	78fb      	ldrb	r3, [r7, #3]
 8001d40:	021b      	lsls	r3, r3, #8
 8001d42:	b21a      	sxth	r2, r3
 8001d44:	793b      	ldrb	r3, [r7, #4]
 8001d46:	b21b      	sxth	r3, r3
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	80fb      	strh	r3, [r7, #6]
    return yval;
 8001d4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <Gyro_HAL_Check>:
    Gyro_Transmit_Data(&addr_cmd);
    Gyro_Transmit_Data(&reg_cmd);
    Gyro_Slave_Disable();
}

void Gyro_HAL_Check(){
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
    if (HAL_Status != HAL_OK) {
 8001d5c:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <Gyro_HAL_Check+0x20>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d007      	beq.n	8001d74 <Gyro_HAL_Check+0x1c>
        printf("HAL Error: %d\n", HAL_Status);
 8001d64:	4b04      	ldr	r3, [pc, #16]	@ (8001d78 <Gyro_HAL_Check+0x20>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4804      	ldr	r0, [pc, #16]	@ (8001d7c <Gyro_HAL_Check+0x24>)
 8001d6c:	f007 f8da 	bl	8008f24 <iprintf>
        while(1);
 8001d70:	bf00      	nop
 8001d72:	e7fd      	b.n	8001d70 <Gyro_HAL_Check+0x18>
    }
}
 8001d74:	bf00      	nop
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20000188 	.word	0x20000188
 8001d7c:	08009d58 	.word	0x08009d58

08001d80 <Gyro_Slave_Enable>:

void Gyro_Slave_Enable(){
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8001d84:	2200      	movs	r2, #0
 8001d86:	2102      	movs	r1, #2
 8001d88:	4802      	ldr	r0, [pc, #8]	@ (8001d94 <Gyro_Slave_Enable+0x14>)
 8001d8a:	f002 fd05 	bl	8004798 <HAL_GPIO_WritePin>
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40020800 	.word	0x40020800

08001d98 <Gyro_Slave_Disable>:

void Gyro_Slave_Disable(){
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	2102      	movs	r1, #2
 8001da0:	4802      	ldr	r0, [pc, #8]	@ (8001dac <Gyro_Slave_Disable+0x14>)
 8001da2:	f002 fcf9 	bl	8004798 <HAL_GPIO_WritePin>
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40020800 	.word	0x40020800

08001db0 <Gyro_Receive_Data>:

void Gyro_Receive_Data(uint8_t *rx_buff){
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
    HAL_Status = HAL_SPI_Receive(&hspi5, rx_buff, 1, TIMEOUT);
 8001db8:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4806      	ldr	r0, [pc, #24]	@ (8001ddc <Gyro_Receive_Data+0x2c>)
 8001dc2:	f004 f9da 	bl	800617a <HAL_SPI_Receive>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4b05      	ldr	r3, [pc, #20]	@ (8001de0 <Gyro_Receive_Data+0x30>)
 8001dcc:	701a      	strb	r2, [r3, #0]
    Gyro_HAL_Check();
 8001dce:	f7ff ffc3 	bl	8001d58 <Gyro_HAL_Check>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20025e48 	.word	0x20025e48
 8001de0:	20000188 	.word	0x20000188

08001de4 <Gyro_Transmit_Data>:

void Gyro_Transmit_Data(uint8_t *tx_buff){
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
    HAL_Status = HAL_SPI_Transmit(&hspi5, tx_buff, 1, TIMEOUT);
 8001dec:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001df0:	2201      	movs	r2, #1
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	4806      	ldr	r0, [pc, #24]	@ (8001e10 <Gyro_Transmit_Data+0x2c>)
 8001df6:	f004 f87c 	bl	8005ef2 <HAL_SPI_Transmit>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4b05      	ldr	r3, [pc, #20]	@ (8001e14 <Gyro_Transmit_Data+0x30>)
 8001e00:	701a      	strb	r2, [r3, #0]
    Gyro_HAL_Check();
 8001e02:	f7ff ffa9 	bl	8001d58 <Gyro_HAL_Check>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20025e48 	.word	0x20025e48
 8001e14:	20000188 	.word	0x20000188

08001e18 <LCD_GPIO_Init>:
static void SPI_Error(void);

/* Provided Functions and API  - MOTIFY ONLY WITH EXTREME CAUTION!!! */

void LCD_GPIO_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08c      	sub	sp, #48	@ 0x30
 8001e1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61bb      	str	r3, [r7, #24]
 8001e22:	4b5a      	ldr	r3, [pc, #360]	@ (8001f8c <LCD_GPIO_Init+0x174>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e26:	4a59      	ldr	r2, [pc, #356]	@ (8001f8c <LCD_GPIO_Init+0x174>)
 8001e28:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001e2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e2e:	4b57      	ldr	r3, [pc, #348]	@ (8001f8c <LCD_GPIO_Init+0x174>)
 8001e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e32:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e36:	61bb      	str	r3, [r7, #24]
 8001e38:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	4b53      	ldr	r3, [pc, #332]	@ (8001f8c <LCD_GPIO_Init+0x174>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e42:	4a52      	ldr	r2, [pc, #328]	@ (8001f8c <LCD_GPIO_Init+0x174>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e4a:	4b50      	ldr	r3, [pc, #320]	@ (8001f8c <LCD_GPIO_Init+0x174>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	617b      	str	r3, [r7, #20]
 8001e54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	4b4c      	ldr	r3, [pc, #304]	@ (8001f8c <LCD_GPIO_Init+0x174>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5e:	4a4b      	ldr	r2, [pc, #300]	@ (8001f8c <LCD_GPIO_Init+0x174>)
 8001e60:	f043 0302 	orr.w	r3, r3, #2
 8001e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e66:	4b49      	ldr	r3, [pc, #292]	@ (8001f8c <LCD_GPIO_Init+0x174>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	4b45      	ldr	r3, [pc, #276]	@ (8001f8c <LCD_GPIO_Init+0x174>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7a:	4a44      	ldr	r2, [pc, #272]	@ (8001f8c <LCD_GPIO_Init+0x174>)
 8001e7c:	f043 0304 	orr.w	r3, r3, #4
 8001e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e82:	4b42      	ldr	r3, [pc, #264]	@ (8001f8c <LCD_GPIO_Init+0x174>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e86:	f003 0304 	and.w	r3, r3, #4
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	4b3e      	ldr	r3, [pc, #248]	@ (8001f8c <LCD_GPIO_Init+0x174>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e96:	4a3d      	ldr	r2, [pc, #244]	@ (8001f8c <LCD_GPIO_Init+0x174>)
 8001e98:	f043 0308 	orr.w	r3, r3, #8
 8001e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e9e:	4b3b      	ldr	r3, [pc, #236]	@ (8001f8c <LCD_GPIO_Init+0x174>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	60bb      	str	r3, [r7, #8]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	607b      	str	r3, [r7, #4]
 8001eae:	4b37      	ldr	r3, [pc, #220]	@ (8001f8c <LCD_GPIO_Init+0x174>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb2:	4a36      	ldr	r2, [pc, #216]	@ (8001f8c <LCD_GPIO_Init+0x174>)
 8001eb4:	f043 0320 	orr.w	r3, r3, #32
 8001eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eba:	4b34      	ldr	r3, [pc, #208]	@ (8001f8c <LCD_GPIO_Init+0x174>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebe:	f003 0320 	and.w	r3, r3, #32
 8001ec2:	607b      	str	r3, [r7, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	603b      	str	r3, [r7, #0]
 8001eca:	4b30      	ldr	r3, [pc, #192]	@ (8001f8c <LCD_GPIO_Init+0x174>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ece:	4a2f      	ldr	r2, [pc, #188]	@ (8001f8c <LCD_GPIO_Init+0x174>)
 8001ed0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8001f8c <LCD_GPIO_Init+0x174>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ede:	603b      	str	r3, [r7, #0]
 8001ee0:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8001ee2:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001ee6:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001ef4:	230e      	movs	r3, #14
 8001ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001ef8:	f107 031c 	add.w	r3, r7, #28
 8001efc:	4619      	mov	r1, r3
 8001efe:	4824      	ldr	r0, [pc, #144]	@ (8001f90 <LCD_GPIO_Init+0x178>)
 8001f00:	f002 f97a 	bl	80041f8 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001f04:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001f08:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001f0a:	f107 031c 	add.w	r3, r7, #28
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4820      	ldr	r0, [pc, #128]	@ (8001f94 <LCD_GPIO_Init+0x17c>)
 8001f12:	f002 f971 	bl	80041f8 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001f16:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001f1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001f1c:	f107 031c 	add.w	r3, r7, #28
 8001f20:	4619      	mov	r1, r3
 8001f22:	481d      	ldr	r0, [pc, #116]	@ (8001f98 <LCD_GPIO_Init+0x180>)
 8001f24:	f002 f968 	bl	80041f8 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001f28:	2348      	movs	r3, #72	@ 0x48
 8001f2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001f2c:	f107 031c 	add.w	r3, r7, #28
 8001f30:	4619      	mov	r1, r3
 8001f32:	481a      	ldr	r0, [pc, #104]	@ (8001f9c <LCD_GPIO_Init+0x184>)
 8001f34:	f002 f960 	bl	80041f8 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001f38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001f3e:	f107 031c 	add.w	r3, r7, #28
 8001f42:	4619      	mov	r1, r3
 8001f44:	4816      	ldr	r0, [pc, #88]	@ (8001fa0 <LCD_GPIO_Init+0x188>)
 8001f46:	f002 f957 	bl	80041f8 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001f4a:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001f4e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001f50:	f107 031c 	add.w	r3, r7, #28
 8001f54:	4619      	mov	r1, r3
 8001f56:	4813      	ldr	r0, [pc, #76]	@ (8001fa4 <LCD_GPIO_Init+0x18c>)
 8001f58:	f002 f94e 	bl	80041f8 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001f60:	2309      	movs	r3, #9
 8001f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001f64:	f107 031c 	add.w	r3, r7, #28
 8001f68:	4619      	mov	r1, r3
 8001f6a:	480a      	ldr	r0, [pc, #40]	@ (8001f94 <LCD_GPIO_Init+0x17c>)
 8001f6c:	f002 f944 	bl	80041f8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001f70:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001f76:	f107 031c 	add.w	r3, r7, #28
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4809      	ldr	r0, [pc, #36]	@ (8001fa4 <LCD_GPIO_Init+0x18c>)
 8001f7e:	f002 f93b 	bl	80041f8 <HAL_GPIO_Init>
}
 8001f82:	bf00      	nop
 8001f84:	3730      	adds	r7, #48	@ 0x30
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40020000 	.word	0x40020000
 8001f94:	40020400 	.word	0x40020400
 8001f98:	40020800 	.word	0x40020800
 8001f9c:	40020c00 	.word	0x40020c00
 8001fa0:	40021400 	.word	0x40021400
 8001fa4:	40021800 	.word	0x40021800

08001fa8 <LTCD__Init>:


void LTCD__Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  	hltdc.Instance = LTDC;
 8001fac:	4b2a      	ldr	r3, [pc, #168]	@ (8002058 <LTCD__Init+0xb0>)
 8001fae:	4a2b      	ldr	r2, [pc, #172]	@ (800205c <LTCD__Init+0xb4>)
 8001fb0:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8001fb2:	4b29      	ldr	r3, [pc, #164]	@ (8002058 <LTCD__Init+0xb0>)
 8001fb4:	2209      	movs	r2, #9
 8001fb6:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8001fb8:	4b27      	ldr	r3, [pc, #156]	@ (8002058 <LTCD__Init+0xb0>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8001fbe:	4b26      	ldr	r3, [pc, #152]	@ (8002058 <LTCD__Init+0xb0>)
 8001fc0:	221d      	movs	r2, #29
 8001fc2:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8001fc4:	4b24      	ldr	r3, [pc, #144]	@ (8002058 <LTCD__Init+0xb0>)
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8001fca:	4b23      	ldr	r3, [pc, #140]	@ (8002058 <LTCD__Init+0xb0>)
 8001fcc:	f240 120d 	movw	r2, #269	@ 0x10d
 8001fd0:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8001fd2:	4b21      	ldr	r3, [pc, #132]	@ (8002058 <LTCD__Init+0xb0>)
 8001fd4:	f240 1243 	movw	r2, #323	@ 0x143
 8001fd8:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8001fda:	4b1f      	ldr	r3, [pc, #124]	@ (8002058 <LTCD__Init+0xb0>)
 8001fdc:	f240 1217 	movw	r2, #279	@ 0x117
 8001fe0:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8001fe2:	4b1d      	ldr	r3, [pc, #116]	@ (8002058 <LTCD__Init+0xb0>)
 8001fe4:	f240 1247 	movw	r2, #327	@ 0x147
 8001fe8:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8001fea:	4b1b      	ldr	r3, [pc, #108]	@ (8002058 <LTCD__Init+0xb0>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8001ff2:	4b19      	ldr	r3, [pc, #100]	@ (8002058 <LTCD__Init+0xb0>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8001ffa:	4b17      	ldr	r3, [pc, #92]	@ (8002058 <LTCD__Init+0xb0>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002002:	4b17      	ldr	r3, [pc, #92]	@ (8002060 <LTCD__Init+0xb8>)
 8002004:	2208      	movs	r2, #8
 8002006:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002008:	4b15      	ldr	r3, [pc, #84]	@ (8002060 <LTCD__Init+0xb8>)
 800200a:	22c0      	movs	r2, #192	@ 0xc0
 800200c:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800200e:	4b14      	ldr	r3, [pc, #80]	@ (8002060 <LTCD__Init+0xb8>)
 8002010:	2204      	movs	r2, #4
 8002012:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002014:	4b12      	ldr	r3, [pc, #72]	@ (8002060 <LTCD__Init+0xb8>)
 8002016:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800201a:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800201c:	4810      	ldr	r0, [pc, #64]	@ (8002060 <LTCD__Init+0xb8>)
 800201e:	f003 fcf7 	bl	8005a10 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002022:	4b0d      	ldr	r3, [pc, #52]	@ (8002058 <LTCD__Init+0xb0>)
 8002024:	2200      	movs	r2, #0
 8002026:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002028:	4b0b      	ldr	r3, [pc, #44]	@ (8002058 <LTCD__Init+0xb0>)
 800202a:	2200      	movs	r2, #0
 800202c:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800202e:	4b0a      	ldr	r3, [pc, #40]	@ (8002058 <LTCD__Init+0xb0>)
 8002030:	2200      	movs	r2, #0
 8002032:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002034:	4b08      	ldr	r3, [pc, #32]	@ (8002058 <LTCD__Init+0xb0>)
 8002036:	2200      	movs	r2, #0
 8002038:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 800203a:	f7ff feed 	bl	8001e18 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800203e:	4806      	ldr	r0, [pc, #24]	@ (8002058 <LTCD__Init+0xb0>)
 8002040:	f002 fd84 	bl	8004b4c <HAL_LTDC_Init>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 800204a:	f000 fa09 	bl	8002460 <LCD_Error_Handler>
	 }

	ili9341_Init();
 800204e:	f000 fa0b 	bl	8002468 <ili9341_Init>
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	2000018c 	.word	0x2000018c
 800205c:	40016800 	.word	0x40016800
 8002060:	20000234 	.word	0x20000234

08002064 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b090      	sub	sp, #64	@ 0x40
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	71fb      	strb	r3, [r7, #7]
  LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8002072:	23f0      	movs	r3, #240	@ 0xf0
 8002074:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 800207a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800207e:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8002080:	2302      	movs	r3, #2
 8002082:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8002084:	23ff      	movs	r3, #255	@ 0xff
 8002086:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800208c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002090:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002092:	2305      	movs	r3, #5
 8002094:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 800209c:	4b0f      	ldr	r3, [pc, #60]	@ (80020dc <LTCD_Layer_Init+0x78>)
 800209e:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 80020a0:	23f0      	movs	r3, #240	@ 0xf0
 80020a2:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 80020a4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80020a8:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 80020bc:	79fa      	ldrb	r2, [r7, #7]
 80020be:	f107 030c 	add.w	r3, r7, #12
 80020c2:	4619      	mov	r1, r3
 80020c4:	4806      	ldr	r0, [pc, #24]	@ (80020e0 <LTCD_Layer_Init+0x7c>)
 80020c6:	f002 fe1b 	bl	8004d00 <HAL_LTDC_ConfigLayer>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 80020d0:	f000 f9c6 	bl	8002460 <LCD_Error_Handler>
	}

}
 80020d4:	bf00      	nop
 80020d6:	3740      	adds	r7, #64	@ 0x40
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	200002c0 	.word	0x200002c0
 80020e0:	2000018c 	.word	0x2000018c

080020e4 <LCD_Draw_Pixel>:

// Draws a single pixel, should be useds only within this fileset and should not be seen by external clients. 
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	80fb      	strh	r3, [r7, #6]
 80020ee:	460b      	mov	r3, r1
 80020f0:	80bb      	strh	r3, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 80020f6:	88ba      	ldrh	r2, [r7, #4]
 80020f8:	4613      	mov	r3, r2
 80020fa:	011b      	lsls	r3, r3, #4
 80020fc:	1a9b      	subs	r3, r3, r2
 80020fe:	011b      	lsls	r3, r3, #4
 8002100:	461a      	mov	r2, r3
 8002102:	88fb      	ldrh	r3, [r7, #6]
 8002104:	4413      	add	r3, r2
 8002106:	4905      	ldr	r1, [pc, #20]	@ (800211c <LCD_Draw_Pixel+0x38>)
 8002108:	887a      	ldrh	r2, [r7, #2]
 800210a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	200002c0 	.word	0x200002c0

08002120 <LCD_DrawChar>:


void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	603a      	str	r2, [r7, #0]
 800212a:	80fb      	strh	r3, [r7, #6]
 800212c:	460b      	mov	r3, r1
 800212e:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8002130:	2300      	movs	r3, #0
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	2300      	movs	r3, #0
 8002136:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8002138:	2300      	movs	r3, #0
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	e04c      	b.n	80021d8 <LCD_DrawChar+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 800213e:	2300      	movs	r3, #0
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	e03f      	b.n	80021c4 <LCD_DrawChar+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	4413      	add	r3, r2
 800214c:	881b      	ldrh	r3, [r3, #0]
 800214e:	4619      	mov	r1, r3
 8002150:	4b27      	ldr	r3, [pc, #156]	@ (80021f0 <LCD_DrawChar+0xd0>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	889b      	ldrh	r3, [r3, #4]
 8002156:	4a27      	ldr	r2, [pc, #156]	@ (80021f4 <LCD_DrawChar+0xd4>)
 8002158:	fba2 2303 	umull	r2, r3, r2, r3
 800215c:	08db      	lsrs	r3, r3, #3
 800215e:	b29b      	uxth	r3, r3
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	2280      	movs	r2, #128	@ 0x80
 8002164:	409a      	lsls	r2, r3
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	fa42 f303 	asr.w	r3, r2, r3
 800216c:	400b      	ands	r3, r1
 800216e:	2b00      	cmp	r3, #0
 8002170:	d104      	bne.n	800217c <LCD_DrawChar+0x5c>
 8002172:	4b1f      	ldr	r3, [pc, #124]	@ (80021f0 <LCD_DrawChar+0xd0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	889b      	ldrh	r3, [r3, #4]
 8002178:	2b0c      	cmp	r3, #12
 800217a:	d920      	bls.n	80021be <LCD_DrawChar+0x9e>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	4413      	add	r3, r2
 8002184:	881b      	ldrh	r3, [r3, #0]
 8002186:	461a      	mov	r2, r3
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	fa42 f303 	asr.w	r3, r2, r3
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d104      	bne.n	80021a0 <LCD_DrawChar+0x80>
 8002196:	4b16      	ldr	r3, [pc, #88]	@ (80021f0 <LCD_DrawChar+0xd0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	889b      	ldrh	r3, [r3, #4]
 800219c:	2b0c      	cmp	r3, #12
 800219e:	d80e      	bhi.n	80021be <LCD_DrawChar+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	88fb      	ldrh	r3, [r7, #6]
 80021a6:	4413      	add	r3, r2
 80021a8:	b298      	uxth	r0, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	88bb      	ldrh	r3, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	4a10      	ldr	r2, [pc, #64]	@ (80021f8 <LCD_DrawChar+0xd8>)
 80021b6:	8812      	ldrh	r2, [r2, #0]
 80021b8:	4619      	mov	r1, r3
 80021ba:	f7ff ff93 	bl	80020e4 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	3301      	adds	r3, #1
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	4b0a      	ldr	r3, [pc, #40]	@ (80021f0 <LCD_DrawChar+0xd0>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	889b      	ldrh	r3, [r3, #4]
 80021ca:	461a      	mov	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d3b8      	bcc.n	8002144 <LCD_DrawChar+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	3301      	adds	r3, #1
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	4b05      	ldr	r3, [pc, #20]	@ (80021f0 <LCD_DrawChar+0xd0>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	88db      	ldrh	r3, [r3, #6]
 80021de:	461a      	mov	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d3ab      	bcc.n	800213e <LCD_DrawChar+0x1e>
      }
    }
  }
}
 80021e6:	bf00      	nop
 80021e8:	bf00      	nop
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	20000264 	.word	0x20000264
 80021f4:	aaaaaaab 	.word	0xaaaaaaab
 80021f8:	20000058 	.word	0x20000058

080021fc <LCD_DisplayCharColored>:
//TO CHANGE COLOR
void LCD_DisplayCharColored(uint16_t x, uint16_t y, char character, uint16_t color) {
 80021fc:	b590      	push	{r4, r7, lr}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	4604      	mov	r4, r0
 8002204:	4608      	mov	r0, r1
 8002206:	4611      	mov	r1, r2
 8002208:	461a      	mov	r2, r3
 800220a:	4623      	mov	r3, r4
 800220c:	80fb      	strh	r3, [r7, #6]
 800220e:	4603      	mov	r3, r0
 8002210:	80bb      	strh	r3, [r7, #4]
 8002212:	460b      	mov	r3, r1
 8002214:	70fb      	strb	r3, [r7, #3]
 8002216:	4613      	mov	r3, r2
 8002218:	803b      	strh	r3, [r7, #0]
    LCD_SetTextColor(color);                   // Set the text color
 800221a:	883b      	ldrh	r3, [r7, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f000 f857 	bl	80022d0 <LCD_SetTextColor>
    LCD_DisplayChar(x, y, character);          // Draw the char
 8002222:	78fa      	ldrb	r2, [r7, #3]
 8002224:	88b9      	ldrh	r1, [r7, #4]
 8002226:	88fb      	ldrh	r3, [r7, #6]
 8002228:	4618      	mov	r0, r3
 800222a:	f000 f807 	bl	800223c <LCD_DisplayChar>
    LCD_SetTextColor(LCD_COLOR_BLACK);         // Reset to default (optional)
 800222e:	2000      	movs	r0, #0
 8002230:	f000 f84e 	bl	80022d0 <LCD_SetTextColor>
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	bd90      	pop	{r4, r7, pc}

0800223c <LCD_DisplayChar>:

// Displays Char
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	80fb      	strh	r3, [r7, #6]
 8002246:	460b      	mov	r3, r1
 8002248:	80bb      	strh	r3, [r7, #4]
 800224a:	4613      	mov	r3, r2
 800224c:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 800224e:	78fb      	ldrb	r3, [r7, #3]
 8002250:	3b20      	subs	r3, #32
 8002252:	70fb      	strb	r3, [r7, #3]
  LCD_DrawChar(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8002254:	4b09      	ldr	r3, [pc, #36]	@ (800227c <LCD_DisplayChar+0x40>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	78fb      	ldrb	r3, [r7, #3]
 800225c:	4907      	ldr	r1, [pc, #28]	@ (800227c <LCD_DisplayChar+0x40>)
 800225e:	6809      	ldr	r1, [r1, #0]
 8002260:	88c9      	ldrh	r1, [r1, #6]
 8002262:	fb01 f303 	mul.w	r3, r1, r3
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	441a      	add	r2, r3
 800226a:	88b9      	ldrh	r1, [r7, #4]
 800226c:	88fb      	ldrh	r3, [r7, #6]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff ff56 	bl	8002120 <LCD_DrawChar>
}
 8002274:	bf00      	nop
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	20000264 	.word	0x20000264

08002280 <LCD_DisplayString>:

void LCD_DisplayString(uint16_t Xpos, uint16_t Ypos, char *string){
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	603a      	str	r2, [r7, #0]
 800228a:	80fb      	strh	r3, [r7, #6]
 800228c:	460b      	mov	r3, r1
 800228e:	80bb      	strh	r3, [r7, #4]
	if(string == NULL) return;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d017      	beq.n	80022c6 <LCD_DisplayString+0x46>
	uint16_t offset = 0;
 8002296:	2300      	movs	r3, #0
 8002298:	81fb      	strh	r3, [r7, #14]
	while(*string != '\0'){
 800229a:	e00f      	b.n	80022bc <LCD_DisplayString+0x3c>
		LCD_DisplayChar(Xpos+offset, Ypos, *string);
 800229c:	88fa      	ldrh	r2, [r7, #6]
 800229e:	89fb      	ldrh	r3, [r7, #14]
 80022a0:	4413      	add	r3, r2
 80022a2:	b298      	uxth	r0, r3
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	781a      	ldrb	r2, [r3, #0]
 80022a8:	88bb      	ldrh	r3, [r7, #4]
 80022aa:	4619      	mov	r1, r3
 80022ac:	f7ff ffc6 	bl	800223c <LCD_DisplayChar>
		string++;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	3301      	adds	r3, #1
 80022b4:	603b      	str	r3, [r7, #0]
		offset+=15;
 80022b6:	89fb      	ldrh	r3, [r7, #14]
 80022b8:	330f      	adds	r3, #15
 80022ba:	81fb      	strh	r3, [r7, #14]
	while(*string != '\0'){
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1eb      	bne.n	800229c <LCD_DisplayString+0x1c>
 80022c4:	e000      	b.n	80022c8 <LCD_DisplayString+0x48>
	if(string == NULL) return;
 80022c6:	bf00      	nop
	}
}
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <LCD_SetTextColor>:
	}

}

void LCD_SetTextColor(uint16_t Color)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 80022da:	4a04      	ldr	r2, [pc, #16]	@ (80022ec <LCD_SetTextColor+0x1c>)
 80022dc:	88fb      	ldrh	r3, [r7, #6]
 80022de:	8013      	strh	r3, [r2, #0]
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	20000058 	.word	0x20000058

080022f0 <LCD_SetFont>:

void LCD_SetFont(FONT_t *fonts)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 80022f8:	4a04      	ldr	r2, [pc, #16]	@ (800230c <LCD_SetFont+0x1c>)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6013      	str	r3, [r2, #0]
}
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	20000264 	.word	0x20000264

08002310 <LCD_Draw_Circle_Fill>:

// Draw Circle Filled
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8002310:	b590      	push	{r4, r7, lr}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	4604      	mov	r4, r0
 8002318:	4608      	mov	r0, r1
 800231a:	4611      	mov	r1, r2
 800231c:	461a      	mov	r2, r3
 800231e:	4623      	mov	r3, r4
 8002320:	80fb      	strh	r3, [r7, #6]
 8002322:	4603      	mov	r3, r0
 8002324:	80bb      	strh	r3, [r7, #4]
 8002326:	460b      	mov	r3, r1
 8002328:	807b      	strh	r3, [r7, #2]
 800232a:	4613      	mov	r3, r2
 800232c:	803b      	strh	r3, [r7, #0]
  for(int16_t y=-radius; y<=radius; y++)
 800232e:	887b      	ldrh	r3, [r7, #2]
 8002330:	425b      	negs	r3, r3
 8002332:	b29b      	uxth	r3, r3
 8002334:	81fb      	strh	r3, [r7, #14]
 8002336:	e034      	b.n	80023a2 <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8002338:	887b      	ldrh	r3, [r7, #2]
 800233a:	425b      	negs	r3, r3
 800233c:	b29b      	uxth	r3, r3
 800233e:	81bb      	strh	r3, [r7, #12]
 8002340:	e024      	b.n	800238c <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8002342:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002346:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800234a:	fb03 f202 	mul.w	r2, r3, r2
 800234e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002352:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002356:	fb01 f303 	mul.w	r3, r1, r3
 800235a:	441a      	add	r2, r3
 800235c:	887b      	ldrh	r3, [r7, #2]
 800235e:	8879      	ldrh	r1, [r7, #2]
 8002360:	fb01 f303 	mul.w	r3, r1, r3
 8002364:	429a      	cmp	r2, r3
 8002366:	dc0b      	bgt.n	8002380 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8002368:	89ba      	ldrh	r2, [r7, #12]
 800236a:	88fb      	ldrh	r3, [r7, #6]
 800236c:	4413      	add	r3, r2
 800236e:	b298      	uxth	r0, r3
 8002370:	89fa      	ldrh	r2, [r7, #14]
 8002372:	88bb      	ldrh	r3, [r7, #4]
 8002374:	4413      	add	r3, r2
 8002376:	b29b      	uxth	r3, r3
 8002378:	883a      	ldrh	r2, [r7, #0]
 800237a:	4619      	mov	r1, r3
 800237c:	f7ff feb2 	bl	80020e4 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8002380:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002384:	b29b      	uxth	r3, r3
 8002386:	3301      	adds	r3, #1
 8002388:	b29b      	uxth	r3, r3
 800238a:	81bb      	strh	r3, [r7, #12]
 800238c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002390:	887b      	ldrh	r3, [r7, #2]
 8002392:	429a      	cmp	r2, r3
 8002394:	ddd5      	ble.n	8002342 <LCD_Draw_Circle_Fill+0x32>
  for(int16_t y=-radius; y<=radius; y++)
 8002396:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800239a:	b29b      	uxth	r3, r3
 800239c:	3301      	adds	r3, #1
 800239e:	b29b      	uxth	r3, r3
 80023a0:	81fb      	strh	r3, [r7, #14]
 80023a2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80023a6:	887b      	ldrh	r3, [r7, #2]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	ddc5      	ble.n	8002338 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 80023ac:	bf00      	nop
 80023ae:	bf00      	nop
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd90      	pop	{r4, r7, pc}
	...

080023b8 <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	460a      	mov	r2, r1
 80023c2:	71fb      	strb	r3, [r7, #7]
 80023c4:	4613      	mov	r3, r2
 80023c6:	80bb      	strh	r3, [r7, #4]
  if (LayerIndex == 0){
 80023c8:	79fb      	ldrb	r3, [r7, #7]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10e      	bne.n	80023ec <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80023ce:	2300      	movs	r3, #0
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	e007      	b.n	80023e4 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 80023d4:	4908      	ldr	r1, [pc, #32]	@ (80023f8 <LCD_Clear+0x40>)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	88ba      	ldrh	r2, [r7, #4]
 80023da:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	3301      	adds	r3, #1
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 80023ea:	d3f3      	bcc.n	80023d4 <LCD_Clear+0x1c>
		}
	}
}
 80023ec:	bf00      	nop
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	200002c0 	.word	0x200002c0

080023fc <LCD_Clear_Rectangle>:

void LCD_Clear_Rectangle(uint16_t x_start, uint16_t y_start, uint16_t width, uint16_t height, uint16_t color)
{
 80023fc:	b590      	push	{r4, r7, lr}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	4604      	mov	r4, r0
 8002404:	4608      	mov	r0, r1
 8002406:	4611      	mov	r1, r2
 8002408:	461a      	mov	r2, r3
 800240a:	4623      	mov	r3, r4
 800240c:	80fb      	strh	r3, [r7, #6]
 800240e:	4603      	mov	r3, r0
 8002410:	80bb      	strh	r3, [r7, #4]
 8002412:	460b      	mov	r3, r1
 8002414:	807b      	strh	r3, [r7, #2]
 8002416:	4613      	mov	r3, r2
 8002418:	803b      	strh	r3, [r7, #0]
    for (uint16_t y = y_start; y < (y_start + height); y++) {
 800241a:	88bb      	ldrh	r3, [r7, #4]
 800241c:	81fb      	strh	r3, [r7, #14]
 800241e:	e014      	b.n	800244a <LCD_Clear_Rectangle+0x4e>
        for (uint16_t x = x_start; x < (x_start + width); x++) {
 8002420:	88fb      	ldrh	r3, [r7, #6]
 8002422:	81bb      	strh	r3, [r7, #12]
 8002424:	e008      	b.n	8002438 <LCD_Clear_Rectangle+0x3c>
            LCD_Draw_Pixel(x, y, color);
 8002426:	8c3a      	ldrh	r2, [r7, #32]
 8002428:	89f9      	ldrh	r1, [r7, #14]
 800242a:	89bb      	ldrh	r3, [r7, #12]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff fe59 	bl	80020e4 <LCD_Draw_Pixel>
        for (uint16_t x = x_start; x < (x_start + width); x++) {
 8002432:	89bb      	ldrh	r3, [r7, #12]
 8002434:	3301      	adds	r3, #1
 8002436:	81bb      	strh	r3, [r7, #12]
 8002438:	89ba      	ldrh	r2, [r7, #12]
 800243a:	88f9      	ldrh	r1, [r7, #6]
 800243c:	887b      	ldrh	r3, [r7, #2]
 800243e:	440b      	add	r3, r1
 8002440:	429a      	cmp	r2, r3
 8002442:	dbf0      	blt.n	8002426 <LCD_Clear_Rectangle+0x2a>
    for (uint16_t y = y_start; y < (y_start + height); y++) {
 8002444:	89fb      	ldrh	r3, [r7, #14]
 8002446:	3301      	adds	r3, #1
 8002448:	81fb      	strh	r3, [r7, #14]
 800244a:	89fa      	ldrh	r2, [r7, #14]
 800244c:	88b9      	ldrh	r1, [r7, #4]
 800244e:	883b      	ldrh	r3, [r7, #0]
 8002450:	440b      	add	r3, r1
 8002452:	429a      	cmp	r2, r3
 8002454:	dbe4      	blt.n	8002420 <LCD_Clear_Rectangle+0x24>
        }
    }
}
 8002456:	bf00      	nop
 8002458:	bf00      	nop
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	bd90      	pop	{r4, r7, pc}

08002460 <LCD_Error_Handler>:


void LCD_Error_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  for(;;); // Something went wrong
 8002464:	bf00      	nop
 8002466:	e7fd      	b.n	8002464 <LCD_Error_Handler+0x4>

08002468 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800246c:	f000 f9fe 	bl	800286c <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8002470:	20ca      	movs	r0, #202	@ 0xca
 8002472:	f000 f943 	bl	80026fc <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8002476:	20c3      	movs	r0, #195	@ 0xc3
 8002478:	f000 f94d 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 800247c:	2008      	movs	r0, #8
 800247e:	f000 f94a 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8002482:	2050      	movs	r0, #80	@ 0x50
 8002484:	f000 f947 	bl	8002716 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8002488:	20cf      	movs	r0, #207	@ 0xcf
 800248a:	f000 f937 	bl	80026fc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 800248e:	2000      	movs	r0, #0
 8002490:	f000 f941 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8002494:	20c1      	movs	r0, #193	@ 0xc1
 8002496:	f000 f93e 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 800249a:	2030      	movs	r0, #48	@ 0x30
 800249c:	f000 f93b 	bl	8002716 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 80024a0:	20ed      	movs	r0, #237	@ 0xed
 80024a2:	f000 f92b 	bl	80026fc <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 80024a6:	2064      	movs	r0, #100	@ 0x64
 80024a8:	f000 f935 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 80024ac:	2003      	movs	r0, #3
 80024ae:	f000 f932 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 80024b2:	2012      	movs	r0, #18
 80024b4:	f000 f92f 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 80024b8:	2081      	movs	r0, #129	@ 0x81
 80024ba:	f000 f92c 	bl	8002716 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 80024be:	20e8      	movs	r0, #232	@ 0xe8
 80024c0:	f000 f91c 	bl	80026fc <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 80024c4:	2085      	movs	r0, #133	@ 0x85
 80024c6:	f000 f926 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80024ca:	2000      	movs	r0, #0
 80024cc:	f000 f923 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80024d0:	2078      	movs	r0, #120	@ 0x78
 80024d2:	f000 f920 	bl	8002716 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 80024d6:	20cb      	movs	r0, #203	@ 0xcb
 80024d8:	f000 f910 	bl	80026fc <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 80024dc:	2039      	movs	r0, #57	@ 0x39
 80024de:	f000 f91a 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 80024e2:	202c      	movs	r0, #44	@ 0x2c
 80024e4:	f000 f917 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80024e8:	2000      	movs	r0, #0
 80024ea:	f000 f914 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 80024ee:	2034      	movs	r0, #52	@ 0x34
 80024f0:	f000 f911 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 80024f4:	2002      	movs	r0, #2
 80024f6:	f000 f90e 	bl	8002716 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 80024fa:	20f7      	movs	r0, #247	@ 0xf7
 80024fc:	f000 f8fe 	bl	80026fc <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8002500:	2020      	movs	r0, #32
 8002502:	f000 f908 	bl	8002716 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8002506:	20ea      	movs	r0, #234	@ 0xea
 8002508:	f000 f8f8 	bl	80026fc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800250c:	2000      	movs	r0, #0
 800250e:	f000 f902 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002512:	2000      	movs	r0, #0
 8002514:	f000 f8ff 	bl	8002716 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8002518:	20b1      	movs	r0, #177	@ 0xb1
 800251a:	f000 f8ef 	bl	80026fc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800251e:	2000      	movs	r0, #0
 8002520:	f000 f8f9 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8002524:	201b      	movs	r0, #27
 8002526:	f000 f8f6 	bl	8002716 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800252a:	20b6      	movs	r0, #182	@ 0xb6
 800252c:	f000 f8e6 	bl	80026fc <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8002530:	200a      	movs	r0, #10
 8002532:	f000 f8f0 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8002536:	20a2      	movs	r0, #162	@ 0xa2
 8002538:	f000 f8ed 	bl	8002716 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 800253c:	20c0      	movs	r0, #192	@ 0xc0
 800253e:	f000 f8dd 	bl	80026fc <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8002542:	2010      	movs	r0, #16
 8002544:	f000 f8e7 	bl	8002716 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8002548:	20c1      	movs	r0, #193	@ 0xc1
 800254a:	f000 f8d7 	bl	80026fc <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800254e:	2010      	movs	r0, #16
 8002550:	f000 f8e1 	bl	8002716 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8002554:	20c5      	movs	r0, #197	@ 0xc5
 8002556:	f000 f8d1 	bl	80026fc <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 800255a:	2045      	movs	r0, #69	@ 0x45
 800255c:	f000 f8db 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8002560:	2015      	movs	r0, #21
 8002562:	f000 f8d8 	bl	8002716 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8002566:	20c7      	movs	r0, #199	@ 0xc7
 8002568:	f000 f8c8 	bl	80026fc <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 800256c:	2090      	movs	r0, #144	@ 0x90
 800256e:	f000 f8d2 	bl	8002716 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8002572:	2036      	movs	r0, #54	@ 0x36
 8002574:	f000 f8c2 	bl	80026fc <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8002578:	20c8      	movs	r0, #200	@ 0xc8
 800257a:	f000 f8cc 	bl	8002716 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 800257e:	20f2      	movs	r0, #242	@ 0xf2
 8002580:	f000 f8bc 	bl	80026fc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002584:	2000      	movs	r0, #0
 8002586:	f000 f8c6 	bl	8002716 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 800258a:	20b0      	movs	r0, #176	@ 0xb0
 800258c:	f000 f8b6 	bl	80026fc <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8002590:	20c2      	movs	r0, #194	@ 0xc2
 8002592:	f000 f8c0 	bl	8002716 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8002596:	20b6      	movs	r0, #182	@ 0xb6
 8002598:	f000 f8b0 	bl	80026fc <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 800259c:	200a      	movs	r0, #10
 800259e:	f000 f8ba 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 80025a2:	20a7      	movs	r0, #167	@ 0xa7
 80025a4:	f000 f8b7 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 80025a8:	2027      	movs	r0, #39	@ 0x27
 80025aa:	f000 f8b4 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80025ae:	2004      	movs	r0, #4
 80025b0:	f000 f8b1 	bl	8002716 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 80025b4:	202a      	movs	r0, #42	@ 0x2a
 80025b6:	f000 f8a1 	bl	80026fc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80025ba:	2000      	movs	r0, #0
 80025bc:	f000 f8ab 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80025c0:	2000      	movs	r0, #0
 80025c2:	f000 f8a8 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80025c6:	2000      	movs	r0, #0
 80025c8:	f000 f8a5 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 80025cc:	20ef      	movs	r0, #239	@ 0xef
 80025ce:	f000 f8a2 	bl	8002716 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 80025d2:	202b      	movs	r0, #43	@ 0x2b
 80025d4:	f000 f892 	bl	80026fc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80025d8:	2000      	movs	r0, #0
 80025da:	f000 f89c 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80025de:	2000      	movs	r0, #0
 80025e0:	f000 f899 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 80025e4:	2001      	movs	r0, #1
 80025e6:	f000 f896 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 80025ea:	203f      	movs	r0, #63	@ 0x3f
 80025ec:	f000 f893 	bl	8002716 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 80025f0:	20f6      	movs	r0, #246	@ 0xf6
 80025f2:	f000 f883 	bl	80026fc <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80025f6:	2001      	movs	r0, #1
 80025f8:	f000 f88d 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80025fc:	2000      	movs	r0, #0
 80025fe:	f000 f88a 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8002602:	2006      	movs	r0, #6
 8002604:	f000 f887 	bl	8002716 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8002608:	202c      	movs	r0, #44	@ 0x2c
 800260a:	f000 f877 	bl	80026fc <ili9341_Write_Reg>
  LCD_Delay(200);
 800260e:	20c8      	movs	r0, #200	@ 0xc8
 8002610:	f000 f9e8 	bl	80029e4 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8002614:	2026      	movs	r0, #38	@ 0x26
 8002616:	f000 f871 	bl	80026fc <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800261a:	2001      	movs	r0, #1
 800261c:	f000 f87b 	bl	8002716 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8002620:	20e0      	movs	r0, #224	@ 0xe0
 8002622:	f000 f86b 	bl	80026fc <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8002626:	200f      	movs	r0, #15
 8002628:	f000 f875 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 800262c:	2029      	movs	r0, #41	@ 0x29
 800262e:	f000 f872 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8002632:	2024      	movs	r0, #36	@ 0x24
 8002634:	f000 f86f 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8002638:	200c      	movs	r0, #12
 800263a:	f000 f86c 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 800263e:	200e      	movs	r0, #14
 8002640:	f000 f869 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8002644:	2009      	movs	r0, #9
 8002646:	f000 f866 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 800264a:	204e      	movs	r0, #78	@ 0x4e
 800264c:	f000 f863 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8002650:	2078      	movs	r0, #120	@ 0x78
 8002652:	f000 f860 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8002656:	203c      	movs	r0, #60	@ 0x3c
 8002658:	f000 f85d 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 800265c:	2009      	movs	r0, #9
 800265e:	f000 f85a 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8002662:	2013      	movs	r0, #19
 8002664:	f000 f857 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8002668:	2005      	movs	r0, #5
 800266a:	f000 f854 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 800266e:	2017      	movs	r0, #23
 8002670:	f000 f851 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8002674:	2011      	movs	r0, #17
 8002676:	f000 f84e 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800267a:	2000      	movs	r0, #0
 800267c:	f000 f84b 	bl	8002716 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8002680:	20e1      	movs	r0, #225	@ 0xe1
 8002682:	f000 f83b 	bl	80026fc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002686:	2000      	movs	r0, #0
 8002688:	f000 f845 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 800268c:	2016      	movs	r0, #22
 800268e:	f000 f842 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8002692:	201b      	movs	r0, #27
 8002694:	f000 f83f 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8002698:	2004      	movs	r0, #4
 800269a:	f000 f83c 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800269e:	2011      	movs	r0, #17
 80026a0:	f000 f839 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 80026a4:	2007      	movs	r0, #7
 80026a6:	f000 f836 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 80026aa:	2031      	movs	r0, #49	@ 0x31
 80026ac:	f000 f833 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 80026b0:	2033      	movs	r0, #51	@ 0x33
 80026b2:	f000 f830 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 80026b6:	2042      	movs	r0, #66	@ 0x42
 80026b8:	f000 f82d 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80026bc:	2005      	movs	r0, #5
 80026be:	f000 f82a 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80026c2:	200c      	movs	r0, #12
 80026c4:	f000 f827 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 80026c8:	200a      	movs	r0, #10
 80026ca:	f000 f824 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 80026ce:	2028      	movs	r0, #40	@ 0x28
 80026d0:	f000 f821 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 80026d4:	202f      	movs	r0, #47	@ 0x2f
 80026d6:	f000 f81e 	bl	8002716 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 80026da:	200f      	movs	r0, #15
 80026dc:	f000 f81b 	bl	8002716 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 80026e0:	2011      	movs	r0, #17
 80026e2:	f000 f80b 	bl	80026fc <ili9341_Write_Reg>
  LCD_Delay(200);
 80026e6:	20c8      	movs	r0, #200	@ 0xc8
 80026e8:	f000 f97c 	bl	80029e4 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 80026ec:	2029      	movs	r0, #41	@ 0x29
 80026ee:	f000 f805 	bl	80026fc <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 80026f2:	202c      	movs	r0, #44	@ 0x2c
 80026f4:	f000 f802 	bl	80026fc <ili9341_Write_Reg>
}
 80026f8:	bf00      	nop
 80026fa:	bd80      	pop	{r7, pc}

080026fc <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	4618      	mov	r0, r3
 800270a:	f000 f949 	bl	80029a0 <LCD_IO_WriteReg>
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b082      	sub	sp, #8
 800271a:	af00      	add	r7, sp, #0
 800271c:	4603      	mov	r3, r0
 800271e:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002720:	88fb      	ldrh	r3, [r7, #6]
 8002722:	4618      	mov	r0, r3
 8002724:	f000 f91a 	bl	800295c <LCD_IO_WriteData>
}
 8002728:	bf00      	nop
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002734:	4819      	ldr	r0, [pc, #100]	@ (800279c <SPI_Init+0x6c>)
 8002736:	f003 ffe2 	bl	80066fe <HAL_SPI_GetState>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d12b      	bne.n	8002798 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8002740:	4b16      	ldr	r3, [pc, #88]	@ (800279c <SPI_Init+0x6c>)
 8002742:	4a17      	ldr	r2, [pc, #92]	@ (80027a0 <SPI_Init+0x70>)
 8002744:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002746:	4b15      	ldr	r3, [pc, #84]	@ (800279c <SPI_Init+0x6c>)
 8002748:	2218      	movs	r2, #24
 800274a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 800274c:	4b13      	ldr	r3, [pc, #76]	@ (800279c <SPI_Init+0x6c>)
 800274e:	2200      	movs	r2, #0
 8002750:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002752:	4b12      	ldr	r3, [pc, #72]	@ (800279c <SPI_Init+0x6c>)
 8002754:	2200      	movs	r2, #0
 8002756:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002758:	4b10      	ldr	r3, [pc, #64]	@ (800279c <SPI_Init+0x6c>)
 800275a:	2200      	movs	r2, #0
 800275c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800275e:	4b0f      	ldr	r3, [pc, #60]	@ (800279c <SPI_Init+0x6c>)
 8002760:	2200      	movs	r2, #0
 8002762:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002764:	4b0d      	ldr	r3, [pc, #52]	@ (800279c <SPI_Init+0x6c>)
 8002766:	2207      	movs	r2, #7
 8002768:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800276a:	4b0c      	ldr	r3, [pc, #48]	@ (800279c <SPI_Init+0x6c>)
 800276c:	2200      	movs	r2, #0
 800276e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002770:	4b0a      	ldr	r3, [pc, #40]	@ (800279c <SPI_Init+0x6c>)
 8002772:	2200      	movs	r2, #0
 8002774:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002776:	4b09      	ldr	r3, [pc, #36]	@ (800279c <SPI_Init+0x6c>)
 8002778:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800277c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800277e:	4b07      	ldr	r3, [pc, #28]	@ (800279c <SPI_Init+0x6c>)
 8002780:	2200      	movs	r2, #0
 8002782:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002784:	4b05      	ldr	r3, [pc, #20]	@ (800279c <SPI_Init+0x6c>)
 8002786:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800278a:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 800278c:	4803      	ldr	r0, [pc, #12]	@ (800279c <SPI_Init+0x6c>)
 800278e:	f000 f833 	bl	80027f8 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002792:	4802      	ldr	r0, [pc, #8]	@ (800279c <SPI_Init+0x6c>)
 8002794:	f003 fafc 	bl	8005d90 <HAL_SPI_Init>
  }
}
 8002798:	bf00      	nop
 800279a:	bd80      	pop	{r7, pc}
 800279c:	20000268 	.word	0x20000268
 80027a0:	40015000 	.word	0x40015000

080027a4 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80027ae:	2300      	movs	r3, #0
 80027b0:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 80027b2:	4b09      	ldr	r3, [pc, #36]	@ (80027d8 <SPI_Write+0x34>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	1db9      	adds	r1, r7, #6
 80027b8:	2201      	movs	r2, #1
 80027ba:	4808      	ldr	r0, [pc, #32]	@ (80027dc <SPI_Write+0x38>)
 80027bc:	f003 fb99 	bl	8005ef2 <HAL_SPI_Transmit>
 80027c0:	4603      	mov	r3, r0
 80027c2:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 80027ca:	f000 f809 	bl	80027e0 <SPI_Error>
  }
}
 80027ce:	bf00      	nop
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	2000005c 	.word	0x2000005c
 80027dc:	20000268 	.word	0x20000268

080027e0 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80027e4:	4803      	ldr	r0, [pc, #12]	@ (80027f4 <SPI_Error+0x14>)
 80027e6:	f003 fb5c 	bl	8005ea2 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 80027ea:	f7ff ffa1 	bl	8002730 <SPI_Init>
}
 80027ee:	bf00      	nop
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	20000268 	.word	0x20000268

080027f8 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08a      	sub	sp, #40	@ 0x28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8002800:	2300      	movs	r3, #0
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	4b17      	ldr	r3, [pc, #92]	@ (8002864 <SPI_MspInit+0x6c>)
 8002806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002808:	4a16      	ldr	r2, [pc, #88]	@ (8002864 <SPI_MspInit+0x6c>)
 800280a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800280e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002810:	4b14      	ldr	r3, [pc, #80]	@ (8002864 <SPI_MspInit+0x6c>)
 8002812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002814:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 800281c:	2300      	movs	r3, #0
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	4b10      	ldr	r3, [pc, #64]	@ (8002864 <SPI_MspInit+0x6c>)
 8002822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002824:	4a0f      	ldr	r2, [pc, #60]	@ (8002864 <SPI_MspInit+0x6c>)
 8002826:	f043 0320 	orr.w	r3, r3, #32
 800282a:	6313      	str	r3, [r2, #48]	@ 0x30
 800282c:	4b0d      	ldr	r3, [pc, #52]	@ (8002864 <SPI_MspInit+0x6c>)
 800282e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002830:	f003 0320 	and.w	r3, r3, #32
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8002838:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800283c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800283e:	2302      	movs	r3, #2
 8002840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002842:	2302      	movs	r3, #2
 8002844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002846:	2301      	movs	r3, #1
 8002848:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 800284a:	2305      	movs	r3, #5
 800284c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 800284e:	f107 0314 	add.w	r3, r7, #20
 8002852:	4619      	mov	r1, r3
 8002854:	4804      	ldr	r0, [pc, #16]	@ (8002868 <SPI_MspInit+0x70>)
 8002856:	f001 fccf 	bl	80041f8 <HAL_GPIO_Init>
}
 800285a:	bf00      	nop
 800285c:	3728      	adds	r7, #40	@ 0x28
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800
 8002868:	40021400 	.word	0x40021400

0800286c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b088      	sub	sp, #32
 8002870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8002872:	4b36      	ldr	r3, [pc, #216]	@ (800294c <LCD_IO_Init+0xe0>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d164      	bne.n	8002944 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 800287a:	4b34      	ldr	r3, [pc, #208]	@ (800294c <LCD_IO_Init+0xe0>)
 800287c:	2201      	movs	r2, #1
 800287e:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002880:	2300      	movs	r3, #0
 8002882:	60bb      	str	r3, [r7, #8]
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <LCD_IO_Init+0xe4>)
 8002886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002888:	4a31      	ldr	r2, [pc, #196]	@ (8002950 <LCD_IO_Init+0xe4>)
 800288a:	f043 0308 	orr.w	r3, r3, #8
 800288e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002890:	4b2f      	ldr	r3, [pc, #188]	@ (8002950 <LCD_IO_Init+0xe4>)
 8002892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002894:	f003 0308 	and.w	r3, r3, #8
 8002898:	60bb      	str	r3, [r7, #8]
 800289a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800289c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80028a2:	2301      	movs	r3, #1
 80028a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80028aa:	2302      	movs	r3, #2
 80028ac:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80028ae:	f107 030c 	add.w	r3, r7, #12
 80028b2:	4619      	mov	r1, r3
 80028b4:	4827      	ldr	r0, [pc, #156]	@ (8002954 <LCD_IO_Init+0xe8>)
 80028b6:	f001 fc9f 	bl	80041f8 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	607b      	str	r3, [r7, #4]
 80028be:	4b24      	ldr	r3, [pc, #144]	@ (8002950 <LCD_IO_Init+0xe4>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c2:	4a23      	ldr	r2, [pc, #140]	@ (8002950 <LCD_IO_Init+0xe4>)
 80028c4:	f043 0308 	orr.w	r3, r3, #8
 80028c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ca:	4b21      	ldr	r3, [pc, #132]	@ (8002950 <LCD_IO_Init+0xe4>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ce:	f003 0308 	and.w	r3, r3, #8
 80028d2:	607b      	str	r3, [r7, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80028d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80028dc:	2301      	movs	r3, #1
 80028de:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80028e0:	2300      	movs	r3, #0
 80028e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80028e4:	2302      	movs	r3, #2
 80028e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80028e8:	f107 030c 	add.w	r3, r7, #12
 80028ec:	4619      	mov	r1, r3
 80028ee:	4819      	ldr	r0, [pc, #100]	@ (8002954 <LCD_IO_Init+0xe8>)
 80028f0:	f001 fc82 	bl	80041f8 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80028f4:	2300      	movs	r3, #0
 80028f6:	603b      	str	r3, [r7, #0]
 80028f8:	4b15      	ldr	r3, [pc, #84]	@ (8002950 <LCD_IO_Init+0xe4>)
 80028fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fc:	4a14      	ldr	r2, [pc, #80]	@ (8002950 <LCD_IO_Init+0xe4>)
 80028fe:	f043 0304 	orr.w	r3, r3, #4
 8002902:	6313      	str	r3, [r2, #48]	@ 0x30
 8002904:	4b12      	ldr	r3, [pc, #72]	@ (8002950 <LCD_IO_Init+0xe4>)
 8002906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	603b      	str	r3, [r7, #0]
 800290e:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002910:	2304      	movs	r3, #4
 8002912:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002914:	2301      	movs	r3, #1
 8002916:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800291c:	2302      	movs	r3, #2
 800291e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002920:	f107 030c 	add.w	r3, r7, #12
 8002924:	4619      	mov	r1, r3
 8002926:	480c      	ldr	r0, [pc, #48]	@ (8002958 <LCD_IO_Init+0xec>)
 8002928:	f001 fc66 	bl	80041f8 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 800292c:	2200      	movs	r2, #0
 800292e:	2104      	movs	r1, #4
 8002930:	4809      	ldr	r0, [pc, #36]	@ (8002958 <LCD_IO_Init+0xec>)
 8002932:	f001 ff31 	bl	8004798 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002936:	2201      	movs	r2, #1
 8002938:	2104      	movs	r1, #4
 800293a:	4807      	ldr	r0, [pc, #28]	@ (8002958 <LCD_IO_Init+0xec>)
 800293c:	f001 ff2c 	bl	8004798 <HAL_GPIO_WritePin>

    SPI_Init();
 8002940:	f7ff fef6 	bl	8002730 <SPI_Init>
  }
}
 8002944:	bf00      	nop
 8002946:	3720      	adds	r7, #32
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	20025ac0 	.word	0x20025ac0
 8002950:	40023800 	.word	0x40023800
 8002954:	40020c00 	.word	0x40020c00
 8002958:	40020800 	.word	0x40020800

0800295c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002966:	2201      	movs	r2, #1
 8002968:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800296c:	480a      	ldr	r0, [pc, #40]	@ (8002998 <LCD_IO_WriteData+0x3c>)
 800296e:	f001 ff13 	bl	8004798 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8002972:	2200      	movs	r2, #0
 8002974:	2104      	movs	r1, #4
 8002976:	4809      	ldr	r0, [pc, #36]	@ (800299c <LCD_IO_WriteData+0x40>)
 8002978:	f001 ff0e 	bl	8004798 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 800297c:	88fb      	ldrh	r3, [r7, #6]
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff ff10 	bl	80027a4 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002984:	2201      	movs	r2, #1
 8002986:	2104      	movs	r1, #4
 8002988:	4804      	ldr	r0, [pc, #16]	@ (800299c <LCD_IO_WriteData+0x40>)
 800298a:	f001 ff05 	bl	8004798 <HAL_GPIO_WritePin>
}
 800298e:	bf00      	nop
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40020c00 	.word	0x40020c00
 800299c:	40020800 	.word	0x40020800

080029a0 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80029aa:	2200      	movs	r2, #0
 80029ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80029b0:	480a      	ldr	r0, [pc, #40]	@ (80029dc <LCD_IO_WriteReg+0x3c>)
 80029b2:	f001 fef1 	bl	8004798 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80029b6:	2200      	movs	r2, #0
 80029b8:	2104      	movs	r1, #4
 80029ba:	4809      	ldr	r0, [pc, #36]	@ (80029e0 <LCD_IO_WriteReg+0x40>)
 80029bc:	f001 feec 	bl	8004798 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 80029c0:	79fb      	ldrb	r3, [r7, #7]
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff feed 	bl	80027a4 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80029ca:	2201      	movs	r2, #1
 80029cc:	2104      	movs	r1, #4
 80029ce:	4804      	ldr	r0, [pc, #16]	@ (80029e0 <LCD_IO_WriteReg+0x40>)
 80029d0:	f001 fee2 	bl	8004798 <HAL_GPIO_WritePin>
}
 80029d4:	bf00      	nop
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40020c00 	.word	0x40020c00
 80029e0:	40020800 	.word	0x40020800

080029e4 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  osDelay(Delay);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f004 fc2c 	bl	800724a <osDelay>
}
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <DrawMenu>:

const char* menu_items[MENU_ITEM_COUNT] = { "EASY", "MEDIUM", "HARD" };
int current_selection = 0;
GameState current_state = STATE_MENU;

void DrawMenu() {
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
    LCD_Clear(0, LCD_COLOR_WHITE);
 8002a02:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002a06:	2000      	movs	r0, #0
 8002a08:	f7ff fcd6 	bl	80023b8 <LCD_Clear>
    LCD_DisplayString(70, 60, "SELECT");
 8002a0c:	4a1a      	ldr	r2, [pc, #104]	@ (8002a78 <DrawMenu+0x7c>)
 8002a0e:	213c      	movs	r1, #60	@ 0x3c
 8002a10:	2046      	movs	r0, #70	@ 0x46
 8002a12:	f7ff fc35 	bl	8002280 <LCD_DisplayString>
    LCD_DisplayString(45, 80, "DIFFICULTY:");
 8002a16:	4a19      	ldr	r2, [pc, #100]	@ (8002a7c <DrawMenu+0x80>)
 8002a18:	2150      	movs	r1, #80	@ 0x50
 8002a1a:	202d      	movs	r0, #45	@ 0x2d
 8002a1c:	f7ff fc30 	bl	8002280 <LCD_DisplayString>

    for (int i = 0; i < MENU_ITEM_COUNT; i++) {
 8002a20:	2300      	movs	r3, #0
 8002a22:	607b      	str	r3, [r7, #4]
 8002a24:	e01f      	b.n	8002a66 <DrawMenu+0x6a>
        uint16_t y = 160 + i * 30;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	0112      	lsls	r2, r2, #4
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	33a0      	adds	r3, #160	@ 0xa0
 8002a36:	807b      	strh	r3, [r7, #2]
        if (i == current_selection) {
 8002a38:	4b11      	ldr	r3, [pc, #68]	@ (8002a80 <DrawMenu+0x84>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d105      	bne.n	8002a4e <DrawMenu+0x52>
            LCD_DisplayString(30, y, "->");
 8002a42:	887b      	ldrh	r3, [r7, #2]
 8002a44:	4a0f      	ldr	r2, [pc, #60]	@ (8002a84 <DrawMenu+0x88>)
 8002a46:	4619      	mov	r1, r3
 8002a48:	201e      	movs	r0, #30
 8002a4a:	f7ff fc19 	bl	8002280 <LCD_DisplayString>
        }
        LCD_DisplayString(70, y, menu_items[i]);
 8002a4e:	4a0e      	ldr	r2, [pc, #56]	@ (8002a88 <DrawMenu+0x8c>)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002a56:	887b      	ldrh	r3, [r7, #2]
 8002a58:	4619      	mov	r1, r3
 8002a5a:	2046      	movs	r0, #70	@ 0x46
 8002a5c:	f7ff fc10 	bl	8002280 <LCD_DisplayString>
    for (int i = 0; i < MENU_ITEM_COUNT; i++) {
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3301      	adds	r3, #1
 8002a64:	607b      	str	r3, [r7, #4]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	dddc      	ble.n	8002a26 <DrawMenu+0x2a>
    }
}
 8002a6c:	bf00      	nop
 8002a6e:	bf00      	nop
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	08009d80 	.word	0x08009d80
 8002a7c:	08009d88 	.word	0x08009d88
 8002a80:	20025ac4 	.word	0x20025ac4
 8002a84:	08009d94 	.word	0x08009d94
 8002a88:	20000060 	.word	0x20000060

08002a8c <HandleMenuInput>:

void HandleMenuInput(void) {
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
    static bool previous_state = false;
    static uint32_t press_time = 0;

    bool current_button = Button_IsPressed();
 8002a92:	f7fe f8b7 	bl	8000c04 <Button_IsPressed>
 8002a96:	4603      	mov	r3, r0
 8002a98:	73fb      	strb	r3, [r7, #15]
    uint32_t now = HAL_GetTick();
 8002a9a:	f001 fabb 	bl	8004014 <HAL_GetTick>
 8002a9e:	60b8      	str	r0, [r7, #8]

    if (current_button && !previous_state) {
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d009      	beq.n	8002aba <HandleMenuInput+0x2e>
 8002aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8002b20 <HandleMenuInput+0x94>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	f083 0301 	eor.w	r3, r3, #1
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <HandleMenuInput+0x2e>
        press_time = now;
 8002ab4:	4a1b      	ldr	r2, [pc, #108]	@ (8002b24 <HandleMenuInput+0x98>)
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	6013      	str	r3, [r2, #0]
    }

    if (!current_button && previous_state) {
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
 8002abc:	f083 0301 	eor.w	r3, r3, #1
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d025      	beq.n	8002b12 <HandleMenuInput+0x86>
 8002ac6:	4b16      	ldr	r3, [pc, #88]	@ (8002b20 <HandleMenuInput+0x94>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d021      	beq.n	8002b12 <HandleMenuInput+0x86>
        uint32_t duration = now - press_time;
 8002ace:	4b15      	ldr	r3, [pc, #84]	@ (8002b24 <HandleMenuInput+0x98>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	607b      	str	r3, [r7, #4]

        if (duration < 500) {
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002ade:	d210      	bcs.n	8002b02 <HandleMenuInput+0x76>
            // Short press to cycle selection
            current_selection = (current_selection + 1) % MENU_ITEM_COUNT;
 8002ae0:	4b11      	ldr	r3, [pc, #68]	@ (8002b28 <HandleMenuInput+0x9c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	1c59      	adds	r1, r3, #1
 8002ae6:	4b11      	ldr	r3, [pc, #68]	@ (8002b2c <HandleMenuInput+0xa0>)
 8002ae8:	fb83 3201 	smull	r3, r2, r3, r1
 8002aec:	17cb      	asrs	r3, r1, #31
 8002aee:	1ad2      	subs	r2, r2, r3
 8002af0:	4613      	mov	r3, r2
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	4413      	add	r3, r2
 8002af6:	1aca      	subs	r2, r1, r3
 8002af8:	4b0b      	ldr	r3, [pc, #44]	@ (8002b28 <HandleMenuInput+0x9c>)
 8002afa:	601a      	str	r2, [r3, #0]
            DrawMenu();
 8002afc:	f7ff ff7e 	bl	80029fc <DrawMenu>
 8002b00:	e007      	b.n	8002b12 <HandleMenuInput+0x86>
        } else {
            // long press to confirm and exit menu
            SetDifficulty(current_selection);
 8002b02:	4b09      	ldr	r3, [pc, #36]	@ (8002b28 <HandleMenuInput+0x9c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fe fc88 	bl	800141c <SetDifficulty>
            current_state = STATE_PLAY;
 8002b0c:	4b08      	ldr	r3, [pc, #32]	@ (8002b30 <HandleMenuInput+0xa4>)
 8002b0e:	2201      	movs	r2, #1
 8002b10:	701a      	strb	r2, [r3, #0]
        }
    }

    previous_state = current_button;
 8002b12:	4a03      	ldr	r2, [pc, #12]	@ (8002b20 <HandleMenuInput+0x94>)
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
 8002b16:	7013      	strb	r3, [r2, #0]
}
 8002b18:	bf00      	nop
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	20025ac9 	.word	0x20025ac9
 8002b24:	20025acc 	.word	0x20025acc
 8002b28:	20025ac4 	.word	0x20025ac4
 8002b2c:	55555556 	.word	0x55555556
 8002b30:	20025ac8 	.word	0x20025ac8

08002b34 <DrawGameOver>:

void DrawGameOver() {
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
    LCD_Clear(0, LCD_COLOR_WHITE);
 8002b38:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	f7ff fc3b 	bl	80023b8 <LCD_Clear>
    LCD_DisplayString(60, 140, "GAME OVER");
 8002b42:	4a08      	ldr	r2, [pc, #32]	@ (8002b64 <DrawGameOver+0x30>)
 8002b44:	218c      	movs	r1, #140	@ 0x8c
 8002b46:	203c      	movs	r0, #60	@ 0x3c
 8002b48:	f7ff fb9a 	bl	8002280 <LCD_DisplayString>
    LCD_DisplayString(40, 180, "Hold button");
 8002b4c:	4a06      	ldr	r2, [pc, #24]	@ (8002b68 <DrawGameOver+0x34>)
 8002b4e:	21b4      	movs	r1, #180	@ 0xb4
 8002b50:	2028      	movs	r0, #40	@ 0x28
 8002b52:	f7ff fb95 	bl	8002280 <LCD_DisplayString>
    LCD_DisplayString(45, 200, "to restart");
 8002b56:	4a05      	ldr	r2, [pc, #20]	@ (8002b6c <DrawGameOver+0x38>)
 8002b58:	21c8      	movs	r1, #200	@ 0xc8
 8002b5a:	202d      	movs	r0, #45	@ 0x2d
 8002b5c:	f7ff fb90 	bl	8002280 <LCD_DisplayString>
}
 8002b60:	bf00      	nop
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	08009d98 	.word	0x08009d98
 8002b68:	08009da4 	.word	0x08009da4
 8002b6c:	08009db0 	.word	0x08009db0

08002b70 <HandleGameOverInput>:

void HandleGameOverInput(void) {
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
    static bool previous_state = false;
    static uint32_t press_time = 0;

    bool current_button = Button_IsPressed();
 8002b76:	f7fe f845 	bl	8000c04 <Button_IsPressed>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	73fb      	strb	r3, [r7, #15]
    uint32_t now = HAL_GetTick();
 8002b7e:	f001 fa49 	bl	8004014 <HAL_GetTick>
 8002b82:	60b8      	str	r0, [r7, #8]

    if (current_button && !previous_state) {
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d009      	beq.n	8002b9e <HandleGameOverInput+0x2e>
 8002b8a:	4b14      	ldr	r3, [pc, #80]	@ (8002bdc <HandleGameOverInput+0x6c>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	f083 0301 	eor.w	r3, r3, #1
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d002      	beq.n	8002b9e <HandleGameOverInput+0x2e>
        press_time = now;
 8002b98:	4a11      	ldr	r2, [pc, #68]	@ (8002be0 <HandleGameOverInput+0x70>)
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	6013      	str	r3, [r2, #0]
    }

    if (!current_button && previous_state) {
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	f083 0301 	eor.w	r3, r3, #1
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d011      	beq.n	8002bce <HandleGameOverInput+0x5e>
 8002baa:	4b0c      	ldr	r3, [pc, #48]	@ (8002bdc <HandleGameOverInput+0x6c>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00d      	beq.n	8002bce <HandleGameOverInput+0x5e>
        uint32_t duration = now - press_time;
 8002bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8002be0 <HandleGameOverInput+0x70>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	607b      	str	r3, [r7, #4]

        if (duration >= 1000) {  // Hold to restart
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002bc2:	d304      	bcc.n	8002bce <HandleGameOverInput+0x5e>
            current_state = STATE_MENU;
 8002bc4:	4b07      	ldr	r3, [pc, #28]	@ (8002be4 <HandleGameOverInput+0x74>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	701a      	strb	r2, [r3, #0]
            DrawMenu();
 8002bca:	f7ff ff17 	bl	80029fc <DrawMenu>
        }
    }

    previous_state = current_button;
 8002bce:	4a03      	ldr	r2, [pc, #12]	@ (8002bdc <HandleGameOverInput+0x6c>)
 8002bd0:	7bfb      	ldrb	r3, [r7, #15]
 8002bd2:	7013      	strb	r3, [r2, #0]
}
 8002bd4:	bf00      	nop
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	20025ad0 	.word	0x20025ad0
 8002be0:	20025ad4 	.word	0x20025ad4
 8002be4:	20025ac8 	.word	0x20025ac8

08002be8 <FireRailgun>:
RailgunProjectile projectile = {0};  // global instance

static bool prisoners_escaping = false;
static uint32_t escape_start_time = 0;

void FireRailgun(uint32_t power_ms) {
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
	uint32_t energy_cost = power_ms / 100;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a31      	ldr	r2, [pc, #196]	@ (8002cb8 <FireRailgun+0xd0>)
 8002bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf8:	095b      	lsrs	r3, r3, #5
 8002bfa:	60fb      	str	r3, [r7, #12]

    if (projectile.active){
 8002bfc:	4b2f      	ldr	r3, [pc, #188]	@ (8002cbc <FireRailgun+0xd4>)
 8002bfe:	7c1b      	ldrb	r3, [r3, #16]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d151      	bne.n	8002ca8 <FireRailgun+0xc0>
    	return;  // Only one active projectile at a time
    }
    else if (capacitor_energy < energy_cost || projectile.active) {
 8002c04:	4b2e      	ldr	r3, [pc, #184]	@ (8002cc0 <FireRailgun+0xd8>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d84e      	bhi.n	8002cac <FireRailgun+0xc4>
 8002c0e:	4b2b      	ldr	r3, [pc, #172]	@ (8002cbc <FireRailgun+0xd4>)
 8002c10:	7c1b      	ldrb	r3, [r3, #16]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d14a      	bne.n	8002cac <FireRailgun+0xc4>
        return;
    }

    // Clamp input duration between 300 and 3000 ms
    if (power_ms < 300){
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002c1c:	d202      	bcs.n	8002c24 <FireRailgun+0x3c>
    	power_ms = 300;
 8002c1e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8002c22:	607b      	str	r3, [r7, #4]
    }
    if (power_ms > 3000){
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d902      	bls.n	8002c34 <FireRailgun+0x4c>
    	power_ms = 3000;
 8002c2e:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8002c32:	607b      	str	r3, [r7, #4]
    }

    // sXale velocity based on power input
    float velocity = (power_ms - 300) * (30.0f / (3000.0f - 300.0f));  // maps 300ms → 0, 3000ms → 30
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002c3a:	ee07 3a90 	vmov	s15, r3
 8002c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c42:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8002cc4 <FireRailgun+0xdc>
 8002c46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c4a:	edc7 7a02 	vstr	s15, [r7, #8]


    // printf("Power: %lu → Velocity: %.2f\n", power_ms, velocity);
    projectile.x = platform_x + 30;
 8002c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc8 <FireRailgun+0xe0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	331e      	adds	r3, #30
 8002c54:	ee07 3a90 	vmov	s15, r3
 8002c58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c5c:	4b17      	ldr	r3, [pc, #92]	@ (8002cbc <FireRailgun+0xd4>)
 8002c5e:	edc3 7a00 	vstr	s15, [r3]
    projectile.y = 236;
 8002c62:	4b16      	ldr	r3, [pc, #88]	@ (8002cbc <FireRailgun+0xd4>)
 8002c64:	4a19      	ldr	r2, [pc, #100]	@ (8002ccc <FireRailgun+0xe4>)
 8002c66:	605a      	str	r2, [r3, #4]

    projectile.vx = -velocity * 0.5f;  // arc to the left
 8002c68:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c6c:	eef1 7a67 	vneg.f32	s15, s15
 8002c70:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002c74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c78:	4b10      	ldr	r3, [pc, #64]	@ (8002cbc <FireRailgun+0xd4>)
 8002c7a:	edc3 7a02 	vstr	s15, [r3, #8]
    projectile.vy = -velocity;         // upward force
 8002c7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c82:	eef1 7a67 	vneg.f32	s15, s15
 8002c86:	4b0d      	ldr	r3, [pc, #52]	@ (8002cbc <FireRailgun+0xd4>)
 8002c88:	edc3 7a03 	vstr	s15, [r3, #12]

    projectile.active = true;
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002cbc <FireRailgun+0xd4>)
 8002c8e:	2201      	movs	r2, #1
 8002c90:	741a      	strb	r2, [r3, #16]



    railgun_energy -= (power_ms / 100);
 8002c92:	4b0f      	ldr	r3, [pc, #60]	@ (8002cd0 <FireRailgun+0xe8>)
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4907      	ldr	r1, [pc, #28]	@ (8002cb8 <FireRailgun+0xd0>)
 8002c9a:	fba1 1303 	umull	r1, r3, r1, r3
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	4a0b      	ldr	r2, [pc, #44]	@ (8002cd0 <FireRailgun+0xe8>)
 8002ca4:	6013      	str	r3, [r2, #0]
 8002ca6:	e002      	b.n	8002cae <FireRailgun+0xc6>
    	return;  // Only one active projectile at a time
 8002ca8:	bf00      	nop
 8002caa:	e000      	b.n	8002cae <FireRailgun+0xc6>
        return;
 8002cac:	bf00      	nop


}
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	51eb851f 	.word	0x51eb851f
 8002cbc:	20025ad8 	.word	0x20025ad8
 8002cc0:	20000000 	.word	0x20000000
 8002cc4:	3c360b61 	.word	0x3c360b61
 8002cc8:	20000008 	.word	0x20000008
 8002ccc:	436c0000 	.word	0x436c0000
 8002cd0:	2000006c 	.word	0x2000006c

08002cd4 <Railgun_Update>:

void Railgun_Update(void) {
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
    if (!projectile.active) {
 8002cda:	4b49      	ldr	r3, [pc, #292]	@ (8002e00 <Railgun_Update+0x12c>)
 8002cdc:	7c1b      	ldrb	r3, [r3, #16]
 8002cde:	f083 0301 	eor.w	r3, r3, #1
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f040 8087 	bne.w	8002df8 <Railgun_Update+0x124>
    	return;
    }

    //Bullets current position
    int prev_x = (int)projectile.x;
 8002cea:	4b45      	ldr	r3, [pc, #276]	@ (8002e00 <Railgun_Update+0x12c>)
 8002cec:	edd3 7a00 	vldr	s15, [r3]
 8002cf0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cf4:	ee17 3a90 	vmov	r3, s15
 8002cf8:	607b      	str	r3, [r7, #4]
    int prev_y = (int)projectile.y;
 8002cfa:	4b41      	ldr	r3, [pc, #260]	@ (8002e00 <Railgun_Update+0x12c>)
 8002cfc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d04:	ee17 3a90 	vmov	r3, s15
 8002d08:	603b      	str	r3, [r7, #0]

    // Update physics  ========BOT X and Y positioning
    projectile.vy += GRAVITY;
 8002d0a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e00 <Railgun_Update+0x12c>)
 8002d0c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002d14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d18:	4b39      	ldr	r3, [pc, #228]	@ (8002e00 <Railgun_Update+0x12c>)
 8002d1a:	edc3 7a03 	vstr	s15, [r3, #12]
    projectile.x += projectile.vx;
 8002d1e:	4b38      	ldr	r3, [pc, #224]	@ (8002e00 <Railgun_Update+0x12c>)
 8002d20:	ed93 7a00 	vldr	s14, [r3]
 8002d24:	4b36      	ldr	r3, [pc, #216]	@ (8002e00 <Railgun_Update+0x12c>)
 8002d26:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d2e:	4b34      	ldr	r3, [pc, #208]	@ (8002e00 <Railgun_Update+0x12c>)
 8002d30:	edc3 7a00 	vstr	s15, [r3]
    projectile.y += projectile.vy;
 8002d34:	4b32      	ldr	r3, [pc, #200]	@ (8002e00 <Railgun_Update+0x12c>)
 8002d36:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d3a:	4b31      	ldr	r3, [pc, #196]	@ (8002e00 <Railgun_Update+0x12c>)
 8002d3c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d44:	4b2e      	ldr	r3, [pc, #184]	@ (8002e00 <Railgun_Update+0x12c>)
 8002d46:	edc3 7a01 	vstr	s15, [r3, #4]

    // Clear previous pixel
    LCD_Draw_Circle_Fill(prev_x, prev_y, 2, LCD_COLOR_WHITE);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	b298      	uxth	r0, r3
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	b299      	uxth	r1, r3
 8002d52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d56:	2202      	movs	r2, #2
 8002d58:	f7ff fada 	bl	8002310 <LCD_Draw_Circle_Fill>

    if (projectile.y >= GROUND_Y ||
 8002d5c:	4b28      	ldr	r3, [pc, #160]	@ (8002e00 <Railgun_Update+0x12c>)
 8002d5e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d62:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8002e04 <Railgun_Update+0x130>
 8002d66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d6e:	da27      	bge.n	8002dc0 <Railgun_Update+0xec>
    	(projectile.y <= GROUND_Y && projectile.x <= LEFT_BOUNDARY)||
 8002d70:	4b23      	ldr	r3, [pc, #140]	@ (8002e00 <Railgun_Update+0x12c>)
 8002d72:	edd3 7a01 	vldr	s15, [r3, #4]
    if (projectile.y >= GROUND_Y ||
 8002d76:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8002e04 <Railgun_Update+0x130>
 8002d7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d82:	d809      	bhi.n	8002d98 <Railgun_Update+0xc4>
    	(projectile.y <= GROUND_Y && projectile.x <= LEFT_BOUNDARY)||
 8002d84:	4b1e      	ldr	r3, [pc, #120]	@ (8002e00 <Railgun_Update+0x12c>)
 8002d86:	edd3 7a00 	vldr	s15, [r3]
 8002d8a:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8002e08 <Railgun_Update+0x134>
 8002d8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d96:	d913      	bls.n	8002dc0 <Railgun_Update+0xec>
		(projectile.y <= 150 && projectile.x <= 80)) {
 8002d98:	4b19      	ldr	r3, [pc, #100]	@ (8002e00 <Railgun_Update+0x12c>)
 8002d9a:	edd3 7a01 	vldr	s15, [r3, #4]
    	(projectile.y <= GROUND_Y && projectile.x <= LEFT_BOUNDARY)||
 8002d9e:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002e0c <Railgun_Update+0x138>
 8002da2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002daa:	d810      	bhi.n	8002dce <Railgun_Update+0xfa>
		(projectile.y <= 150 && projectile.x <= 80)) {
 8002dac:	4b14      	ldr	r3, [pc, #80]	@ (8002e00 <Railgun_Update+0x12c>)
 8002dae:	edd3 7a00 	vldr	s15, [r3]
 8002db2:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002e10 <Railgun_Update+0x13c>
 8002db6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dbe:	d806      	bhi.n	8002dce <Railgun_Update+0xfa>

        projectile.active = false;
 8002dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8002e00 <Railgun_Update+0x12c>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	741a      	strb	r2, [r3, #16]
        set_brightness(0);
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	f000 feaa 	bl	8003b20 <set_brightness>
        return;
 8002dcc:	e015      	b.n	8002dfa <Railgun_Update+0x126>
    }

    // Draw new pixel
    LCD_Draw_Circle_Fill((int)projectile.x, (int)projectile.y, 2, LCD_COLOR_BLUE);
 8002dce:	4b0c      	ldr	r3, [pc, #48]	@ (8002e00 <Railgun_Update+0x12c>)
 8002dd0:	edd3 7a00 	vldr	s15, [r3]
 8002dd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dd8:	ee17 3a90 	vmov	r3, s15
 8002ddc:	b298      	uxth	r0, r3
 8002dde:	4b08      	ldr	r3, [pc, #32]	@ (8002e00 <Railgun_Update+0x12c>)
 8002de0:	edd3 7a01 	vldr	s15, [r3, #4]
 8002de4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002de8:	ee17 3a90 	vmov	r3, s15
 8002dec:	b299      	uxth	r1, r3
 8002dee:	231f      	movs	r3, #31
 8002df0:	2202      	movs	r2, #2
 8002df2:	f7ff fa8d 	bl	8002310 <LCD_Draw_Circle_Fill>
 8002df6:	e000      	b.n	8002dfa <Railgun_Update+0x126>
    	return;
 8002df8:	bf00      	nop

}
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	20025ad8 	.word	0x20025ad8
 8002e04:	43820000 	.word	0x43820000
 8002e08:	42200000 	.word	0x42200000
 8002e0c:	43160000 	.word	0x43160000
 8002e10:	42a00000 	.word	0x42a00000

08002e14 <StartShieldTask>:
uint8_t previous_health_for_update = SHIELD_MAX_HEALTH;

static uint32_t last_drain_time = 0;


void StartShieldTask(void const * argument) {
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
    for (;;) {
        Shield_Update();
 8002e1c:	f000 f8d6 	bl	8002fcc <Shield_Update>
        osDelay(10);
 8002e20:	200a      	movs	r0, #10
 8002e22:	f004 fa12 	bl	800724a <osDelay>
        Shield_Update();
 8002e26:	bf00      	nop
 8002e28:	e7f8      	b.n	8002e1c <StartShieldTask+0x8>
	...

08002e2c <ActivateShield>:
    }
}



void ActivateShield(void) {
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
    if (!shield_active && capacitor_energy >= SHIELD_BAR_COST) {
 8002e32:	4b1f      	ldr	r3, [pc, #124]	@ (8002eb0 <ActivateShield+0x84>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	f083 0301 	eor.w	r3, r3, #1
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d032      	beq.n	8002ea6 <ActivateShield+0x7a>
 8002e40:	4b1c      	ldr	r3, [pc, #112]	@ (8002eb4 <ActivateShield+0x88>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002e48:	d32d      	bcc.n	8002ea6 <ActivateShield+0x7a>
        shield_active = true;
 8002e4a:	4b19      	ldr	r3, [pc, #100]	@ (8002eb0 <ActivateShield+0x84>)
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	701a      	strb	r2, [r3, #0]
        last_drain_time = HAL_GetTick();
 8002e50:	f001 f8e0 	bl	8004014 <HAL_GetTick>
 8002e54:	4603      	mov	r3, r0
 8002e56:	4a18      	ldr	r2, [pc, #96]	@ (8002eb8 <ActivateShield+0x8c>)
 8002e58:	6013      	str	r3, [r2, #0]
        shield_health = SHIELD_MAX_HEALTH;
 8002e5a:	4b18      	ldr	r3, [pc, #96]	@ (8002ebc <ActivateShield+0x90>)
 8002e5c:	220a      	movs	r2, #10
 8002e5e:	701a      	strb	r2, [r3, #0]

        printf("Shield Activated!\n");
 8002e60:	4817      	ldr	r0, [pc, #92]	@ (8002ec0 <ActivateShield+0x94>)
 8002e62:	f006 f8c7 	bl	8008ff4 <puts>

        // Draw full health bar in BLACK
        int bar_x = 175;
 8002e66:	23af      	movs	r3, #175	@ 0xaf
 8002e68:	60bb      	str	r3, [r7, #8]
        int bar_y_base = 55;
 8002e6a:	2337      	movs	r3, #55	@ 0x37
 8002e6c:	607b      	str	r3, [r7, #4]
        int bar_spacing = 5;
 8002e6e:	2305      	movs	r3, #5
 8002e70:	603b      	str	r3, [r7, #0]
        for (int i = 0; i < SHIELD_MAX_HEALTH; i++) {
 8002e72:	2300      	movs	r3, #0
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	e013      	b.n	8002ea0 <ActivateShield+0x74>
            LCD_DisplayCharColored(bar_x, bar_y_base - (i * bar_spacing), '_', LCD_COLOR_BLACK);
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	b298      	uxth	r0, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	b299      	uxth	r1, r3
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	fb11 f303 	smulbb	r3, r1, r3
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	b299      	uxth	r1, r3
 8002e92:	2300      	movs	r3, #0
 8002e94:	225f      	movs	r2, #95	@ 0x5f
 8002e96:	f7ff f9b1 	bl	80021fc <LCD_DisplayCharColored>
        for (int i = 0; i < SHIELD_MAX_HEALTH; i++) {
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2b09      	cmp	r3, #9
 8002ea4:	dde8      	ble.n	8002e78 <ActivateShield+0x4c>
        }
    }
}
 8002ea6:	bf00      	nop
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	20025aec 	.word	0x20025aec
 8002eb4:	20000000 	.word	0x20000000
 8002eb8:	20025af0 	.word	0x20025af0
 8002ebc:	20000070 	.word	0x20000070
 8002ec0:	08009dbc 	.word	0x08009dbc

08002ec4 <DeactivateShield>:


void DeactivateShield(void) {
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af02      	add	r7, sp, #8
    if (shield_active) {
 8002eca:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef8 <DeactivateShield+0x34>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00e      	beq.n	8002ef0 <DeactivateShield+0x2c>
        shield_active = false;
 8002ed2:	4b09      	ldr	r3, [pc, #36]	@ (8002ef8 <DeactivateShield+0x34>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	701a      	strb	r2, [r3, #0]
        printf("Shield Deactivated!\n");
 8002ed8:	4808      	ldr	r0, [pc, #32]	@ (8002efc <DeactivateShield+0x38>)
 8002eda:	f006 f88b 	bl	8008ff4 <puts>

        // Clear shield bar
        LCD_Clear_Rectangle(175, 20, 16, 25 * 10, LCD_COLOR_WHITE);
 8002ede:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	23fa      	movs	r3, #250	@ 0xfa
 8002ee6:	2210      	movs	r2, #16
 8002ee8:	2114      	movs	r1, #20
 8002eea:	20af      	movs	r0, #175	@ 0xaf
 8002eec:	f7ff fa86 	bl	80023fc <LCD_Clear_Rectangle>
    }
}
 8002ef0:	bf00      	nop
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20025aec 	.word	0x20025aec
 8002efc:	08009dd0 	.word	0x08009dd0

08002f00 <Shield_TakeHit>:



void Shield_TakeHit(void) {
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
    if (shield_active && shield_health > 0) {
 8002f06:	4b27      	ldr	r3, [pc, #156]	@ (8002fa4 <Shield_TakeHit+0xa4>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d046      	beq.n	8002f9c <Shield_TakeHit+0x9c>
 8002f0e:	4b26      	ldr	r3, [pc, #152]	@ (8002fa8 <Shield_TakeHit+0xa8>)
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d042      	beq.n	8002f9c <Shield_TakeHit+0x9c>
        uint8_t previous_health = shield_health;
 8002f16:	4b24      	ldr	r3, [pc, #144]	@ (8002fa8 <Shield_TakeHit+0xa8>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	74fb      	strb	r3, [r7, #19]

        // Deduct 5 health
        if (shield_health >= SHIELD_DAMAGE) {
 8002f1c:	4b22      	ldr	r3, [pc, #136]	@ (8002fa8 <Shield_TakeHit+0xa8>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d906      	bls.n	8002f32 <Shield_TakeHit+0x32>
            shield_health -= SHIELD_DAMAGE;
 8002f24:	4b20      	ldr	r3, [pc, #128]	@ (8002fa8 <Shield_TakeHit+0xa8>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	3b05      	subs	r3, #5
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	4b1e      	ldr	r3, [pc, #120]	@ (8002fa8 <Shield_TakeHit+0xa8>)
 8002f2e:	701a      	strb	r2, [r3, #0]
 8002f30:	e002      	b.n	8002f38 <Shield_TakeHit+0x38>
        } else {
            shield_health = 0;
 8002f32:	4b1d      	ldr	r3, [pc, #116]	@ (8002fa8 <Shield_TakeHit+0xa8>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	701a      	strb	r2, [r3, #0]
        }

        printf("Shield took damage! Health: %d\n", shield_health);
 8002f38:	4b1b      	ldr	r3, [pc, #108]	@ (8002fa8 <Shield_TakeHit+0xa8>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	481b      	ldr	r0, [pc, #108]	@ (8002fac <Shield_TakeHit+0xac>)
 8002f40:	f005 fff0 	bl	8008f24 <iprintf>

        // Draw white bars for lost health
        int bar_x = 175;
 8002f44:	23af      	movs	r3, #175	@ 0xaf
 8002f46:	60fb      	str	r3, [r7, #12]
        int bar_y_base = 55;
 8002f48:	2337      	movs	r3, #55	@ 0x37
 8002f4a:	60bb      	str	r3, [r7, #8]
        int bar_spacing = 5;
 8002f4c:	2305      	movs	r3, #5
 8002f4e:	607b      	str	r3, [r7, #4]

        for (int i = shield_health; i < previous_health; i++) {
 8002f50:	4b15      	ldr	r3, [pc, #84]	@ (8002fa8 <Shield_TakeHit+0xa8>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	617b      	str	r3, [r7, #20]
 8002f56:	e014      	b.n	8002f82 <Shield_TakeHit+0x82>
            LCD_DisplayCharColored(bar_x, bar_y_base - (i * bar_spacing), '_', LCD_COLOR_WHITE);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	b298      	uxth	r0, r3
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	b299      	uxth	r1, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	fb11 f303 	smulbb	r3, r1, r3
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	b299      	uxth	r1, r3
 8002f72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f76:	225f      	movs	r2, #95	@ 0x5f
 8002f78:	f7ff f940 	bl	80021fc <LCD_DisplayCharColored>
        for (int i = shield_health; i < previous_health; i++) {
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	617b      	str	r3, [r7, #20]
 8002f82:	7cfb      	ldrb	r3, [r7, #19]
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	dbe6      	blt.n	8002f58 <Shield_TakeHit+0x58>
        }

        // Deactivate if health reaches 0
        if (shield_health == 0) {
 8002f8a:	4b07      	ldr	r3, [pc, #28]	@ (8002fa8 <Shield_TakeHit+0xa8>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d104      	bne.n	8002f9c <Shield_TakeHit+0x9c>
            printf("Shield destroyed by damage!\n");
 8002f92:	4807      	ldr	r0, [pc, #28]	@ (8002fb0 <Shield_TakeHit+0xb0>)
 8002f94:	f006 f82e 	bl	8008ff4 <puts>
            DeactivateShield();
 8002f98:	f7ff ff94 	bl	8002ec4 <DeactivateShield>
        }
    }
}
 8002f9c:	bf00      	nop
 8002f9e:	3718      	adds	r7, #24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	20025aec 	.word	0x20025aec
 8002fa8:	20000070 	.word	0x20000070
 8002fac:	08009de4 	.word	0x08009de4
 8002fb0:	08009e04 	.word	0x08009e04

08002fb4 <GetShieldHealth>:





uint8_t GetShieldHealth(void) {
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
    return shield_health;
 8002fb8:	4b03      	ldr	r3, [pc, #12]	@ (8002fc8 <GetShieldHealth+0x14>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	20000070 	.word	0x20000070

08002fcc <Shield_Update>:

void Shield_Update(void) {
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
    static uint32_t last_update_time = 0;
    static uint8_t previous_health = SHIELD_MAX_HEALTH;
    uint32_t now = HAL_GetTick();
 8002fd2:	f001 f81f 	bl	8004014 <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]

    if (!shield_active) return;
 8002fd8:	4b32      	ldr	r3, [pc, #200]	@ (80030a4 <Shield_Update+0xd8>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	f083 0301 	eor.w	r3, r3, #1
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d158      	bne.n	8003098 <Shield_Update+0xcc>

    // Limit how often this runs to reduce LCD flicker & CPU load
    if (now - last_update_time < 10) return;
 8002fe6:	4b30      	ldr	r3, [pc, #192]	@ (80030a8 <Shield_Update+0xdc>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b09      	cmp	r3, #9
 8002ff0:	d954      	bls.n	800309c <Shield_Update+0xd0>
    last_update_time = now;
 8002ff2:	4a2d      	ldr	r2, [pc, #180]	@ (80030a8 <Shield_Update+0xdc>)
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	6013      	str	r3, [r2, #0]

    // === Drain capacitor energy ===
    if (now - last_drain_time >= SHIELD_DRAIN_INTERVAL) {
 8002ff8:	4b2c      	ldr	r3, [pc, #176]	@ (80030ac <Shield_Update+0xe0>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003004:	d318      	bcc.n	8003038 <Shield_Update+0x6c>
        if (capacitor_energy >= SHIELD_BAR_COST) {
 8003006:	4b2a      	ldr	r3, [pc, #168]	@ (80030b0 <Shield_Update+0xe4>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800300e:	d30d      	bcc.n	800302c <Shield_Update+0x60>
            Capacitor_Consume(SHIELD_BAR_COST);
 8003010:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003014:	f7fd ff18 	bl	8000e48 <Capacitor_Consume>
            Capacitor_DrawBar(215, 55, 5, 10);   // Show energy after drain
 8003018:	230a      	movs	r3, #10
 800301a:	2205      	movs	r2, #5
 800301c:	2137      	movs	r1, #55	@ 0x37
 800301e:	20d7      	movs	r0, #215	@ 0xd7
 8003020:	f7fd ff62 	bl	8000ee8 <Capacitor_DrawBar>
            last_drain_time = now;
 8003024:	4a21      	ldr	r2, [pc, #132]	@ (80030ac <Shield_Update+0xe0>)
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	6013      	str	r3, [r2, #0]
 800302a:	e005      	b.n	8003038 <Shield_Update+0x6c>
        } else {
            printf("Shield deactivated: not enough capacitor energy.\n");
 800302c:	4821      	ldr	r0, [pc, #132]	@ (80030b4 <Shield_Update+0xe8>)
 800302e:	f005 ffe1 	bl	8008ff4 <puts>
            DeactivateShield();
 8003032:	f7ff ff47 	bl	8002ec4 <DeactivateShield>
            return;
 8003036:	e032      	b.n	800309e <Shield_Update+0xd2>
        }
    }

    // === Shield Bar Update ===
    int bar_x = 175;
 8003038:	23af      	movs	r3, #175	@ 0xaf
 800303a:	60fb      	str	r3, [r7, #12]
    int bar_y_base = 55;
 800303c:	2337      	movs	r3, #55	@ 0x37
 800303e:	60bb      	str	r3, [r7, #8]
    int bar_spacing = 5;
 8003040:	2305      	movs	r3, #5
 8003042:	607b      	str	r3, [r7, #4]

    if (shield_health < previous_health) {
 8003044:	4b1c      	ldr	r3, [pc, #112]	@ (80030b8 <Shield_Update+0xec>)
 8003046:	781a      	ldrb	r2, [r3, #0]
 8003048:	4b1c      	ldr	r3, [pc, #112]	@ (80030bc <Shield_Update+0xf0>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	429a      	cmp	r2, r3
 800304e:	d226      	bcs.n	800309e <Shield_Update+0xd2>
        // Erase ONLY the lost health units with white '_'
        for (int i = shield_health; i < previous_health; i++) {
 8003050:	4b19      	ldr	r3, [pc, #100]	@ (80030b8 <Shield_Update+0xec>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	617b      	str	r3, [r7, #20]
 8003056:	e014      	b.n	8003082 <Shield_Update+0xb6>
            LCD_DisplayCharColored(bar_x, bar_y_base - (i * bar_spacing), '_', LCD_COLOR_WHITE);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	b298      	uxth	r0, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	b29a      	uxth	r2, r3
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	b299      	uxth	r1, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	b29b      	uxth	r3, r3
 8003068:	fb11 f303 	smulbb	r3, r1, r3
 800306c:	b29b      	uxth	r3, r3
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	b299      	uxth	r1, r3
 8003072:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003076:	225f      	movs	r2, #95	@ 0x5f
 8003078:	f7ff f8c0 	bl	80021fc <LCD_DisplayCharColored>
        for (int i = shield_health; i < previous_health; i++) {
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	3301      	adds	r3, #1
 8003080:	617b      	str	r3, [r7, #20]
 8003082:	4b0e      	ldr	r3, [pc, #56]	@ (80030bc <Shield_Update+0xf0>)
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	461a      	mov	r2, r3
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	4293      	cmp	r3, r2
 800308c:	dbe4      	blt.n	8003058 <Shield_Update+0x8c>
        }
        previous_health = shield_health;
 800308e:	4b0a      	ldr	r3, [pc, #40]	@ (80030b8 <Shield_Update+0xec>)
 8003090:	781a      	ldrb	r2, [r3, #0]
 8003092:	4b0a      	ldr	r3, [pc, #40]	@ (80030bc <Shield_Update+0xf0>)
 8003094:	701a      	strb	r2, [r3, #0]
 8003096:	e002      	b.n	800309e <Shield_Update+0xd2>
    if (!shield_active) return;
 8003098:	bf00      	nop
 800309a:	e000      	b.n	800309e <Shield_Update+0xd2>
    if (now - last_update_time < 10) return;
 800309c:	bf00      	nop
    }
}
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	20025aec 	.word	0x20025aec
 80030a8:	20025af4 	.word	0x20025af4
 80030ac:	20025af0 	.word	0x20025af0
 80030b0:	20000000 	.word	0x20000000
 80030b4:	08009e20 	.word	0x08009e20
 80030b8:	20000070 	.word	0x20000070
 80030bc:	20000071 	.word	0x20000071

080030c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4a07      	ldr	r2, [pc, #28]	@ (80030ec <vApplicationGetIdleTaskMemory+0x2c>)
 80030d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	4a06      	ldr	r2, [pc, #24]	@ (80030f0 <vApplicationGetIdleTaskMemory+0x30>)
 80030d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2280      	movs	r2, #128	@ 0x80
 80030dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80030de:	bf00      	nop
 80030e0:	3714      	adds	r7, #20
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	20025af8 	.word	0x20025af8
 80030f0:	20025b4c 	.word	0x20025b4c

080030f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80030f4:	b5b0      	push	{r4, r5, r7, lr}
 80030f6:	b0ac      	sub	sp, #176	@ 0xb0
 80030f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 80030fa:	f005 fcd5 	bl	8008aa8 <initialise_monitor_handles>
	HAL_Init();
 80030fe:	f000 ff23 	bl	8003f48 <HAL_Init>
	SystemClock_Config();
 8003102:	f000 f8d9 	bl	80032b8 <SystemClock_Config>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003106:	2300      	movs	r3, #0
 8003108:	607b      	str	r3, [r7, #4]
 800310a:	4b5d      	ldr	r3, [pc, #372]	@ (8003280 <main+0x18c>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310e:	4a5c      	ldr	r2, [pc, #368]	@ (8003280 <main+0x18c>)
 8003110:	f043 0304 	orr.w	r3, r3, #4
 8003114:	6313      	str	r3, [r2, #48]	@ 0x30
 8003116:	4b5a      	ldr	r3, [pc, #360]	@ (8003280 <main+0x18c>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311a:	f003 0304 	and.w	r3, r3, #4
 800311e:	607b      	str	r3, [r7, #4]
 8003120:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8003122:	2300      	movs	r3, #0
 8003124:	603b      	str	r3, [r7, #0]
 8003126:	4b56      	ldr	r3, [pc, #344]	@ (8003280 <main+0x18c>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312a:	4a55      	ldr	r2, [pc, #340]	@ (8003280 <main+0x18c>)
 800312c:	f043 0320 	orr.w	r3, r3, #32
 8003130:	6313      	str	r3, [r2, #48]	@ 0x30
 8003132:	4b53      	ldr	r3, [pc, #332]	@ (8003280 <main+0x18c>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003136:	f003 0320 	and.w	r3, r3, #32
 800313a:	603b      	str	r3, [r7, #0]
 800313c:	683b      	ldr	r3, [r7, #0]

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  //HAL_Init();

  //LCD Tasks
  LTCD__Init();          // Start LCD
 800313e:	f7fe ff33 	bl	8001fa8 <LTCD__Init>
  ili9341_Init();
 8003142:	f7ff f991 	bl	8002468 <ili9341_Init>
  LTCD_Layer_Init(0);
 8003146:	2000      	movs	r0, #0
 8003148:	f7fe ff8c 	bl	8002064 <LTCD_Layer_Init>
  __HAL_LTDC_LAYER_ENABLE(&hltdc, 0);
 800314c:	4b4d      	ldr	r3, [pc, #308]	@ (8003284 <main+0x190>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	3384      	adds	r3, #132	@ 0x84
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a4b      	ldr	r2, [pc, #300]	@ (8003284 <main+0x190>)
 8003156:	6812      	ldr	r2, [r2, #0]
 8003158:	3284      	adds	r2, #132	@ 0x84
 800315a:	f043 0301 	orr.w	r3, r3, #1
 800315e:	6013      	str	r3, [r2, #0]
  HAL_LTDC_Reload(&hltdc, LTDC_RELOAD_IMMEDIATE);
 8003160:	2101      	movs	r1, #1
 8003162:	4848      	ldr	r0, [pc, #288]	@ (8003284 <main+0x190>)
 8003164:	f001 fe0a 	bl	8004d7c <HAL_LTDC_Reload>
  LCD_Clear(0, LCD_COLOR_WHITE);  // Clear screen
 8003168:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800316c:	2000      	movs	r0, #0
 800316e:	f7ff f923 	bl	80023b8 <LCD_Clear>
  LCD_SetTextColor(LCD_COLOR_BLACK);
 8003172:	2000      	movs	r0, #0
 8003174:	f7ff f8ac 	bl	80022d0 <LCD_SetTextColor>
  LCD_SetFont(&Font16x24);        // Optional: pick a default font
 8003178:	4843      	ldr	r0, [pc, #268]	@ (8003288 <main+0x194>)
 800317a:	f7ff f8b9 	bl	80022f0 <LCD_SetFont>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800317e:	f000 f89b 	bl	80032b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003182:	f000 f9d3 	bl	800352c <MX_GPIO_Init>
  MX_I2C3_Init();
 8003186:	f000 f903 	bl	8003390 <MX_I2C3_Init>
  MX_SPI5_Init();
 800318a:	f000 f941 	bl	8003410 <MX_SPI5_Init>
  MX_TIM2_Init();
 800318e:	f000 f975 	bl	800347c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  GPIO_Init();
 8003192:	f000 fc3b 	bl	8003a0c <GPIO_Init>
  TIM2_Init();
 8003196:	f000 fc57 	bl	8003a48 <TIM2_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800319a:	4b3c      	ldr	r3, [pc, #240]	@ (800328c <main+0x198>)
 800319c:	f107 0494 	add.w	r4, r7, #148	@ 0x94
 80031a0:	461d      	mov	r5, r3
 80031a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80031aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80031ae:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80031b2:	2100      	movs	r1, #0
 80031b4:	4618      	mov	r0, r3
 80031b6:	f003 fffc 	bl	80071b2 <osThreadCreate>
 80031ba:	4603      	mov	r3, r0
 80031bc:	4a34      	ldr	r2, [pc, #208]	@ (8003290 <main+0x19c>)
 80031be:	6013      	str	r3, [r2, #0]

  /* definition and creation of PhysicsTask */
  osThreadDef(PhysicsTask, StartTask02, osPriorityNormal, 0, 128);
 80031c0:	4b34      	ldr	r3, [pc, #208]	@ (8003294 <main+0x1a0>)
 80031c2:	f107 0478 	add.w	r4, r7, #120	@ 0x78
 80031c6:	461d      	mov	r5, r3
 80031c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80031d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PhysicsTaskHandle = osThreadCreate(osThread(PhysicsTask), NULL);
 80031d4:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80031d8:	2100      	movs	r1, #0
 80031da:	4618      	mov	r0, r3
 80031dc:	f003 ffe9 	bl	80071b2 <osThreadCreate>
 80031e0:	4603      	mov	r3, r0
 80031e2:	4a2d      	ldr	r2, [pc, #180]	@ (8003298 <main+0x1a4>)
 80031e4:	6013      	str	r3, [r2, #0]
//  /* definition and creation of DisplayTask */
//  osThreadDef(DisplayTask, StartTask03, osPriorityBelowNormal, 0, 128);
//  DisplayTaskHandle = osThreadCreate(osThread(DisplayTask), NULL);

  /* definition and creation of GyroTask */
  osThreadDef(GyroTask, StartTask04, osPriorityLow, 0, 128);
 80031e6:	4b2d      	ldr	r3, [pc, #180]	@ (800329c <main+0x1a8>)
 80031e8:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 80031ec:	461d      	mov	r5, r3
 80031ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80031f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GyroTaskHandle = osThreadCreate(osThread(GyroTask), NULL);
 80031fa:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80031fe:	2100      	movs	r1, #0
 8003200:	4618      	mov	r0, r3
 8003202:	f003 ffd6 	bl	80071b2 <osThreadCreate>
 8003206:	4603      	mov	r3, r0
 8003208:	4a25      	ldr	r2, [pc, #148]	@ (80032a0 <main+0x1ac>)
 800320a:	6013      	str	r3, [r2, #0]

  //Define and create buttontask
  osThreadDef(ButtonTask, StartButtonTask, osPriorityLow, 0, 128);
 800320c:	4b25      	ldr	r3, [pc, #148]	@ (80032a4 <main+0x1b0>)
 800320e:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8003212:	461d      	mov	r5, r3
 8003214:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003216:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003218:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800321c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate(osThread(ButtonTask), NULL);
 8003220:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003224:	2100      	movs	r1, #0
 8003226:	4618      	mov	r0, r3
 8003228:	f003 ffc3 	bl	80071b2 <osThreadCreate>

  //Define and create LCD-TASK
  osThreadDef(DisplayTask, StartDisplayTask, osPriorityBelowNormal, 0, 128);
 800322c:	4b1e      	ldr	r3, [pc, #120]	@ (80032a8 <main+0x1b4>)
 800322e:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8003232:	461d      	mov	r5, r3
 8003234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003238:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800323c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DisplayTaskHandle = osThreadCreate(osThread(DisplayTask), NULL);
 8003240:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003244:	2100      	movs	r1, #0
 8003246:	4618      	mov	r0, r3
 8003248:	f003 ffb3 	bl	80071b2 <osThreadCreate>
 800324c:	4603      	mov	r3, r0
 800324e:	4a17      	ldr	r2, [pc, #92]	@ (80032ac <main+0x1b8>)
 8003250:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */


  osThreadDef(shieldTask, StartShieldTask, osPriorityLow, 0, 128);
 8003252:	4b17      	ldr	r3, [pc, #92]	@ (80032b0 <main+0x1bc>)
 8003254:	f107 0408 	add.w	r4, r7, #8
 8003258:	461d      	mov	r5, r3
 800325a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800325c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800325e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003262:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate(osThread(shieldTask), NULL);
 8003266:	f107 0308 	add.w	r3, r7, #8
 800326a:	2100      	movs	r1, #0
 800326c:	4618      	mov	r0, r3
 800326e:	f003 ffa0 	bl	80071b2 <osThreadCreate>

//  osThreadDef(CollisionTask, StartCollisionTask, osPriorityBelowNormal, 0, 256);
//  osThreadCreate(osThread(CollisionTask), NULL);

  /* USER CODE END RTOS_THREADS */
  printf("Before osKernelStart\n");
 8003272:	4810      	ldr	r0, [pc, #64]	@ (80032b4 <main+0x1c0>)
 8003274:	f005 febe 	bl	8008ff4 <puts>

  /* Start scheduler */
  osKernelStart();
 8003278:	f003 ff94 	bl	80071a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800327c:	bf00      	nop
 800327e:	e7fd      	b.n	800327c <main+0x188>
 8003280:	40023800 	.word	0x40023800
 8003284:	20025d4c 	.word	0x20025d4c
 8003288:	20000074 	.word	0x20000074
 800328c:	08009e78 	.word	0x08009e78
 8003290:	20025ee8 	.word	0x20025ee8
 8003294:	08009ea0 	.word	0x08009ea0
 8003298:	20025eec 	.word	0x20025eec
 800329c:	08009ec8 	.word	0x08009ec8
 80032a0:	20025ef4 	.word	0x20025ef4
 80032a4:	08009ef0 	.word	0x08009ef0
 80032a8:	08009f18 	.word	0x08009f18
 80032ac:	20025ef0 	.word	0x20025ef0
 80032b0:	08009f40 	.word	0x08009f40
 80032b4:	08009e54 	.word	0x08009e54

080032b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b094      	sub	sp, #80	@ 0x50
 80032bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032be:	f107 0320 	add.w	r3, r7, #32
 80032c2:	2230      	movs	r2, #48	@ 0x30
 80032c4:	2100      	movs	r1, #0
 80032c6:	4618      	mov	r0, r3
 80032c8:	f005 fe9c 	bl	8009004 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032cc:	f107 030c 	add.w	r3, r7, #12
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	605a      	str	r2, [r3, #4]
 80032d6:	609a      	str	r2, [r3, #8]
 80032d8:	60da      	str	r2, [r3, #12]
 80032da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80032dc:	2300      	movs	r3, #0
 80032de:	60bb      	str	r3, [r7, #8]
 80032e0:	4b29      	ldr	r3, [pc, #164]	@ (8003388 <SystemClock_Config+0xd0>)
 80032e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e4:	4a28      	ldr	r2, [pc, #160]	@ (8003388 <SystemClock_Config+0xd0>)
 80032e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80032ec:	4b26      	ldr	r3, [pc, #152]	@ (8003388 <SystemClock_Config+0xd0>)
 80032ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80032f8:	2300      	movs	r3, #0
 80032fa:	607b      	str	r3, [r7, #4]
 80032fc:	4b23      	ldr	r3, [pc, #140]	@ (800338c <SystemClock_Config+0xd4>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003304:	4a21      	ldr	r2, [pc, #132]	@ (800338c <SystemClock_Config+0xd4>)
 8003306:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800330a:	6013      	str	r3, [r2, #0]
 800330c:	4b1f      	ldr	r3, [pc, #124]	@ (800338c <SystemClock_Config+0xd4>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003314:	607b      	str	r3, [r7, #4]
 8003316:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003318:	2302      	movs	r3, #2
 800331a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800331c:	2301      	movs	r3, #1
 800331e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003320:	2310      	movs	r3, #16
 8003322:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003324:	2302      	movs	r3, #2
 8003326:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003328:	2300      	movs	r3, #0
 800332a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800332c:	2308      	movs	r3, #8
 800332e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8003330:	2332      	movs	r3, #50	@ 0x32
 8003332:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003334:	2304      	movs	r3, #4
 8003336:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003338:	2307      	movs	r3, #7
 800333a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800333c:	f107 0320 	add.w	r3, r7, #32
 8003340:	4618      	mov	r0, r3
 8003342:	f001 fee1 	bl	8005108 <HAL_RCC_OscConfig>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800334c:	f000 fb57 	bl	80039fe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003350:	230f      	movs	r3, #15
 8003352:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003354:	2302      	movs	r3, #2
 8003356:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003358:	2300      	movs	r3, #0
 800335a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800335c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003360:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8003362:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003366:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003368:	f107 030c 	add.w	r3, r7, #12
 800336c:	2100      	movs	r1, #0
 800336e:	4618      	mov	r0, r3
 8003370:	f002 f942 	bl	80055f8 <HAL_RCC_ClockConfig>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800337a:	f000 fb40 	bl	80039fe <Error_Handler>
  }
}
 800337e:	bf00      	nop
 8003380:	3750      	adds	r7, #80	@ 0x50
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40023800 	.word	0x40023800
 800338c:	40007000 	.word	0x40007000

08003390 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003394:	4b1b      	ldr	r3, [pc, #108]	@ (8003404 <MX_I2C3_Init+0x74>)
 8003396:	4a1c      	ldr	r2, [pc, #112]	@ (8003408 <MX_I2C3_Init+0x78>)
 8003398:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800339a:	4b1a      	ldr	r3, [pc, #104]	@ (8003404 <MX_I2C3_Init+0x74>)
 800339c:	4a1b      	ldr	r2, [pc, #108]	@ (800340c <MX_I2C3_Init+0x7c>)
 800339e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80033a0:	4b18      	ldr	r3, [pc, #96]	@ (8003404 <MX_I2C3_Init+0x74>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80033a6:	4b17      	ldr	r3, [pc, #92]	@ (8003404 <MX_I2C3_Init+0x74>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033ac:	4b15      	ldr	r3, [pc, #84]	@ (8003404 <MX_I2C3_Init+0x74>)
 80033ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80033b2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033b4:	4b13      	ldr	r3, [pc, #76]	@ (8003404 <MX_I2C3_Init+0x74>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80033ba:	4b12      	ldr	r3, [pc, #72]	@ (8003404 <MX_I2C3_Init+0x74>)
 80033bc:	2200      	movs	r2, #0
 80033be:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033c0:	4b10      	ldr	r3, [pc, #64]	@ (8003404 <MX_I2C3_Init+0x74>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003404 <MX_I2C3_Init+0x74>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80033cc:	480d      	ldr	r0, [pc, #52]	@ (8003404 <MX_I2C3_Init+0x74>)
 80033ce:	f001 f9fd 	bl	80047cc <HAL_I2C_Init>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80033d8:	f000 fb11 	bl	80039fe <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80033dc:	2100      	movs	r1, #0
 80033de:	4809      	ldr	r0, [pc, #36]	@ (8003404 <MX_I2C3_Init+0x74>)
 80033e0:	f001 fb38 	bl	8004a54 <HAL_I2CEx_ConfigAnalogFilter>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80033ea:	f000 fb08 	bl	80039fe <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80033ee:	2100      	movs	r1, #0
 80033f0:	4804      	ldr	r0, [pc, #16]	@ (8003404 <MX_I2C3_Init+0x74>)
 80033f2:	f001 fb6b 	bl	8004acc <HAL_I2CEx_ConfigDigitalFilter>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80033fc:	f000 faff 	bl	80039fe <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003400:	bf00      	nop
 8003402:	bd80      	pop	{r7, pc}
 8003404:	20025df4 	.word	0x20025df4
 8003408:	40005c00 	.word	0x40005c00
 800340c:	000186a0 	.word	0x000186a0

08003410 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8003414:	4b17      	ldr	r3, [pc, #92]	@ (8003474 <MX_SPI5_Init+0x64>)
 8003416:	4a18      	ldr	r2, [pc, #96]	@ (8003478 <MX_SPI5_Init+0x68>)
 8003418:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800341a:	4b16      	ldr	r3, [pc, #88]	@ (8003474 <MX_SPI5_Init+0x64>)
 800341c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003420:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8003422:	4b14      	ldr	r3, [pc, #80]	@ (8003474 <MX_SPI5_Init+0x64>)
 8003424:	2200      	movs	r2, #0
 8003426:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003428:	4b12      	ldr	r3, [pc, #72]	@ (8003474 <MX_SPI5_Init+0x64>)
 800342a:	2200      	movs	r2, #0
 800342c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800342e:	4b11      	ldr	r3, [pc, #68]	@ (8003474 <MX_SPI5_Init+0x64>)
 8003430:	2200      	movs	r2, #0
 8003432:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003434:	4b0f      	ldr	r3, [pc, #60]	@ (8003474 <MX_SPI5_Init+0x64>)
 8003436:	2200      	movs	r2, #0
 8003438:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800343a:	4b0e      	ldr	r3, [pc, #56]	@ (8003474 <MX_SPI5_Init+0x64>)
 800343c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003440:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003442:	4b0c      	ldr	r3, [pc, #48]	@ (8003474 <MX_SPI5_Init+0x64>)
 8003444:	2218      	movs	r2, #24
 8003446:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003448:	4b0a      	ldr	r3, [pc, #40]	@ (8003474 <MX_SPI5_Init+0x64>)
 800344a:	2200      	movs	r2, #0
 800344c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800344e:	4b09      	ldr	r3, [pc, #36]	@ (8003474 <MX_SPI5_Init+0x64>)
 8003450:	2200      	movs	r2, #0
 8003452:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003454:	4b07      	ldr	r3, [pc, #28]	@ (8003474 <MX_SPI5_Init+0x64>)
 8003456:	2200      	movs	r2, #0
 8003458:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 800345a:	4b06      	ldr	r3, [pc, #24]	@ (8003474 <MX_SPI5_Init+0x64>)
 800345c:	220a      	movs	r2, #10
 800345e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003460:	4804      	ldr	r0, [pc, #16]	@ (8003474 <MX_SPI5_Init+0x64>)
 8003462:	f002 fc95 	bl	8005d90 <HAL_SPI_Init>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800346c:	f000 fac7 	bl	80039fe <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8003470:	bf00      	nop
 8003472:	bd80      	pop	{r7, pc}
 8003474:	20025e48 	.word	0x20025e48
 8003478:	40015000 	.word	0x40015000

0800347c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b08a      	sub	sp, #40	@ 0x28
 8003480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003482:	f107 0320 	add.w	r3, r7, #32
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800348c:	1d3b      	adds	r3, r7, #4
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	605a      	str	r2, [r3, #4]
 8003494:	609a      	str	r2, [r3, #8]
 8003496:	60da      	str	r2, [r3, #12]
 8003498:	611a      	str	r2, [r3, #16]
 800349a:	615a      	str	r2, [r3, #20]
 800349c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800349e:	4b22      	ldr	r3, [pc, #136]	@ (8003528 <MX_TIM2_Init+0xac>)
 80034a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80034a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80034a6:	4b20      	ldr	r3, [pc, #128]	@ (8003528 <MX_TIM2_Init+0xac>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034ac:	4b1e      	ldr	r3, [pc, #120]	@ (8003528 <MX_TIM2_Init+0xac>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80034b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003528 <MX_TIM2_Init+0xac>)
 80034b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80034b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003528 <MX_TIM2_Init+0xac>)
 80034bc:	2200      	movs	r2, #0
 80034be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034c0:	4b19      	ldr	r3, [pc, #100]	@ (8003528 <MX_TIM2_Init+0xac>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80034c6:	4818      	ldr	r0, [pc, #96]	@ (8003528 <MX_TIM2_Init+0xac>)
 80034c8:	f003 fa6a 	bl	80069a0 <HAL_TIM_PWM_Init>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80034d2:	f000 fa94 	bl	80039fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034d6:	2300      	movs	r3, #0
 80034d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034da:	2300      	movs	r3, #0
 80034dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80034de:	f107 0320 	add.w	r3, r7, #32
 80034e2:	4619      	mov	r1, r3
 80034e4:	4810      	ldr	r0, [pc, #64]	@ (8003528 <MX_TIM2_Init+0xac>)
 80034e6:	f003 fdc9 	bl	800707c <HAL_TIMEx_MasterConfigSynchronization>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80034f0:	f000 fa85 	bl	80039fe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034f4:	2360      	movs	r3, #96	@ 0x60
 80034f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80034f8:	2300      	movs	r3, #0
 80034fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034fc:	2300      	movs	r3, #0
 80034fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003500:	2300      	movs	r3, #0
 8003502:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003504:	1d3b      	adds	r3, r7, #4
 8003506:	2200      	movs	r2, #0
 8003508:	4619      	mov	r1, r3
 800350a:	4807      	ldr	r0, [pc, #28]	@ (8003528 <MX_TIM2_Init+0xac>)
 800350c:	f003 fa98 	bl	8006a40 <HAL_TIM_PWM_ConfigChannel>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8003516:	f000 fa72 	bl	80039fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800351a:	4803      	ldr	r0, [pc, #12]	@ (8003528 <MX_TIM2_Init+0xac>)
 800351c:	f000 fc42 	bl	8003da4 <HAL_TIM_MspPostInit>

}
 8003520:	bf00      	nop
 8003522:	3728      	adds	r7, #40	@ 0x28
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	20025ea0 	.word	0x20025ea0

0800352c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b08e      	sub	sp, #56	@ 0x38
 8003530:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003532:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003536:	2200      	movs	r2, #0
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	605a      	str	r2, [r3, #4]
 800353c:	609a      	str	r2, [r3, #8]
 800353e:	60da      	str	r2, [r3, #12]
 8003540:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003542:	2300      	movs	r3, #0
 8003544:	623b      	str	r3, [r7, #32]
 8003546:	4bb2      	ldr	r3, [pc, #712]	@ (8003810 <MX_GPIO_Init+0x2e4>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354a:	4ab1      	ldr	r2, [pc, #708]	@ (8003810 <MX_GPIO_Init+0x2e4>)
 800354c:	f043 0304 	orr.w	r3, r3, #4
 8003550:	6313      	str	r3, [r2, #48]	@ 0x30
 8003552:	4baf      	ldr	r3, [pc, #700]	@ (8003810 <MX_GPIO_Init+0x2e4>)
 8003554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003556:	f003 0304 	and.w	r3, r3, #4
 800355a:	623b      	str	r3, [r7, #32]
 800355c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800355e:	2300      	movs	r3, #0
 8003560:	61fb      	str	r3, [r7, #28]
 8003562:	4bab      	ldr	r3, [pc, #684]	@ (8003810 <MX_GPIO_Init+0x2e4>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003566:	4aaa      	ldr	r2, [pc, #680]	@ (8003810 <MX_GPIO_Init+0x2e4>)
 8003568:	f043 0320 	orr.w	r3, r3, #32
 800356c:	6313      	str	r3, [r2, #48]	@ 0x30
 800356e:	4ba8      	ldr	r3, [pc, #672]	@ (8003810 <MX_GPIO_Init+0x2e4>)
 8003570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003572:	f003 0320 	and.w	r3, r3, #32
 8003576:	61fb      	str	r3, [r7, #28]
 8003578:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800357a:	2300      	movs	r3, #0
 800357c:	61bb      	str	r3, [r7, #24]
 800357e:	4ba4      	ldr	r3, [pc, #656]	@ (8003810 <MX_GPIO_Init+0x2e4>)
 8003580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003582:	4aa3      	ldr	r2, [pc, #652]	@ (8003810 <MX_GPIO_Init+0x2e4>)
 8003584:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003588:	6313      	str	r3, [r2, #48]	@ 0x30
 800358a:	4ba1      	ldr	r3, [pc, #644]	@ (8003810 <MX_GPIO_Init+0x2e4>)
 800358c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003592:	61bb      	str	r3, [r7, #24]
 8003594:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003596:	2300      	movs	r3, #0
 8003598:	617b      	str	r3, [r7, #20]
 800359a:	4b9d      	ldr	r3, [pc, #628]	@ (8003810 <MX_GPIO_Init+0x2e4>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359e:	4a9c      	ldr	r2, [pc, #624]	@ (8003810 <MX_GPIO_Init+0x2e4>)
 80035a0:	f043 0301 	orr.w	r3, r3, #1
 80035a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80035a6:	4b9a      	ldr	r3, [pc, #616]	@ (8003810 <MX_GPIO_Init+0x2e4>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	617b      	str	r3, [r7, #20]
 80035b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035b2:	2300      	movs	r3, #0
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	4b96      	ldr	r3, [pc, #600]	@ (8003810 <MX_GPIO_Init+0x2e4>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ba:	4a95      	ldr	r2, [pc, #596]	@ (8003810 <MX_GPIO_Init+0x2e4>)
 80035bc:	f043 0302 	orr.w	r3, r3, #2
 80035c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80035c2:	4b93      	ldr	r3, [pc, #588]	@ (8003810 <MX_GPIO_Init+0x2e4>)
 80035c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	613b      	str	r3, [r7, #16]
 80035cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80035ce:	2300      	movs	r3, #0
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	4b8f      	ldr	r3, [pc, #572]	@ (8003810 <MX_GPIO_Init+0x2e4>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d6:	4a8e      	ldr	r2, [pc, #568]	@ (8003810 <MX_GPIO_Init+0x2e4>)
 80035d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80035de:	4b8c      	ldr	r3, [pc, #560]	@ (8003810 <MX_GPIO_Init+0x2e4>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80035ea:	2300      	movs	r3, #0
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	4b88      	ldr	r3, [pc, #544]	@ (8003810 <MX_GPIO_Init+0x2e4>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f2:	4a87      	ldr	r2, [pc, #540]	@ (8003810 <MX_GPIO_Init+0x2e4>)
 80035f4:	f043 0310 	orr.w	r3, r3, #16
 80035f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80035fa:	4b85      	ldr	r3, [pc, #532]	@ (8003810 <MX_GPIO_Init+0x2e4>)
 80035fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fe:	f003 0310 	and.w	r3, r3, #16
 8003602:	60bb      	str	r3, [r7, #8]
 8003604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003606:	2300      	movs	r3, #0
 8003608:	607b      	str	r3, [r7, #4]
 800360a:	4b81      	ldr	r3, [pc, #516]	@ (8003810 <MX_GPIO_Init+0x2e4>)
 800360c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360e:	4a80      	ldr	r2, [pc, #512]	@ (8003810 <MX_GPIO_Init+0x2e4>)
 8003610:	f043 0308 	orr.w	r3, r3, #8
 8003614:	6313      	str	r3, [r2, #48]	@ 0x30
 8003616:	4b7e      	ldr	r3, [pc, #504]	@ (8003810 <MX_GPIO_Init+0x2e4>)
 8003618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	607b      	str	r3, [r7, #4]
 8003620:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8003622:	2200      	movs	r2, #0
 8003624:	2116      	movs	r1, #22
 8003626:	487b      	ldr	r0, [pc, #492]	@ (8003814 <MX_GPIO_Init+0x2e8>)
 8003628:	f001 f8b6 	bl	8004798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800362c:	2200      	movs	r2, #0
 800362e:	2180      	movs	r1, #128	@ 0x80
 8003630:	4879      	ldr	r0, [pc, #484]	@ (8003818 <MX_GPIO_Init+0x2ec>)
 8003632:	f001 f8b1 	bl	8004798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8003636:	2200      	movs	r2, #0
 8003638:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800363c:	4877      	ldr	r0, [pc, #476]	@ (800381c <MX_GPIO_Init+0x2f0>)
 800363e:	f001 f8ab 	bl	8004798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8003642:	2200      	movs	r2, #0
 8003644:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8003648:	4875      	ldr	r0, [pc, #468]	@ (8003820 <MX_GPIO_Init+0x2f4>)
 800364a:	f001 f8a5 	bl	8004798 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800364e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8003652:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003654:	2302      	movs	r3, #2
 8003656:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003658:	2300      	movs	r3, #0
 800365a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800365c:	2303      	movs	r3, #3
 800365e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003660:	230c      	movs	r3, #12
 8003662:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003664:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003668:	4619      	mov	r1, r3
 800366a:	486e      	ldr	r0, [pc, #440]	@ (8003824 <MX_GPIO_Init+0x2f8>)
 800366c:	f000 fdc4 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8003670:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003674:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003676:	2302      	movs	r3, #2
 8003678:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367a:	2300      	movs	r3, #0
 800367c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800367e:	2300      	movs	r3, #0
 8003680:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003682:	230e      	movs	r3, #14
 8003684:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003686:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800368a:	4619      	mov	r1, r3
 800368c:	4865      	ldr	r0, [pc, #404]	@ (8003824 <MX_GPIO_Init+0x2f8>)
 800368e:	f000 fdb3 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8003692:	2301      	movs	r3, #1
 8003694:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003696:	2302      	movs	r3, #2
 8003698:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800369a:	2300      	movs	r3, #0
 800369c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800369e:	2303      	movs	r3, #3
 80036a0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80036a2:	230c      	movs	r3, #12
 80036a4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80036a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036aa:	4619      	mov	r1, r3
 80036ac:	4859      	ldr	r0, [pc, #356]	@ (8003814 <MX_GPIO_Init+0x2e8>)
 80036ae:	f000 fda3 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80036b2:	2316      	movs	r3, #22
 80036b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036b6:	2301      	movs	r3, #1
 80036b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ba:	2300      	movs	r3, #0
 80036bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036be:	2300      	movs	r3, #0
 80036c0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036c6:	4619      	mov	r1, r3
 80036c8:	4852      	ldr	r0, [pc, #328]	@ (8003814 <MX_GPIO_Init+0x2e8>)
 80036ca:	f000 fd95 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80036ce:	2301      	movs	r3, #1
 80036d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80036d2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80036d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80036d8:	2302      	movs	r3, #2
 80036da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036e0:	4619      	mov	r1, r3
 80036e2:	484d      	ldr	r0, [pc, #308]	@ (8003818 <MX_GPIO_Init+0x2ec>)
 80036e4:	f000 fd88 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80036e8:	f248 0306 	movw	r3, #32774	@ 0x8006
 80036ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80036ee:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80036f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f4:	2300      	movs	r3, #0
 80036f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036fc:	4619      	mov	r1, r3
 80036fe:	4846      	ldr	r0, [pc, #280]	@ (8003818 <MX_GPIO_Init+0x2ec>)
 8003700:	f000 fd7a 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8003704:	f641 0358 	movw	r3, #6232	@ 0x1858
 8003708:	627b      	str	r3, [r7, #36]	@ 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800370a:	2302      	movs	r3, #2
 800370c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370e:	2300      	movs	r3, #0
 8003710:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003712:	2300      	movs	r3, #0
 8003714:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003716:	230e      	movs	r3, #14
 8003718:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800371a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800371e:	4619      	mov	r1, r3
 8003720:	483d      	ldr	r0, [pc, #244]	@ (8003818 <MX_GPIO_Init+0x2ec>)
 8003722:	f000 fd69 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8003726:	2380      	movs	r3, #128	@ 0x80
 8003728:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800372a:	2301      	movs	r3, #1
 800372c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372e:	2300      	movs	r3, #0
 8003730:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003732:	2300      	movs	r3, #0
 8003734:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8003736:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800373a:	4619      	mov	r1, r3
 800373c:	4836      	ldr	r0, [pc, #216]	@ (8003818 <MX_GPIO_Init+0x2ec>)
 800373e:	f000 fd5b 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8003742:	2320      	movs	r3, #32
 8003744:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003746:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800374a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374c:	2300      	movs	r3, #0
 800374e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8003750:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003754:	4619      	mov	r1, r3
 8003756:	482f      	ldr	r0, [pc, #188]	@ (8003814 <MX_GPIO_Init+0x2e8>)
 8003758:	f000 fd4e 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800375c:	2303      	movs	r3, #3
 800375e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003760:	2302      	movs	r3, #2
 8003762:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003764:	2300      	movs	r3, #0
 8003766:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003768:	2300      	movs	r3, #0
 800376a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800376c:	2309      	movs	r3, #9
 800376e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003770:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003774:	4619      	mov	r1, r3
 8003776:	482c      	ldr	r0, [pc, #176]	@ (8003828 <MX_GPIO_Init+0x2fc>)
 8003778:	f000 fd3e 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800377c:	2304      	movs	r3, #4
 800377e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003780:	2300      	movs	r3, #0
 8003782:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003784:	2300      	movs	r3, #0
 8003786:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003788:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800378c:	4619      	mov	r1, r3
 800378e:	4826      	ldr	r0, [pc, #152]	@ (8003828 <MX_GPIO_Init+0x2fc>)
 8003790:	f000 fd32 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8003794:	f248 1333 	movw	r3, #33075	@ 0x8133
 8003798:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800379a:	2302      	movs	r3, #2
 800379c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379e:	2300      	movs	r3, #0
 80037a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037a2:	2303      	movs	r3, #3
 80037a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80037a6:	230c      	movs	r3, #12
 80037a8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80037aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037ae:	4619      	mov	r1, r3
 80037b0:	481b      	ldr	r0, [pc, #108]	@ (8003820 <MX_GPIO_Init+0x2f4>)
 80037b2:	f000 fd21 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80037b6:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80037ba:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037bc:	2302      	movs	r3, #2
 80037be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c0:	2300      	movs	r3, #0
 80037c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037c4:	2303      	movs	r3, #3
 80037c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80037c8:	230c      	movs	r3, #12
 80037ca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80037cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037d0:	4619      	mov	r1, r3
 80037d2:	4816      	ldr	r0, [pc, #88]	@ (800382c <MX_GPIO_Init+0x300>)
 80037d4:	f000 fd10 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80037d8:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80037dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037de:	2302      	movs	r3, #2
 80037e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e2:	2300      	movs	r3, #0
 80037e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e6:	2300      	movs	r3, #0
 80037e8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80037ea:	230e      	movs	r3, #14
 80037ec:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037f2:	4619      	mov	r1, r3
 80037f4:	480c      	ldr	r0, [pc, #48]	@ (8003828 <MX_GPIO_Init+0x2fc>)
 80037f6:	f000 fcff 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80037fa:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80037fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003800:	2302      	movs	r3, #2
 8003802:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003804:	2300      	movs	r3, #0
 8003806:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003808:	2300      	movs	r3, #0
 800380a:	633b      	str	r3, [r7, #48]	@ 0x30
 800380c:	e010      	b.n	8003830 <MX_GPIO_Init+0x304>
 800380e:	bf00      	nop
 8003810:	40023800 	.word	0x40023800
 8003814:	40020800 	.word	0x40020800
 8003818:	40020000 	.word	0x40020000
 800381c:	40020c00 	.word	0x40020c00
 8003820:	40021800 	.word	0x40021800
 8003824:	40021400 	.word	0x40021400
 8003828:	40020400 	.word	0x40020400
 800382c:	40021000 	.word	0x40021000
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8003830:	230c      	movs	r3, #12
 8003832:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003834:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003838:	4619      	mov	r1, r3
 800383a:	485a      	ldr	r0, [pc, #360]	@ (80039a4 <MX_GPIO_Init+0x478>)
 800383c:	f000 fcdc 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8003840:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003844:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003846:	2300      	movs	r3, #0
 8003848:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384a:	2300      	movs	r3, #0
 800384c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800384e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003852:	4619      	mov	r1, r3
 8003854:	4853      	ldr	r0, [pc, #332]	@ (80039a4 <MX_GPIO_Init+0x478>)
 8003856:	f000 fccf 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800385a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800385e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003860:	2302      	movs	r3, #2
 8003862:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003864:	2300      	movs	r3, #0
 8003866:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003868:	2303      	movs	r3, #3
 800386a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800386c:	230c      	movs	r3, #12
 800386e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003870:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003874:	4619      	mov	r1, r3
 8003876:	484c      	ldr	r0, [pc, #304]	@ (80039a8 <MX_GPIO_Init+0x47c>)
 8003878:	f000 fcbe 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 800387c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003880:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003882:	2300      	movs	r3, #0
 8003884:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003886:	2300      	movs	r3, #0
 8003888:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800388a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800388e:	4619      	mov	r1, r3
 8003890:	4845      	ldr	r0, [pc, #276]	@ (80039a8 <MX_GPIO_Init+0x47c>)
 8003892:	f000 fcb1 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8003896:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800389a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800389c:	2301      	movs	r3, #1
 800389e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a0:	2300      	movs	r3, #0
 80038a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038a4:	2300      	movs	r3, #0
 80038a6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038ac:	4619      	mov	r1, r3
 80038ae:	483e      	ldr	r0, [pc, #248]	@ (80039a8 <MX_GPIO_Init+0x47c>)
 80038b0:	f000 fca2 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80038b4:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80038b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ba:	2302      	movs	r3, #2
 80038bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038be:	2300      	movs	r3, #0
 80038c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038c2:	2300      	movs	r3, #0
 80038c4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80038c6:	230e      	movs	r3, #14
 80038c8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80038ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038ce:	4619      	mov	r1, r3
 80038d0:	4836      	ldr	r0, [pc, #216]	@ (80039ac <MX_GPIO_Init+0x480>)
 80038d2:	f000 fc91 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80038d6:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80038da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038dc:	2302      	movs	r3, #2
 80038de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e0:	2300      	movs	r3, #0
 80038e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038e4:	2300      	movs	r3, #0
 80038e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80038e8:	230e      	movs	r3, #14
 80038ea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038f0:	4619      	mov	r1, r3
 80038f2:	482f      	ldr	r0, [pc, #188]	@ (80039b0 <MX_GPIO_Init+0x484>)
 80038f4:	f000 fc80 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80038f8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80038fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038fe:	2302      	movs	r3, #2
 8003900:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003902:	2300      	movs	r3, #0
 8003904:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003906:	2303      	movs	r3, #3
 8003908:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800390a:	2307      	movs	r3, #7
 800390c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800390e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003912:	4619      	mov	r1, r3
 8003914:	4827      	ldr	r0, [pc, #156]	@ (80039b4 <MX_GPIO_Init+0x488>)
 8003916:	f000 fc6f 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800391a:	2348      	movs	r3, #72	@ 0x48
 800391c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800391e:	2302      	movs	r3, #2
 8003920:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003922:	2300      	movs	r3, #0
 8003924:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003926:	2300      	movs	r3, #0
 8003928:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800392a:	230e      	movs	r3, #14
 800392c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800392e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003932:	4619      	mov	r1, r3
 8003934:	481c      	ldr	r0, [pc, #112]	@ (80039a8 <MX_GPIO_Init+0x47c>)
 8003936:	f000 fc5f 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800393a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800393e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003940:	2302      	movs	r3, #2
 8003942:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003944:	2300      	movs	r3, #0
 8003946:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003948:	2300      	movs	r3, #0
 800394a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800394c:	2309      	movs	r3, #9
 800394e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003950:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003954:	4619      	mov	r1, r3
 8003956:	4815      	ldr	r0, [pc, #84]	@ (80039ac <MX_GPIO_Init+0x480>)
 8003958:	f000 fc4e 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800395c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8003960:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003962:	2301      	movs	r3, #1
 8003964:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003966:	2300      	movs	r3, #0
 8003968:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800396a:	2300      	movs	r3, #0
 800396c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800396e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003972:	4619      	mov	r1, r3
 8003974:	480d      	ldr	r0, [pc, #52]	@ (80039ac <MX_GPIO_Init+0x480>)
 8003976:	f000 fc3f 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800397a:	2360      	movs	r3, #96	@ 0x60
 800397c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800397e:	2302      	movs	r3, #2
 8003980:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003982:	2300      	movs	r3, #0
 8003984:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003986:	2303      	movs	r3, #3
 8003988:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800398a:	230c      	movs	r3, #12
 800398c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800398e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003992:	4619      	mov	r1, r3
 8003994:	4803      	ldr	r0, [pc, #12]	@ (80039a4 <MX_GPIO_Init+0x478>)
 8003996:	f000 fc2f 	bl	80041f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800399a:	bf00      	nop
 800399c:	3738      	adds	r7, #56	@ 0x38
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40020400 	.word	0x40020400
 80039a8:	40020c00 	.word	0x40020c00
 80039ac:	40021800 	.word	0x40021800
 80039b0:	40020800 	.word	0x40020800
 80039b4:	40020000 	.word	0x40020000

080039b8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80039c0:	2001      	movs	r0, #1
 80039c2:	f003 fc42 	bl	800724a <osDelay>
 80039c6:	e7fb      	b.n	80039c0 <StartDefaultTask+0x8>

080039c8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80039d0:	2001      	movs	r0, #1
 80039d2:	f003 fc3a 	bl	800724a <osDelay>
 80039d6:	e7fb      	b.n	80039d0 <StartTask02+0x8>

080039d8 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
	int16_t y_rate;
	const int16_t threshold = 10;  //tweak based on testing and gameplay
 80039e0:	230a      	movs	r3, #10
 80039e2:	81fb      	strh	r3, [r7, #14]
  /* Infinite loop */
  for(;;)
  {
	osDelay(50);
 80039e4:	2032      	movs	r0, #50	@ 0x32
 80039e6:	f003 fc30 	bl	800724a <osDelay>
	y_rate = Gyro_Get_Velocity();
 80039ea:	f7fe f98d 	bl	8001d08 <Gyro_Get_Velocity>
 80039ee:	4603      	mov	r3, r0
 80039f0:	81bb      	strh	r3, [r7, #12]

	// Only print if the board acdtualy moves.
	if (y_rate > threshold || y_rate < -threshold)
 80039f2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80039f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80039fa:	429a      	cmp	r2, r3
	osDelay(50);
 80039fc:	e7f2      	b.n	80039e4 <StartTask04+0xc>

080039fe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039fe:	b480      	push	{r7}
 8003a00:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a02:	b672      	cpsid	i
}
 8003a04:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a06:	bf00      	nop
 8003a08:	e7fd      	b.n	8003a06 <Error_Handler+0x8>
	...

08003a0c <GPIO_Init>:
#include "pwm.h"

uint8_t duty_cycle = 0; // Start at 50% brightness
uint8_t pwm_counter = 0;

void GPIO_Init(void) {
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
    // Enable GPIOG clock
    RCC->AHB1ENR |= (1U << 6);
 8003a10:	4b0b      	ldr	r3, [pc, #44]	@ (8003a40 <GPIO_Init+0x34>)
 8003a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a14:	4a0a      	ldr	r2, [pc, #40]	@ (8003a40 <GPIO_Init+0x34>)
 8003a16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a1a:	6313      	str	r3, [r2, #48]	@ 0x30

    // PG13 and PG14 as output
    GPIOG->MODER &= ~((3U << (13 * 2)) | (3U << (14 * 2)));
 8003a1c:	4b09      	ldr	r3, [pc, #36]	@ (8003a44 <GPIO_Init+0x38>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a08      	ldr	r2, [pc, #32]	@ (8003a44 <GPIO_Init+0x38>)
 8003a22:	f023 5370 	bic.w	r3, r3, #1006632960	@ 0x3c000000
 8003a26:	6013      	str	r3, [r2, #0]
    GPIOG->MODER |=  ((1U << (13 * 2)) | (1U << (14 * 2)));
 8003a28:	4b06      	ldr	r3, [pc, #24]	@ (8003a44 <GPIO_Init+0x38>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a05      	ldr	r2, [pc, #20]	@ (8003a44 <GPIO_Init+0x38>)
 8003a2e:	f043 53a0 	orr.w	r3, r3, #335544320	@ 0x14000000
 8003a32:	6013      	str	r3, [r2, #0]


}
 8003a34:	bf00      	nop
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40023800 	.word	0x40023800
 8003a44:	40021800 	.word	0x40021800

08003a48 <TIM2_Init>:

void TIM2_Init(void) {
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
    // Enable TIM2 clock
    RCC->APB1ENR |= (1U << 0);
 8003a4c:	4b14      	ldr	r3, [pc, #80]	@ (8003aa0 <TIM2_Init+0x58>)
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a50:	4a13      	ldr	r2, [pc, #76]	@ (8003aa0 <TIM2_Init+0x58>)
 8003a52:	f043 0301 	orr.w	r3, r3, #1
 8003a56:	6413      	str	r3, [r2, #64]	@ 0x40

    // Configure Timer 2 for 20 kHz PWM
    TIM2->PSC = 8 - 1;   // Clock = 16MHz / 8 = 2MHz
 8003a58:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003a5c:	2207      	movs	r2, #7
 8003a5e:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 100 - 1; // 2MHz / 100 = 20 kHz
 8003a60:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003a64:	2263      	movs	r2, #99	@ 0x63
 8003a66:	62da      	str	r2, [r3, #44]	@ 0x2c
     * You can change the prescaler value and the ARR value if you want,
     * just make sure the frequency is fast enough that you can't see it blinking.
     */

    // Enable update interrupt
    TIM2->DIER |= (1U << 0);
 8003a68:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003a72:	f043 0301 	orr.w	r3, r3, #1
 8003a76:	60d3      	str	r3, [r2, #12]
    NVIC_ISER0 |= (1U << 28); // IRQ number for TIM2 is 28
 8003a78:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa4 <TIM2_Init+0x5c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a09      	ldr	r2, [pc, #36]	@ (8003aa4 <TIM2_Init+0x5c>)
 8003a7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a82:	6013      	str	r3, [r2, #0]

    // Start timer
    TIM2->CR1 |= (1U << 0);
 8003a84:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003a8e:	f043 0301 	orr.w	r3, r3, #1
 8003a92:	6013      	str	r3, [r2, #0]
}
 8003a94:	bf00      	nop
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40023800 	.word	0x40023800
 8003aa4:	e000e100 	.word	0xe000e100

08003aa8 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
    if (TIM2->SR & (1U << 0)) {  // Check for update interrupt
 8003aac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d027      	beq.n	8003b0a <TIM2_IRQHandler+0x62>
        TIM2->SR &= ~(1U << 0);  // Clear interrupt flag
 8003aba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003ac4:	f023 0301 	bic.w	r3, r3, #1
 8003ac8:	6113      	str	r3, [r2, #16]
        pwm_counter++;
 8003aca:	4b12      	ldr	r3, [pc, #72]	@ (8003b14 <TIM2_IRQHandler+0x6c>)
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	b2da      	uxtb	r2, r3
 8003ad2:	4b10      	ldr	r3, [pc, #64]	@ (8003b14 <TIM2_IRQHandler+0x6c>)
 8003ad4:	701a      	strb	r2, [r3, #0]

        if (pwm_counter >= 100)
 8003ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8003b14 <TIM2_IRQHandler+0x6c>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	2b63      	cmp	r3, #99	@ 0x63
 8003adc:	d902      	bls.n	8003ae4 <TIM2_IRQHandler+0x3c>
            pwm_counter = 0;
 8003ade:	4b0d      	ldr	r3, [pc, #52]	@ (8003b14 <TIM2_IRQHandler+0x6c>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	701a      	strb	r2, [r3, #0]

        if (pwm_counter < duty_cycle) {
 8003ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8003b14 <TIM2_IRQHandler+0x6c>)
 8003ae6:	781a      	ldrb	r2, [r3, #0]
 8003ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8003b18 <TIM2_IRQHandler+0x70>)
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d206      	bcs.n	8003afe <TIM2_IRQHandler+0x56>
            LED_ON();
 8003af0:	4b0a      	ldr	r3, [pc, #40]	@ (8003b1c <TIM2_IRQHandler+0x74>)
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	4a09      	ldr	r2, [pc, #36]	@ (8003b1c <TIM2_IRQHandler+0x74>)
 8003af6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003afa:	6153      	str	r3, [r2, #20]
        } else {
            LED_OFF();
        }
    }
}
 8003afc:	e005      	b.n	8003b0a <TIM2_IRQHandler+0x62>
            LED_OFF();
 8003afe:	4b07      	ldr	r3, [pc, #28]	@ (8003b1c <TIM2_IRQHandler+0x74>)
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	4a06      	ldr	r2, [pc, #24]	@ (8003b1c <TIM2_IRQHandler+0x74>)
 8003b04:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b08:	6153      	str	r3, [r2, #20]
}
 8003b0a:	bf00      	nop
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	20025ef9 	.word	0x20025ef9
 8003b18:	20025ef8 	.word	0x20025ef8
 8003b1c:	40021800 	.word	0x40021800

08003b20 <set_brightness>:

void set_brightness(uint8_t brightness) {
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	4603      	mov	r3, r0
 8003b28:	71fb      	strb	r3, [r7, #7]
    if (brightness > 100) {
 8003b2a:	79fb      	ldrb	r3, [r7, #7]
 8003b2c:	2b64      	cmp	r3, #100	@ 0x64
 8003b2e:	d901      	bls.n	8003b34 <set_brightness+0x14>
        brightness = 100;  // Ensure brightness is within range
 8003b30:	2364      	movs	r3, #100	@ 0x64
 8003b32:	71fb      	strb	r3, [r7, #7]
    }
    duty_cycle = brightness;  // Set the desired brightness
 8003b34:	4a04      	ldr	r2, [pc, #16]	@ (8003b48 <set_brightness+0x28>)
 8003b36:	79fb      	ldrb	r3, [r7, #7]
 8003b38:	7013      	strb	r3, [r2, #0]
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	20025ef8 	.word	0x20025ef8

08003b4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b52:	2300      	movs	r3, #0
 8003b54:	607b      	str	r3, [r7, #4]
 8003b56:	4b12      	ldr	r3, [pc, #72]	@ (8003ba0 <HAL_MspInit+0x54>)
 8003b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b5a:	4a11      	ldr	r2, [pc, #68]	@ (8003ba0 <HAL_MspInit+0x54>)
 8003b5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b60:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b62:	4b0f      	ldr	r3, [pc, #60]	@ (8003ba0 <HAL_MspInit+0x54>)
 8003b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b6a:	607b      	str	r3, [r7, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b6e:	2300      	movs	r3, #0
 8003b70:	603b      	str	r3, [r7, #0]
 8003b72:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba0 <HAL_MspInit+0x54>)
 8003b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b76:	4a0a      	ldr	r2, [pc, #40]	@ (8003ba0 <HAL_MspInit+0x54>)
 8003b78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b7e:	4b08      	ldr	r3, [pc, #32]	@ (8003ba0 <HAL_MspInit+0x54>)
 8003b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b86:	603b      	str	r3, [r7, #0]
 8003b88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	210f      	movs	r1, #15
 8003b8e:	f06f 0001 	mvn.w	r0, #1
 8003b92:	f000 fb08 	bl	80041a6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b96:	bf00      	nop
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	40023800 	.word	0x40023800

08003ba4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b08a      	sub	sp, #40	@ 0x28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bac:	f107 0314 	add.w	r3, r7, #20
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	605a      	str	r2, [r3, #4]
 8003bb6:	609a      	str	r2, [r3, #8]
 8003bb8:	60da      	str	r2, [r3, #12]
 8003bba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a29      	ldr	r2, [pc, #164]	@ (8003c68 <HAL_I2C_MspInit+0xc4>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d14b      	bne.n	8003c5e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	613b      	str	r3, [r7, #16]
 8003bca:	4b28      	ldr	r3, [pc, #160]	@ (8003c6c <HAL_I2C_MspInit+0xc8>)
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bce:	4a27      	ldr	r2, [pc, #156]	@ (8003c6c <HAL_I2C_MspInit+0xc8>)
 8003bd0:	f043 0304 	orr.w	r3, r3, #4
 8003bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bd6:	4b25      	ldr	r3, [pc, #148]	@ (8003c6c <HAL_I2C_MspInit+0xc8>)
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bda:	f003 0304 	and.w	r3, r3, #4
 8003bde:	613b      	str	r3, [r7, #16]
 8003be0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003be2:	2300      	movs	r3, #0
 8003be4:	60fb      	str	r3, [r7, #12]
 8003be6:	4b21      	ldr	r3, [pc, #132]	@ (8003c6c <HAL_I2C_MspInit+0xc8>)
 8003be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bea:	4a20      	ldr	r2, [pc, #128]	@ (8003c6c <HAL_I2C_MspInit+0xc8>)
 8003bec:	f043 0301 	orr.w	r3, r3, #1
 8003bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8003c6c <HAL_I2C_MspInit+0xc8>)
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	60fb      	str	r3, [r7, #12]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8003bfe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c04:	2312      	movs	r3, #18
 8003c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003c10:	2304      	movs	r3, #4
 8003c12:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003c14:	f107 0314 	add.w	r3, r7, #20
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4815      	ldr	r0, [pc, #84]	@ (8003c70 <HAL_I2C_MspInit+0xcc>)
 8003c1c:	f000 faec 	bl	80041f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003c20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c26:	2312      	movs	r3, #18
 8003c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003c32:	2304      	movs	r3, #4
 8003c34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8003c36:	f107 0314 	add.w	r3, r7, #20
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	480d      	ldr	r0, [pc, #52]	@ (8003c74 <HAL_I2C_MspInit+0xd0>)
 8003c3e:	f000 fadb 	bl	80041f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003c42:	2300      	movs	r3, #0
 8003c44:	60bb      	str	r3, [r7, #8]
 8003c46:	4b09      	ldr	r3, [pc, #36]	@ (8003c6c <HAL_I2C_MspInit+0xc8>)
 8003c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4a:	4a08      	ldr	r2, [pc, #32]	@ (8003c6c <HAL_I2C_MspInit+0xc8>)
 8003c4c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003c50:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c52:	4b06      	ldr	r3, [pc, #24]	@ (8003c6c <HAL_I2C_MspInit+0xc8>)
 8003c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c5a:	60bb      	str	r3, [r7, #8]
 8003c5c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8003c5e:	bf00      	nop
 8003c60:	3728      	adds	r7, #40	@ 0x28
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	40005c00 	.word	0x40005c00
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	40020800 	.word	0x40020800
 8003c74:	40020000 	.word	0x40020000

08003c78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b08a      	sub	sp, #40	@ 0x28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c80:	f107 0314 	add.w	r3, r7, #20
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	605a      	str	r2, [r3, #4]
 8003c8a:	609a      	str	r2, [r3, #8]
 8003c8c:	60da      	str	r2, [r3, #12]
 8003c8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a21      	ldr	r2, [pc, #132]	@ (8003d1c <HAL_SPI_MspInit+0xa4>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d13c      	bne.n	8003d14 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	613b      	str	r3, [r7, #16]
 8003c9e:	4b20      	ldr	r3, [pc, #128]	@ (8003d20 <HAL_SPI_MspInit+0xa8>)
 8003ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca2:	4a1f      	ldr	r2, [pc, #124]	@ (8003d20 <HAL_SPI_MspInit+0xa8>)
 8003ca4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ca8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003caa:	4b1d      	ldr	r3, [pc, #116]	@ (8003d20 <HAL_SPI_MspInit+0xa8>)
 8003cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cb2:	613b      	str	r3, [r7, #16]
 8003cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60fb      	str	r3, [r7, #12]
 8003cba:	4b19      	ldr	r3, [pc, #100]	@ (8003d20 <HAL_SPI_MspInit+0xa8>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cbe:	4a18      	ldr	r2, [pc, #96]	@ (8003d20 <HAL_SPI_MspInit+0xa8>)
 8003cc0:	f043 0320 	orr.w	r3, r3, #32
 8003cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cc6:	4b16      	ldr	r3, [pc, #88]	@ (8003d20 <HAL_SPI_MspInit+0xa8>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cca:	f003 0320 	and.w	r3, r3, #32
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003cd2:	2380      	movs	r3, #128	@ 0x80
 8003cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003ce2:	2305      	movs	r3, #5
 8003ce4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003ce6:	f107 0314 	add.w	r3, r7, #20
 8003cea:	4619      	mov	r1, r3
 8003cec:	480d      	ldr	r0, [pc, #52]	@ (8003d24 <HAL_SPI_MspInit+0xac>)
 8003cee:	f000 fa83 	bl	80041f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8003cf2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d00:	2300      	movs	r3, #0
 8003d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003d04:	2305      	movs	r3, #5
 8003d06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003d08:	f107 0314 	add.w	r3, r7, #20
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	4805      	ldr	r0, [pc, #20]	@ (8003d24 <HAL_SPI_MspInit+0xac>)
 8003d10:	f000 fa72 	bl	80041f8 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8003d14:	bf00      	nop
 8003d16:	3728      	adds	r7, #40	@ 0x28
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	40015000 	.word	0x40015000
 8003d20:	40023800 	.word	0x40023800
 8003d24:	40021400 	.word	0x40021400

08003d28 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a08      	ldr	r2, [pc, #32]	@ (8003d58 <HAL_SPI_MspDeInit+0x30>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d10a      	bne.n	8003d50 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8003d3a:	4b08      	ldr	r3, [pc, #32]	@ (8003d5c <HAL_SPI_MspDeInit+0x34>)
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d3e:	4a07      	ldr	r2, [pc, #28]	@ (8003d5c <HAL_SPI_MspDeInit+0x34>)
 8003d40:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003d44:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8003d46:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8003d4a:	4805      	ldr	r0, [pc, #20]	@ (8003d60 <HAL_SPI_MspDeInit+0x38>)
 8003d4c:	f000 fc00 	bl	8004550 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8003d50:	bf00      	nop
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	40015000 	.word	0x40015000
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	40021400 	.word	0x40021400

08003d64 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d74:	d10d      	bne.n	8003d92 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d76:	2300      	movs	r3, #0
 8003d78:	60fb      	str	r3, [r7, #12]
 8003d7a:	4b09      	ldr	r3, [pc, #36]	@ (8003da0 <HAL_TIM_PWM_MspInit+0x3c>)
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d7e:	4a08      	ldr	r2, [pc, #32]	@ (8003da0 <HAL_TIM_PWM_MspInit+0x3c>)
 8003d80:	f043 0301 	orr.w	r3, r3, #1
 8003d84:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d86:	4b06      	ldr	r3, [pc, #24]	@ (8003da0 <HAL_TIM_PWM_MspInit+0x3c>)
 8003d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8003d92:	bf00      	nop
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	40023800 	.word	0x40023800

08003da4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b088      	sub	sp, #32
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dac:	f107 030c 	add.w	r3, r7, #12
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	605a      	str	r2, [r3, #4]
 8003db6:	609a      	str	r2, [r3, #8]
 8003db8:	60da      	str	r2, [r3, #12]
 8003dba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dc4:	d11d      	bne.n	8003e02 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60bb      	str	r3, [r7, #8]
 8003dca:	4b10      	ldr	r3, [pc, #64]	@ (8003e0c <HAL_TIM_MspPostInit+0x68>)
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dce:	4a0f      	ldr	r2, [pc, #60]	@ (8003e0c <HAL_TIM_MspPostInit+0x68>)
 8003dd0:	f043 0301 	orr.w	r3, r3, #1
 8003dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8003e0c <HAL_TIM_MspPostInit+0x68>)
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	60bb      	str	r3, [r7, #8]
 8003de0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003de2:	2320      	movs	r3, #32
 8003de4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003de6:	2302      	movs	r3, #2
 8003de8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dea:	2300      	movs	r3, #0
 8003dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dee:	2300      	movs	r3, #0
 8003df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003df2:	2301      	movs	r3, #1
 8003df4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003df6:	f107 030c 	add.w	r3, r7, #12
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	4804      	ldr	r0, [pc, #16]	@ (8003e10 <HAL_TIM_MspPostInit+0x6c>)
 8003dfe:	f000 f9fb 	bl	80041f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003e02:	bf00      	nop
 8003e04:	3720      	adds	r7, #32
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	40020000 	.word	0x40020000

08003e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003e18:	bf00      	nop
 8003e1a:	e7fd      	b.n	8003e18 <NMI_Handler+0x4>

08003e1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e20:	bf00      	nop
 8003e22:	e7fd      	b.n	8003e20 <HardFault_Handler+0x4>

08003e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e28:	bf00      	nop
 8003e2a:	e7fd      	b.n	8003e28 <MemManage_Handler+0x4>

08003e2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e30:	bf00      	nop
 8003e32:	e7fd      	b.n	8003e30 <BusFault_Handler+0x4>

08003e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e38:	bf00      	nop
 8003e3a:	e7fd      	b.n	8003e38 <UsageFault_Handler+0x4>

08003e3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e40:	bf00      	nop
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e4e:	f000 f8cd 	bl	8003fec <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003e52:	f003 ff89 	bl	8007d68 <xTaskGetSchedulerState>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d001      	beq.n	8003e60 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003e5c:	f004 f9cc 	bl	80081f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e60:	bf00      	nop
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e6c:	4a14      	ldr	r2, [pc, #80]	@ (8003ec0 <_sbrk+0x5c>)
 8003e6e:	4b15      	ldr	r3, [pc, #84]	@ (8003ec4 <_sbrk+0x60>)
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e78:	4b13      	ldr	r3, [pc, #76]	@ (8003ec8 <_sbrk+0x64>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d102      	bne.n	8003e86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e80:	4b11      	ldr	r3, [pc, #68]	@ (8003ec8 <_sbrk+0x64>)
 8003e82:	4a12      	ldr	r2, [pc, #72]	@ (8003ecc <_sbrk+0x68>)
 8003e84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e86:	4b10      	ldr	r3, [pc, #64]	@ (8003ec8 <_sbrk+0x64>)
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d207      	bcs.n	8003ea4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e94:	f005 f8be 	bl	8009014 <__errno>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	220c      	movs	r2, #12
 8003e9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003ea2:	e009      	b.n	8003eb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ea4:	4b08      	ldr	r3, [pc, #32]	@ (8003ec8 <_sbrk+0x64>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003eaa:	4b07      	ldr	r3, [pc, #28]	@ (8003ec8 <_sbrk+0x64>)
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	4a05      	ldr	r2, [pc, #20]	@ (8003ec8 <_sbrk+0x64>)
 8003eb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3718      	adds	r7, #24
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	20030000 	.word	0x20030000
 8003ec4:	00000400 	.word	0x00000400
 8003ec8:	20025efc 	.word	0x20025efc
 8003ecc:	20029e50 	.word	0x20029e50

08003ed0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ed4:	4b06      	ldr	r3, [pc, #24]	@ (8003ef0 <SystemInit+0x20>)
 8003ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eda:	4a05      	ldr	r2, [pc, #20]	@ (8003ef0 <SystemInit+0x20>)
 8003edc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003ee0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ee4:	bf00      	nop
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	e000ed00 	.word	0xe000ed00

08003ef4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003ef4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003f2c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003ef8:	f7ff ffea 	bl	8003ed0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003efc:	480c      	ldr	r0, [pc, #48]	@ (8003f30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003efe:	490d      	ldr	r1, [pc, #52]	@ (8003f34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003f00:	4a0d      	ldr	r2, [pc, #52]	@ (8003f38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f04:	e002      	b.n	8003f0c <LoopCopyDataInit>

08003f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f0a:	3304      	adds	r3, #4

08003f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f10:	d3f9      	bcc.n	8003f06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f12:	4a0a      	ldr	r2, [pc, #40]	@ (8003f3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003f14:	4c0a      	ldr	r4, [pc, #40]	@ (8003f40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f18:	e001      	b.n	8003f1e <LoopFillZerobss>

08003f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f1c:	3204      	adds	r2, #4

08003f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f20:	d3fb      	bcc.n	8003f1a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003f22:	f005 f87d 	bl	8009020 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f26:	f7ff f8e5 	bl	80030f4 <main>
  bx  lr    
 8003f2a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003f2c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003f30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f34:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8003f38:	0800b254 	.word	0x0800b254
  ldr r2, =_sbss
 8003f3c:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8003f40:	20029e50 	.word	0x20029e50

08003f44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f44:	e7fe      	b.n	8003f44 <ADC_IRQHandler>
	...

08003f48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8003f88 <HAL_Init+0x40>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a0d      	ldr	r2, [pc, #52]	@ (8003f88 <HAL_Init+0x40>)
 8003f52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f58:	4b0b      	ldr	r3, [pc, #44]	@ (8003f88 <HAL_Init+0x40>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a0a      	ldr	r2, [pc, #40]	@ (8003f88 <HAL_Init+0x40>)
 8003f5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f64:	4b08      	ldr	r3, [pc, #32]	@ (8003f88 <HAL_Init+0x40>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a07      	ldr	r2, [pc, #28]	@ (8003f88 <HAL_Init+0x40>)
 8003f6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f70:	2003      	movs	r0, #3
 8003f72:	f000 f90d 	bl	8004190 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f76:	200f      	movs	r0, #15
 8003f78:	f000 f808 	bl	8003f8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f7c:	f7ff fde6 	bl	8003b4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	40023c00 	.word	0x40023c00

08003f8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f94:	4b12      	ldr	r3, [pc, #72]	@ (8003fe0 <HAL_InitTick+0x54>)
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	4b12      	ldr	r3, [pc, #72]	@ (8003fe4 <HAL_InitTick+0x58>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 f917 	bl	80041de <HAL_SYSTICK_Config>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e00e      	b.n	8003fd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b0f      	cmp	r3, #15
 8003fbe:	d80a      	bhi.n	8003fd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003fc8:	f000 f8ed 	bl	80041a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003fcc:	4a06      	ldr	r2, [pc, #24]	@ (8003fe8 <HAL_InitTick+0x5c>)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	e000      	b.n	8003fd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	2000007c 	.word	0x2000007c
 8003fe4:	20000084 	.word	0x20000084
 8003fe8:	20000080 	.word	0x20000080

08003fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ff0:	4b06      	ldr	r3, [pc, #24]	@ (800400c <HAL_IncTick+0x20>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	4b06      	ldr	r3, [pc, #24]	@ (8004010 <HAL_IncTick+0x24>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	4a04      	ldr	r2, [pc, #16]	@ (8004010 <HAL_IncTick+0x24>)
 8003ffe:	6013      	str	r3, [r2, #0]
}
 8004000:	bf00      	nop
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	20000084 	.word	0x20000084
 8004010:	20025f00 	.word	0x20025f00

08004014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  return uwTick;
 8004018:	4b03      	ldr	r3, [pc, #12]	@ (8004028 <HAL_GetTick+0x14>)
 800401a:	681b      	ldr	r3, [r3, #0]
}
 800401c:	4618      	mov	r0, r3
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	20025f00 	.word	0x20025f00

0800402c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800403c:	4b0c      	ldr	r3, [pc, #48]	@ (8004070 <__NVIC_SetPriorityGrouping+0x44>)
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004048:	4013      	ands	r3, r2
 800404a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004054:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004058:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800405c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800405e:	4a04      	ldr	r2, [pc, #16]	@ (8004070 <__NVIC_SetPriorityGrouping+0x44>)
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	60d3      	str	r3, [r2, #12]
}
 8004064:	bf00      	nop
 8004066:	3714      	adds	r7, #20
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	e000ed00 	.word	0xe000ed00

08004074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004078:	4b04      	ldr	r3, [pc, #16]	@ (800408c <__NVIC_GetPriorityGrouping+0x18>)
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	0a1b      	lsrs	r3, r3, #8
 800407e:	f003 0307 	and.w	r3, r3, #7
}
 8004082:	4618      	mov	r0, r3
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	e000ed00 	.word	0xe000ed00

08004090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	4603      	mov	r3, r0
 8004098:	6039      	str	r1, [r7, #0]
 800409a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800409c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	db0a      	blt.n	80040ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	490c      	ldr	r1, [pc, #48]	@ (80040dc <__NVIC_SetPriority+0x4c>)
 80040aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ae:	0112      	lsls	r2, r2, #4
 80040b0:	b2d2      	uxtb	r2, r2
 80040b2:	440b      	add	r3, r1
 80040b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040b8:	e00a      	b.n	80040d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	4908      	ldr	r1, [pc, #32]	@ (80040e0 <__NVIC_SetPriority+0x50>)
 80040c0:	79fb      	ldrb	r3, [r7, #7]
 80040c2:	f003 030f 	and.w	r3, r3, #15
 80040c6:	3b04      	subs	r3, #4
 80040c8:	0112      	lsls	r2, r2, #4
 80040ca:	b2d2      	uxtb	r2, r2
 80040cc:	440b      	add	r3, r1
 80040ce:	761a      	strb	r2, [r3, #24]
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr
 80040dc:	e000e100 	.word	0xe000e100
 80040e0:	e000ed00 	.word	0xe000ed00

080040e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b089      	sub	sp, #36	@ 0x24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f003 0307 	and.w	r3, r3, #7
 80040f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	f1c3 0307 	rsb	r3, r3, #7
 80040fe:	2b04      	cmp	r3, #4
 8004100:	bf28      	it	cs
 8004102:	2304      	movcs	r3, #4
 8004104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	3304      	adds	r3, #4
 800410a:	2b06      	cmp	r3, #6
 800410c:	d902      	bls.n	8004114 <NVIC_EncodePriority+0x30>
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	3b03      	subs	r3, #3
 8004112:	e000      	b.n	8004116 <NVIC_EncodePriority+0x32>
 8004114:	2300      	movs	r3, #0
 8004116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004118:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	fa02 f303 	lsl.w	r3, r2, r3
 8004122:	43da      	mvns	r2, r3
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	401a      	ands	r2, r3
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800412c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	fa01 f303 	lsl.w	r3, r1, r3
 8004136:	43d9      	mvns	r1, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800413c:	4313      	orrs	r3, r2
         );
}
 800413e:	4618      	mov	r0, r3
 8004140:	3724      	adds	r7, #36	@ 0x24
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
	...

0800414c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	3b01      	subs	r3, #1
 8004158:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800415c:	d301      	bcc.n	8004162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800415e:	2301      	movs	r3, #1
 8004160:	e00f      	b.n	8004182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004162:	4a0a      	ldr	r2, [pc, #40]	@ (800418c <SysTick_Config+0x40>)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3b01      	subs	r3, #1
 8004168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800416a:	210f      	movs	r1, #15
 800416c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004170:	f7ff ff8e 	bl	8004090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004174:	4b05      	ldr	r3, [pc, #20]	@ (800418c <SysTick_Config+0x40>)
 8004176:	2200      	movs	r2, #0
 8004178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800417a:	4b04      	ldr	r3, [pc, #16]	@ (800418c <SysTick_Config+0x40>)
 800417c:	2207      	movs	r2, #7
 800417e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	e000e010 	.word	0xe000e010

08004190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f7ff ff47 	bl	800402c <__NVIC_SetPriorityGrouping>
}
 800419e:	bf00      	nop
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b086      	sub	sp, #24
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	4603      	mov	r3, r0
 80041ae:	60b9      	str	r1, [r7, #8]
 80041b0:	607a      	str	r2, [r7, #4]
 80041b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041b8:	f7ff ff5c 	bl	8004074 <__NVIC_GetPriorityGrouping>
 80041bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	68b9      	ldr	r1, [r7, #8]
 80041c2:	6978      	ldr	r0, [r7, #20]
 80041c4:	f7ff ff8e 	bl	80040e4 <NVIC_EncodePriority>
 80041c8:	4602      	mov	r2, r0
 80041ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041ce:	4611      	mov	r1, r2
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7ff ff5d 	bl	8004090 <__NVIC_SetPriority>
}
 80041d6:	bf00      	nop
 80041d8:	3718      	adds	r7, #24
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b082      	sub	sp, #8
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7ff ffb0 	bl	800414c <SysTick_Config>
 80041ec:	4603      	mov	r3, r0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
	...

080041f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b089      	sub	sp, #36	@ 0x24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004202:	2300      	movs	r3, #0
 8004204:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004206:	2300      	movs	r3, #0
 8004208:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800420a:	2300      	movs	r3, #0
 800420c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800420e:	2300      	movs	r3, #0
 8004210:	61fb      	str	r3, [r7, #28]
 8004212:	e177      	b.n	8004504 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004214:	2201      	movs	r2, #1
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	fa02 f303 	lsl.w	r3, r2, r3
 800421c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	4013      	ands	r3, r2
 8004226:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	429a      	cmp	r2, r3
 800422e:	f040 8166 	bne.w	80044fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f003 0303 	and.w	r3, r3, #3
 800423a:	2b01      	cmp	r3, #1
 800423c:	d005      	beq.n	800424a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004246:	2b02      	cmp	r3, #2
 8004248:	d130      	bne.n	80042ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	2203      	movs	r2, #3
 8004256:	fa02 f303 	lsl.w	r3, r2, r3
 800425a:	43db      	mvns	r3, r3
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	4013      	ands	r3, r2
 8004260:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	fa02 f303 	lsl.w	r3, r2, r3
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	4313      	orrs	r3, r2
 8004272:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004280:	2201      	movs	r2, #1
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	fa02 f303 	lsl.w	r3, r2, r3
 8004288:	43db      	mvns	r3, r3
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	4013      	ands	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	091b      	lsrs	r3, r3, #4
 8004296:	f003 0201 	and.w	r2, r3, #1
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	fa02 f303 	lsl.w	r3, r2, r3
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f003 0303 	and.w	r3, r3, #3
 80042b4:	2b03      	cmp	r3, #3
 80042b6:	d017      	beq.n	80042e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	2203      	movs	r2, #3
 80042c4:	fa02 f303 	lsl.w	r3, r2, r3
 80042c8:	43db      	mvns	r3, r3
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	4013      	ands	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	fa02 f303 	lsl.w	r3, r2, r3
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	4313      	orrs	r3, r2
 80042e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f003 0303 	and.w	r3, r3, #3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d123      	bne.n	800433c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	08da      	lsrs	r2, r3, #3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	3208      	adds	r2, #8
 80042fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004300:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	220f      	movs	r2, #15
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	43db      	mvns	r3, r3
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	4013      	ands	r3, r2
 8004316:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	691a      	ldr	r2, [r3, #16]
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	f003 0307 	and.w	r3, r3, #7
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	fa02 f303 	lsl.w	r3, r2, r3
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	4313      	orrs	r3, r2
 800432c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	08da      	lsrs	r2, r3, #3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	3208      	adds	r2, #8
 8004336:	69b9      	ldr	r1, [r7, #24]
 8004338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	2203      	movs	r2, #3
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	43db      	mvns	r3, r3
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	4013      	ands	r3, r2
 8004352:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f003 0203 	and.w	r2, r3, #3
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	fa02 f303 	lsl.w	r3, r2, r3
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	4313      	orrs	r3, r2
 8004368:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 80c0 	beq.w	80044fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800437e:	2300      	movs	r3, #0
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	4b66      	ldr	r3, [pc, #408]	@ (800451c <HAL_GPIO_Init+0x324>)
 8004384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004386:	4a65      	ldr	r2, [pc, #404]	@ (800451c <HAL_GPIO_Init+0x324>)
 8004388:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800438c:	6453      	str	r3, [r2, #68]	@ 0x44
 800438e:	4b63      	ldr	r3, [pc, #396]	@ (800451c <HAL_GPIO_Init+0x324>)
 8004390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004392:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004396:	60fb      	str	r3, [r7, #12]
 8004398:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800439a:	4a61      	ldr	r2, [pc, #388]	@ (8004520 <HAL_GPIO_Init+0x328>)
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	089b      	lsrs	r3, r3, #2
 80043a0:	3302      	adds	r3, #2
 80043a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	220f      	movs	r2, #15
 80043b2:	fa02 f303 	lsl.w	r3, r2, r3
 80043b6:	43db      	mvns	r3, r3
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	4013      	ands	r3, r2
 80043bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a58      	ldr	r2, [pc, #352]	@ (8004524 <HAL_GPIO_Init+0x32c>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d037      	beq.n	8004436 <HAL_GPIO_Init+0x23e>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a57      	ldr	r2, [pc, #348]	@ (8004528 <HAL_GPIO_Init+0x330>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d031      	beq.n	8004432 <HAL_GPIO_Init+0x23a>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a56      	ldr	r2, [pc, #344]	@ (800452c <HAL_GPIO_Init+0x334>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d02b      	beq.n	800442e <HAL_GPIO_Init+0x236>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a55      	ldr	r2, [pc, #340]	@ (8004530 <HAL_GPIO_Init+0x338>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d025      	beq.n	800442a <HAL_GPIO_Init+0x232>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a54      	ldr	r2, [pc, #336]	@ (8004534 <HAL_GPIO_Init+0x33c>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d01f      	beq.n	8004426 <HAL_GPIO_Init+0x22e>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a53      	ldr	r2, [pc, #332]	@ (8004538 <HAL_GPIO_Init+0x340>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d019      	beq.n	8004422 <HAL_GPIO_Init+0x22a>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a52      	ldr	r2, [pc, #328]	@ (800453c <HAL_GPIO_Init+0x344>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d013      	beq.n	800441e <HAL_GPIO_Init+0x226>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a51      	ldr	r2, [pc, #324]	@ (8004540 <HAL_GPIO_Init+0x348>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d00d      	beq.n	800441a <HAL_GPIO_Init+0x222>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a50      	ldr	r2, [pc, #320]	@ (8004544 <HAL_GPIO_Init+0x34c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d007      	beq.n	8004416 <HAL_GPIO_Init+0x21e>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a4f      	ldr	r2, [pc, #316]	@ (8004548 <HAL_GPIO_Init+0x350>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d101      	bne.n	8004412 <HAL_GPIO_Init+0x21a>
 800440e:	2309      	movs	r3, #9
 8004410:	e012      	b.n	8004438 <HAL_GPIO_Init+0x240>
 8004412:	230a      	movs	r3, #10
 8004414:	e010      	b.n	8004438 <HAL_GPIO_Init+0x240>
 8004416:	2308      	movs	r3, #8
 8004418:	e00e      	b.n	8004438 <HAL_GPIO_Init+0x240>
 800441a:	2307      	movs	r3, #7
 800441c:	e00c      	b.n	8004438 <HAL_GPIO_Init+0x240>
 800441e:	2306      	movs	r3, #6
 8004420:	e00a      	b.n	8004438 <HAL_GPIO_Init+0x240>
 8004422:	2305      	movs	r3, #5
 8004424:	e008      	b.n	8004438 <HAL_GPIO_Init+0x240>
 8004426:	2304      	movs	r3, #4
 8004428:	e006      	b.n	8004438 <HAL_GPIO_Init+0x240>
 800442a:	2303      	movs	r3, #3
 800442c:	e004      	b.n	8004438 <HAL_GPIO_Init+0x240>
 800442e:	2302      	movs	r3, #2
 8004430:	e002      	b.n	8004438 <HAL_GPIO_Init+0x240>
 8004432:	2301      	movs	r3, #1
 8004434:	e000      	b.n	8004438 <HAL_GPIO_Init+0x240>
 8004436:	2300      	movs	r3, #0
 8004438:	69fa      	ldr	r2, [r7, #28]
 800443a:	f002 0203 	and.w	r2, r2, #3
 800443e:	0092      	lsls	r2, r2, #2
 8004440:	4093      	lsls	r3, r2
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	4313      	orrs	r3, r2
 8004446:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004448:	4935      	ldr	r1, [pc, #212]	@ (8004520 <HAL_GPIO_Init+0x328>)
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	089b      	lsrs	r3, r3, #2
 800444e:	3302      	adds	r3, #2
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004456:	4b3d      	ldr	r3, [pc, #244]	@ (800454c <HAL_GPIO_Init+0x354>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	43db      	mvns	r3, r3
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	4013      	ands	r3, r2
 8004464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d003      	beq.n	800447a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	4313      	orrs	r3, r2
 8004478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800447a:	4a34      	ldr	r2, [pc, #208]	@ (800454c <HAL_GPIO_Init+0x354>)
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004480:	4b32      	ldr	r3, [pc, #200]	@ (800454c <HAL_GPIO_Init+0x354>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	43db      	mvns	r3, r3
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	4013      	ands	r3, r2
 800448e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044a4:	4a29      	ldr	r2, [pc, #164]	@ (800454c <HAL_GPIO_Init+0x354>)
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044aa:	4b28      	ldr	r3, [pc, #160]	@ (800454c <HAL_GPIO_Init+0x354>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	43db      	mvns	r3, r3
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	4013      	ands	r3, r2
 80044b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80044c6:	69ba      	ldr	r2, [r7, #24]
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044ce:	4a1f      	ldr	r2, [pc, #124]	@ (800454c <HAL_GPIO_Init+0x354>)
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044d4:	4b1d      	ldr	r3, [pc, #116]	@ (800454c <HAL_GPIO_Init+0x354>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	43db      	mvns	r3, r3
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	4013      	ands	r3, r2
 80044e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d003      	beq.n	80044f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044f8:	4a14      	ldr	r2, [pc, #80]	@ (800454c <HAL_GPIO_Init+0x354>)
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	3301      	adds	r3, #1
 8004502:	61fb      	str	r3, [r7, #28]
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	2b0f      	cmp	r3, #15
 8004508:	f67f ae84 	bls.w	8004214 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800450c:	bf00      	nop
 800450e:	bf00      	nop
 8004510:	3724      	adds	r7, #36	@ 0x24
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	40023800 	.word	0x40023800
 8004520:	40013800 	.word	0x40013800
 8004524:	40020000 	.word	0x40020000
 8004528:	40020400 	.word	0x40020400
 800452c:	40020800 	.word	0x40020800
 8004530:	40020c00 	.word	0x40020c00
 8004534:	40021000 	.word	0x40021000
 8004538:	40021400 	.word	0x40021400
 800453c:	40021800 	.word	0x40021800
 8004540:	40021c00 	.word	0x40021c00
 8004544:	40022000 	.word	0x40022000
 8004548:	40022400 	.word	0x40022400
 800454c:	40013c00 	.word	0x40013c00

08004550 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004550:	b480      	push	{r7}
 8004552:	b087      	sub	sp, #28
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800455a:	2300      	movs	r3, #0
 800455c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800455e:	2300      	movs	r3, #0
 8004560:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004562:	2300      	movs	r3, #0
 8004564:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004566:	2300      	movs	r3, #0
 8004568:	617b      	str	r3, [r7, #20]
 800456a:	e0d9      	b.n	8004720 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800456c:	2201      	movs	r2, #1
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	fa02 f303 	lsl.w	r3, r2, r3
 8004574:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	4013      	ands	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	429a      	cmp	r2, r3
 8004584:	f040 80c9 	bne.w	800471a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004588:	4a6b      	ldr	r2, [pc, #428]	@ (8004738 <HAL_GPIO_DeInit+0x1e8>)
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	089b      	lsrs	r3, r3, #2
 800458e:	3302      	adds	r3, #2
 8004590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004594:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f003 0303 	and.w	r3, r3, #3
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	220f      	movs	r2, #15
 80045a0:	fa02 f303 	lsl.w	r3, r2, r3
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	4013      	ands	r3, r2
 80045a8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a63      	ldr	r2, [pc, #396]	@ (800473c <HAL_GPIO_DeInit+0x1ec>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d037      	beq.n	8004622 <HAL_GPIO_DeInit+0xd2>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a62      	ldr	r2, [pc, #392]	@ (8004740 <HAL_GPIO_DeInit+0x1f0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d031      	beq.n	800461e <HAL_GPIO_DeInit+0xce>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a61      	ldr	r2, [pc, #388]	@ (8004744 <HAL_GPIO_DeInit+0x1f4>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d02b      	beq.n	800461a <HAL_GPIO_DeInit+0xca>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a60      	ldr	r2, [pc, #384]	@ (8004748 <HAL_GPIO_DeInit+0x1f8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d025      	beq.n	8004616 <HAL_GPIO_DeInit+0xc6>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a5f      	ldr	r2, [pc, #380]	@ (800474c <HAL_GPIO_DeInit+0x1fc>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d01f      	beq.n	8004612 <HAL_GPIO_DeInit+0xc2>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a5e      	ldr	r2, [pc, #376]	@ (8004750 <HAL_GPIO_DeInit+0x200>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d019      	beq.n	800460e <HAL_GPIO_DeInit+0xbe>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a5d      	ldr	r2, [pc, #372]	@ (8004754 <HAL_GPIO_DeInit+0x204>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d013      	beq.n	800460a <HAL_GPIO_DeInit+0xba>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a5c      	ldr	r2, [pc, #368]	@ (8004758 <HAL_GPIO_DeInit+0x208>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d00d      	beq.n	8004606 <HAL_GPIO_DeInit+0xb6>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a5b      	ldr	r2, [pc, #364]	@ (800475c <HAL_GPIO_DeInit+0x20c>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d007      	beq.n	8004602 <HAL_GPIO_DeInit+0xb2>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a5a      	ldr	r2, [pc, #360]	@ (8004760 <HAL_GPIO_DeInit+0x210>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d101      	bne.n	80045fe <HAL_GPIO_DeInit+0xae>
 80045fa:	2309      	movs	r3, #9
 80045fc:	e012      	b.n	8004624 <HAL_GPIO_DeInit+0xd4>
 80045fe:	230a      	movs	r3, #10
 8004600:	e010      	b.n	8004624 <HAL_GPIO_DeInit+0xd4>
 8004602:	2308      	movs	r3, #8
 8004604:	e00e      	b.n	8004624 <HAL_GPIO_DeInit+0xd4>
 8004606:	2307      	movs	r3, #7
 8004608:	e00c      	b.n	8004624 <HAL_GPIO_DeInit+0xd4>
 800460a:	2306      	movs	r3, #6
 800460c:	e00a      	b.n	8004624 <HAL_GPIO_DeInit+0xd4>
 800460e:	2305      	movs	r3, #5
 8004610:	e008      	b.n	8004624 <HAL_GPIO_DeInit+0xd4>
 8004612:	2304      	movs	r3, #4
 8004614:	e006      	b.n	8004624 <HAL_GPIO_DeInit+0xd4>
 8004616:	2303      	movs	r3, #3
 8004618:	e004      	b.n	8004624 <HAL_GPIO_DeInit+0xd4>
 800461a:	2302      	movs	r3, #2
 800461c:	e002      	b.n	8004624 <HAL_GPIO_DeInit+0xd4>
 800461e:	2301      	movs	r3, #1
 8004620:	e000      	b.n	8004624 <HAL_GPIO_DeInit+0xd4>
 8004622:	2300      	movs	r3, #0
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	f002 0203 	and.w	r2, r2, #3
 800462a:	0092      	lsls	r2, r2, #2
 800462c:	4093      	lsls	r3, r2
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	429a      	cmp	r2, r3
 8004632:	d132      	bne.n	800469a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004634:	4b4b      	ldr	r3, [pc, #300]	@ (8004764 <HAL_GPIO_DeInit+0x214>)
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	43db      	mvns	r3, r3
 800463c:	4949      	ldr	r1, [pc, #292]	@ (8004764 <HAL_GPIO_DeInit+0x214>)
 800463e:	4013      	ands	r3, r2
 8004640:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004642:	4b48      	ldr	r3, [pc, #288]	@ (8004764 <HAL_GPIO_DeInit+0x214>)
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	43db      	mvns	r3, r3
 800464a:	4946      	ldr	r1, [pc, #280]	@ (8004764 <HAL_GPIO_DeInit+0x214>)
 800464c:	4013      	ands	r3, r2
 800464e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004650:	4b44      	ldr	r3, [pc, #272]	@ (8004764 <HAL_GPIO_DeInit+0x214>)
 8004652:	68da      	ldr	r2, [r3, #12]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	43db      	mvns	r3, r3
 8004658:	4942      	ldr	r1, [pc, #264]	@ (8004764 <HAL_GPIO_DeInit+0x214>)
 800465a:	4013      	ands	r3, r2
 800465c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800465e:	4b41      	ldr	r3, [pc, #260]	@ (8004764 <HAL_GPIO_DeInit+0x214>)
 8004660:	689a      	ldr	r2, [r3, #8]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	43db      	mvns	r3, r3
 8004666:	493f      	ldr	r1, [pc, #252]	@ (8004764 <HAL_GPIO_DeInit+0x214>)
 8004668:	4013      	ands	r3, r2
 800466a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f003 0303 	and.w	r3, r3, #3
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	220f      	movs	r2, #15
 8004676:	fa02 f303 	lsl.w	r3, r2, r3
 800467a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800467c:	4a2e      	ldr	r2, [pc, #184]	@ (8004738 <HAL_GPIO_DeInit+0x1e8>)
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	089b      	lsrs	r3, r3, #2
 8004682:	3302      	adds	r3, #2
 8004684:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	43da      	mvns	r2, r3
 800468c:	482a      	ldr	r0, [pc, #168]	@ (8004738 <HAL_GPIO_DeInit+0x1e8>)
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	089b      	lsrs	r3, r3, #2
 8004692:	400a      	ands	r2, r1
 8004694:	3302      	adds	r3, #2
 8004696:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	2103      	movs	r1, #3
 80046a4:	fa01 f303 	lsl.w	r3, r1, r3
 80046a8:	43db      	mvns	r3, r3
 80046aa:	401a      	ands	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	08da      	lsrs	r2, r3, #3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	3208      	adds	r2, #8
 80046b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	f003 0307 	and.w	r3, r3, #7
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	220f      	movs	r2, #15
 80046c6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ca:	43db      	mvns	r3, r3
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	08d2      	lsrs	r2, r2, #3
 80046d0:	4019      	ands	r1, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	3208      	adds	r2, #8
 80046d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	2103      	movs	r1, #3
 80046e4:	fa01 f303 	lsl.w	r3, r1, r3
 80046e8:	43db      	mvns	r3, r3
 80046ea:	401a      	ands	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	2101      	movs	r1, #1
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	fa01 f303 	lsl.w	r3, r1, r3
 80046fc:	43db      	mvns	r3, r3
 80046fe:	401a      	ands	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	2103      	movs	r1, #3
 800470e:	fa01 f303 	lsl.w	r3, r1, r3
 8004712:	43db      	mvns	r3, r3
 8004714:	401a      	ands	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	3301      	adds	r3, #1
 800471e:	617b      	str	r3, [r7, #20]
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	2b0f      	cmp	r3, #15
 8004724:	f67f af22 	bls.w	800456c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004728:	bf00      	nop
 800472a:	bf00      	nop
 800472c:	371c      	adds	r7, #28
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	40013800 	.word	0x40013800
 800473c:	40020000 	.word	0x40020000
 8004740:	40020400 	.word	0x40020400
 8004744:	40020800 	.word	0x40020800
 8004748:	40020c00 	.word	0x40020c00
 800474c:	40021000 	.word	0x40021000
 8004750:	40021400 	.word	0x40021400
 8004754:	40021800 	.word	0x40021800
 8004758:	40021c00 	.word	0x40021c00
 800475c:	40022000 	.word	0x40022000
 8004760:	40022400 	.word	0x40022400
 8004764:	40013c00 	.word	0x40013c00

08004768 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	460b      	mov	r3, r1
 8004772:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	691a      	ldr	r2, [r3, #16]
 8004778:	887b      	ldrh	r3, [r7, #2]
 800477a:	4013      	ands	r3, r2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d002      	beq.n	8004786 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004780:	2301      	movs	r3, #1
 8004782:	73fb      	strb	r3, [r7, #15]
 8004784:	e001      	b.n	800478a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004786:	2300      	movs	r3, #0
 8004788:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800478a:	7bfb      	ldrb	r3, [r7, #15]
}
 800478c:	4618      	mov	r0, r3
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	460b      	mov	r3, r1
 80047a2:	807b      	strh	r3, [r7, #2]
 80047a4:	4613      	mov	r3, r2
 80047a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047a8:	787b      	ldrb	r3, [r7, #1]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047ae:	887a      	ldrh	r2, [r7, #2]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80047b4:	e003      	b.n	80047be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80047b6:	887b      	ldrh	r3, [r7, #2]
 80047b8:	041a      	lsls	r2, r3, #16
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	619a      	str	r2, [r3, #24]
}
 80047be:	bf00      	nop
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
	...

080047cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e12b      	b.n	8004a36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d106      	bne.n	80047f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7ff f9d6 	bl	8003ba4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2224      	movs	r2, #36	@ 0x24
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0201 	bic.w	r2, r2, #1
 800480e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800481e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800482e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004830:	f001 f8da 	bl	80059e8 <HAL_RCC_GetPCLK1Freq>
 8004834:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	4a81      	ldr	r2, [pc, #516]	@ (8004a40 <HAL_I2C_Init+0x274>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d807      	bhi.n	8004850 <HAL_I2C_Init+0x84>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4a80      	ldr	r2, [pc, #512]	@ (8004a44 <HAL_I2C_Init+0x278>)
 8004844:	4293      	cmp	r3, r2
 8004846:	bf94      	ite	ls
 8004848:	2301      	movls	r3, #1
 800484a:	2300      	movhi	r3, #0
 800484c:	b2db      	uxtb	r3, r3
 800484e:	e006      	b.n	800485e <HAL_I2C_Init+0x92>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4a7d      	ldr	r2, [pc, #500]	@ (8004a48 <HAL_I2C_Init+0x27c>)
 8004854:	4293      	cmp	r3, r2
 8004856:	bf94      	ite	ls
 8004858:	2301      	movls	r3, #1
 800485a:	2300      	movhi	r3, #0
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e0e7      	b.n	8004a36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	4a78      	ldr	r2, [pc, #480]	@ (8004a4c <HAL_I2C_Init+0x280>)
 800486a:	fba2 2303 	umull	r2, r3, r2, r3
 800486e:	0c9b      	lsrs	r3, r3, #18
 8004870:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	430a      	orrs	r2, r1
 8004884:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	4a6a      	ldr	r2, [pc, #424]	@ (8004a40 <HAL_I2C_Init+0x274>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d802      	bhi.n	80048a0 <HAL_I2C_Init+0xd4>
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	3301      	adds	r3, #1
 800489e:	e009      	b.n	80048b4 <HAL_I2C_Init+0xe8>
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80048a6:	fb02 f303 	mul.w	r3, r2, r3
 80048aa:	4a69      	ldr	r2, [pc, #420]	@ (8004a50 <HAL_I2C_Init+0x284>)
 80048ac:	fba2 2303 	umull	r2, r3, r2, r3
 80048b0:	099b      	lsrs	r3, r3, #6
 80048b2:	3301      	adds	r3, #1
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6812      	ldr	r2, [r2, #0]
 80048b8:	430b      	orrs	r3, r1
 80048ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	69db      	ldr	r3, [r3, #28]
 80048c2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80048c6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	495c      	ldr	r1, [pc, #368]	@ (8004a40 <HAL_I2C_Init+0x274>)
 80048d0:	428b      	cmp	r3, r1
 80048d2:	d819      	bhi.n	8004908 <HAL_I2C_Init+0x13c>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	1e59      	subs	r1, r3, #1
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	fbb1 f3f3 	udiv	r3, r1, r3
 80048e2:	1c59      	adds	r1, r3, #1
 80048e4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80048e8:	400b      	ands	r3, r1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <HAL_I2C_Init+0x138>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	1e59      	subs	r1, r3, #1
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80048fc:	3301      	adds	r3, #1
 80048fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004902:	e051      	b.n	80049a8 <HAL_I2C_Init+0x1dc>
 8004904:	2304      	movs	r3, #4
 8004906:	e04f      	b.n	80049a8 <HAL_I2C_Init+0x1dc>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d111      	bne.n	8004934 <HAL_I2C_Init+0x168>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	1e58      	subs	r0, r3, #1
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6859      	ldr	r1, [r3, #4]
 8004918:	460b      	mov	r3, r1
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	440b      	add	r3, r1
 800491e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004922:	3301      	adds	r3, #1
 8004924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004928:	2b00      	cmp	r3, #0
 800492a:	bf0c      	ite	eq
 800492c:	2301      	moveq	r3, #1
 800492e:	2300      	movne	r3, #0
 8004930:	b2db      	uxtb	r3, r3
 8004932:	e012      	b.n	800495a <HAL_I2C_Init+0x18e>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	1e58      	subs	r0, r3, #1
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6859      	ldr	r1, [r3, #4]
 800493c:	460b      	mov	r3, r1
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	440b      	add	r3, r1
 8004942:	0099      	lsls	r1, r3, #2
 8004944:	440b      	add	r3, r1
 8004946:	fbb0 f3f3 	udiv	r3, r0, r3
 800494a:	3301      	adds	r3, #1
 800494c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004950:	2b00      	cmp	r3, #0
 8004952:	bf0c      	ite	eq
 8004954:	2301      	moveq	r3, #1
 8004956:	2300      	movne	r3, #0
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <HAL_I2C_Init+0x196>
 800495e:	2301      	movs	r3, #1
 8004960:	e022      	b.n	80049a8 <HAL_I2C_Init+0x1dc>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10e      	bne.n	8004988 <HAL_I2C_Init+0x1bc>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	1e58      	subs	r0, r3, #1
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6859      	ldr	r1, [r3, #4]
 8004972:	460b      	mov	r3, r1
 8004974:	005b      	lsls	r3, r3, #1
 8004976:	440b      	add	r3, r1
 8004978:	fbb0 f3f3 	udiv	r3, r0, r3
 800497c:	3301      	adds	r3, #1
 800497e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004982:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004986:	e00f      	b.n	80049a8 <HAL_I2C_Init+0x1dc>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	1e58      	subs	r0, r3, #1
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6859      	ldr	r1, [r3, #4]
 8004990:	460b      	mov	r3, r1
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	440b      	add	r3, r1
 8004996:	0099      	lsls	r1, r3, #2
 8004998:	440b      	add	r3, r1
 800499a:	fbb0 f3f3 	udiv	r3, r0, r3
 800499e:	3301      	adds	r3, #1
 80049a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049a8:	6879      	ldr	r1, [r7, #4]
 80049aa:	6809      	ldr	r1, [r1, #0]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	69da      	ldr	r2, [r3, #28]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	431a      	orrs	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80049d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	6911      	ldr	r1, [r2, #16]
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	68d2      	ldr	r2, [r2, #12]
 80049e2:	4311      	orrs	r1, r2
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	6812      	ldr	r2, [r2, #0]
 80049e8:	430b      	orrs	r3, r1
 80049ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	695a      	ldr	r2, [r3, #20]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	431a      	orrs	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f042 0201 	orr.w	r2, r2, #1
 8004a16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2220      	movs	r2, #32
 8004a22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	000186a0 	.word	0x000186a0
 8004a44:	001e847f 	.word	0x001e847f
 8004a48:	003d08ff 	.word	0x003d08ff
 8004a4c:	431bde83 	.word	0x431bde83
 8004a50:	10624dd3 	.word	0x10624dd3

08004a54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b20      	cmp	r3, #32
 8004a68:	d129      	bne.n	8004abe <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2224      	movs	r2, #36	@ 0x24
 8004a6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f022 0201 	bic.w	r2, r2, #1
 8004a80:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 0210 	bic.w	r2, r2, #16
 8004a90:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f042 0201 	orr.w	r2, r2, #1
 8004ab0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004aba:	2300      	movs	r3, #0
 8004abc:	e000      	b.n	8004ac0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004abe:	2302      	movs	r3, #2
  }
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b20      	cmp	r3, #32
 8004ae4:	d12a      	bne.n	8004b3c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2224      	movs	r2, #36	@ 0x24
 8004aea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f022 0201 	bic.w	r2, r2, #1
 8004afc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b04:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004b06:	89fb      	ldrh	r3, [r7, #14]
 8004b08:	f023 030f 	bic.w	r3, r3, #15
 8004b0c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	89fb      	ldrh	r3, [r7, #14]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	89fa      	ldrh	r2, [r7, #14]
 8004b1e:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0201 	orr.w	r2, r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2220      	movs	r2, #32
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	e000      	b.n	8004b3e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004b3c:	2302      	movs	r3, #2
  }
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
	...

08004b4c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e0bf      	b.n	8004cde <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d106      	bne.n	8004b78 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f8ba 	bl	8004cec <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699a      	ldr	r2, [r3, #24]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004b8e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6999      	ldr	r1, [r3, #24]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004ba4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6899      	ldr	r1, [r3, #8]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	4b4a      	ldr	r3, [pc, #296]	@ (8004ce8 <HAL_LTDC_Init+0x19c>)
 8004bc0:	400b      	ands	r3, r1
 8004bc2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	041b      	lsls	r3, r3, #16
 8004bca:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6899      	ldr	r1, [r3, #8]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	699a      	ldr	r2, [r3, #24]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68d9      	ldr	r1, [r3, #12]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	4b3e      	ldr	r3, [pc, #248]	@ (8004ce8 <HAL_LTDC_Init+0x19c>)
 8004bee:	400b      	ands	r3, r1
 8004bf0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	041b      	lsls	r3, r3, #16
 8004bf8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68d9      	ldr	r1, [r3, #12]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a1a      	ldr	r2, [r3, #32]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	431a      	orrs	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6919      	ldr	r1, [r3, #16]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	4b33      	ldr	r3, [pc, #204]	@ (8004ce8 <HAL_LTDC_Init+0x19c>)
 8004c1c:	400b      	ands	r3, r1
 8004c1e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c24:	041b      	lsls	r3, r3, #16
 8004c26:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6919      	ldr	r1, [r3, #16]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	431a      	orrs	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	6959      	ldr	r1, [r3, #20]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	4b27      	ldr	r3, [pc, #156]	@ (8004ce8 <HAL_LTDC_Init+0x19c>)
 8004c4a:	400b      	ands	r3, r1
 8004c4c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c52:	041b      	lsls	r3, r3, #16
 8004c54:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6959      	ldr	r1, [r3, #20]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	431a      	orrs	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c72:	021b      	lsls	r3, r3, #8
 8004c74:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004c7c:	041b      	lsls	r3, r3, #16
 8004c7e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004c8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004c96:	68ba      	ldr	r2, [r7, #8]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0206 	orr.w	r2, r2, #6
 8004cba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	699a      	ldr	r2, [r3, #24]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f042 0201 	orr.w	r2, r2, #1
 8004cca:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	f000f800 	.word	0xf000f800

08004cec <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004d00:	b5b0      	push	{r4, r5, r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d101      	bne.n	8004d1a <HAL_LTDC_ConfigLayer+0x1a>
 8004d16:	2302      	movs	r3, #2
 8004d18:	e02c      	b.n	8004d74 <HAL_LTDC_ConfigLayer+0x74>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2202      	movs	r2, #2
 8004d26:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2134      	movs	r1, #52	@ 0x34
 8004d30:	fb01 f303 	mul.w	r3, r1, r3
 8004d34:	4413      	add	r3, r2
 8004d36:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	4614      	mov	r4, r2
 8004d3e:	461d      	mov	r5, r3
 8004d40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d4c:	682b      	ldr	r3, [r5, #0]
 8004d4e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	68b9      	ldr	r1, [r7, #8]
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f000 f840 	bl	8004dda <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bdb0      	pop	{r4, r5, r7, pc}

08004d7c <HAL_LTDC_Reload>:
  *                      LTDC_RELOAD_VERTICAL_BLANKING  : Reload in the next Vertical Blanking
  * @note   User application may resort to HAL_LTDC_ReloadEventCallback() at reload interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef  HAL_LTDC_Reload(LTDC_HandleTypeDef *hltdc, uint32_t ReloadType)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(ReloadType));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d101      	bne.n	8004d94 <HAL_LTDC_Reload+0x18>
 8004d90:	2302      	movs	r3, #2
 8004d92:	e01c      	b.n	8004dce <HAL_LTDC_Reload+0x52>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable the Reload interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0208 	orr.w	r2, r2, #8
 8004db2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Apply Reload type */
  hltdc->Instance->SRCR = ReloadType;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b089      	sub	sp, #36	@ 0x24
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	60f8      	str	r0, [r7, #12]
 8004de2:	60b9      	str	r1, [r7, #8]
 8004de4:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	0c1b      	lsrs	r3, r3, #16
 8004df2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004df6:	4413      	add	r3, r2
 8004df8:	041b      	lsls	r3, r3, #16
 8004dfa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	461a      	mov	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	01db      	lsls	r3, r3, #7
 8004e06:	4413      	add	r3, r2
 8004e08:	3384      	adds	r3, #132	@ 0x84
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	6812      	ldr	r2, [r2, #0]
 8004e10:	4611      	mov	r1, r2
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	01d2      	lsls	r2, r2, #7
 8004e16:	440a      	add	r2, r1
 8004e18:	3284      	adds	r2, #132	@ 0x84
 8004e1a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004e1e:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	0c1b      	lsrs	r3, r3, #16
 8004e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004e30:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004e32:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4619      	mov	r1, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	01db      	lsls	r3, r3, #7
 8004e3e:	440b      	add	r3, r1
 8004e40:	3384      	adds	r3, #132	@ 0x84
 8004e42:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004e48:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	68da      	ldr	r2, [r3, #12]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e58:	4413      	add	r3, r2
 8004e5a:	041b      	lsls	r3, r3, #16
 8004e5c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	461a      	mov	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	01db      	lsls	r3, r3, #7
 8004e68:	4413      	add	r3, r2
 8004e6a:	3384      	adds	r3, #132	@ 0x84
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	6812      	ldr	r2, [r2, #0]
 8004e72:	4611      	mov	r1, r2
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	01d2      	lsls	r2, r2, #7
 8004e78:	440a      	add	r2, r1
 8004e7a:	3284      	adds	r2, #132	@ 0x84
 8004e7c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004e80:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e90:	4413      	add	r3, r2
 8004e92:	1c5a      	adds	r2, r3, #1
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4619      	mov	r1, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	01db      	lsls	r3, r3, #7
 8004e9e:	440b      	add	r3, r1
 8004ea0:	3384      	adds	r3, #132	@ 0x84
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	01db      	lsls	r3, r3, #7
 8004eb4:	4413      	add	r3, r2
 8004eb6:	3384      	adds	r3, #132	@ 0x84
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	6812      	ldr	r2, [r2, #0]
 8004ebe:	4611      	mov	r1, r2
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	01d2      	lsls	r2, r2, #7
 8004ec4:	440a      	add	r2, r1
 8004ec6:	3284      	adds	r2, #132	@ 0x84
 8004ec8:	f023 0307 	bic.w	r3, r3, #7
 8004ecc:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	01db      	lsls	r3, r3, #7
 8004ed8:	4413      	add	r3, r2
 8004eda:	3384      	adds	r3, #132	@ 0x84
 8004edc:	461a      	mov	r2, r3
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004eea:	021b      	lsls	r3, r3, #8
 8004eec:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004ef4:	041b      	lsls	r3, r3, #16
 8004ef6:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	061b      	lsls	r3, r3, #24
 8004efe:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	461a      	mov	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	01db      	lsls	r3, r3, #7
 8004f0a:	4413      	add	r3, r2
 8004f0c:	3384      	adds	r3, #132	@ 0x84
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	461a      	mov	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	01db      	lsls	r3, r3, #7
 8004f1a:	4413      	add	r3, r2
 8004f1c:	3384      	adds	r3, #132	@ 0x84
 8004f1e:	461a      	mov	r2, r3
 8004f20:	2300      	movs	r3, #0
 8004f22:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	431a      	orrs	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4619      	mov	r1, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	01db      	lsls	r3, r3, #7
 8004f3e:	440b      	add	r3, r1
 8004f40:	3384      	adds	r3, #132	@ 0x84
 8004f42:	4619      	mov	r1, r3
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	01db      	lsls	r3, r3, #7
 8004f54:	4413      	add	r3, r2
 8004f56:	3384      	adds	r3, #132	@ 0x84
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	6812      	ldr	r2, [r2, #0]
 8004f5e:	4611      	mov	r1, r2
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	01d2      	lsls	r2, r2, #7
 8004f64:	440a      	add	r2, r1
 8004f66:	3284      	adds	r2, #132	@ 0x84
 8004f68:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004f6c:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	461a      	mov	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	01db      	lsls	r3, r3, #7
 8004f78:	4413      	add	r3, r2
 8004f7a:	3384      	adds	r3, #132	@ 0x84
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	461a      	mov	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	01db      	lsls	r3, r3, #7
 8004f8e:	4413      	add	r3, r2
 8004f90:	3384      	adds	r3, #132	@ 0x84
 8004f92:	69db      	ldr	r3, [r3, #28]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	6812      	ldr	r2, [r2, #0]
 8004f98:	4611      	mov	r1, r2
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	01d2      	lsls	r2, r2, #7
 8004f9e:	440a      	add	r2, r1
 8004fa0:	3284      	adds	r2, #132	@ 0x84
 8004fa2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004fa6:	f023 0307 	bic.w	r3, r3, #7
 8004faa:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	69da      	ldr	r2, [r3, #28]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	68f9      	ldr	r1, [r7, #12]
 8004fb6:	6809      	ldr	r1, [r1, #0]
 8004fb8:	4608      	mov	r0, r1
 8004fba:	6879      	ldr	r1, [r7, #4]
 8004fbc:	01c9      	lsls	r1, r1, #7
 8004fbe:	4401      	add	r1, r0
 8004fc0:	3184      	adds	r1, #132	@ 0x84
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	01db      	lsls	r3, r3, #7
 8004fd0:	4413      	add	r3, r2
 8004fd2:	3384      	adds	r3, #132	@ 0x84
 8004fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	01db      	lsls	r3, r3, #7
 8004fe0:	4413      	add	r3, r2
 8004fe2:	3384      	adds	r3, #132	@ 0x84
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	01db      	lsls	r3, r3, #7
 8004ff4:	4413      	add	r3, r2
 8004ff6:	3384      	adds	r3, #132	@ 0x84
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffe:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d102      	bne.n	800500e <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005008:	2304      	movs	r3, #4
 800500a:	61fb      	str	r3, [r7, #28]
 800500c:	e01b      	b.n	8005046 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d102      	bne.n	800501c <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005016:	2303      	movs	r3, #3
 8005018:	61fb      	str	r3, [r7, #28]
 800501a:	e014      	b.n	8005046 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	2b04      	cmp	r3, #4
 8005022:	d00b      	beq.n	800503c <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005028:	2b02      	cmp	r3, #2
 800502a:	d007      	beq.n	800503c <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005030:	2b03      	cmp	r3, #3
 8005032:	d003      	beq.n	800503c <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005038:	2b07      	cmp	r3, #7
 800503a:	d102      	bne.n	8005042 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800503c:	2302      	movs	r3, #2
 800503e:	61fb      	str	r3, [r7, #28]
 8005040:	e001      	b.n	8005046 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005042:	2301      	movs	r3, #1
 8005044:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	461a      	mov	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	01db      	lsls	r3, r3, #7
 8005050:	4413      	add	r3, r2
 8005052:	3384      	adds	r3, #132	@ 0x84
 8005054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	6812      	ldr	r2, [r2, #0]
 800505a:	4611      	mov	r1, r2
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	01d2      	lsls	r2, r2, #7
 8005060:	440a      	add	r2, r1
 8005062:	3284      	adds	r2, #132	@ 0x84
 8005064:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005068:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800506e:	69fa      	ldr	r2, [r7, #28]
 8005070:	fb02 f303 	mul.w	r3, r2, r3
 8005074:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	6859      	ldr	r1, [r3, #4]
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	1acb      	subs	r3, r1, r3
 8005080:	69f9      	ldr	r1, [r7, #28]
 8005082:	fb01 f303 	mul.w	r3, r1, r3
 8005086:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005088:	68f9      	ldr	r1, [r7, #12]
 800508a:	6809      	ldr	r1, [r1, #0]
 800508c:	4608      	mov	r0, r1
 800508e:	6879      	ldr	r1, [r7, #4]
 8005090:	01c9      	lsls	r1, r1, #7
 8005092:	4401      	add	r1, r0
 8005094:	3184      	adds	r1, #132	@ 0x84
 8005096:	4313      	orrs	r3, r2
 8005098:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	461a      	mov	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	01db      	lsls	r3, r3, #7
 80050a4:	4413      	add	r3, r2
 80050a6:	3384      	adds	r3, #132	@ 0x84
 80050a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	6812      	ldr	r2, [r2, #0]
 80050ae:	4611      	mov	r1, r2
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	01d2      	lsls	r2, r2, #7
 80050b4:	440a      	add	r2, r1
 80050b6:	3284      	adds	r2, #132	@ 0x84
 80050b8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80050bc:	f023 0307 	bic.w	r3, r3, #7
 80050c0:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	461a      	mov	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	01db      	lsls	r3, r3, #7
 80050cc:	4413      	add	r3, r2
 80050ce:	3384      	adds	r3, #132	@ 0x84
 80050d0:	461a      	mov	r2, r3
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d6:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	461a      	mov	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	01db      	lsls	r3, r3, #7
 80050e2:	4413      	add	r3, r2
 80050e4:	3384      	adds	r3, #132	@ 0x84
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	6812      	ldr	r2, [r2, #0]
 80050ec:	4611      	mov	r1, r2
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	01d2      	lsls	r2, r2, #7
 80050f2:	440a      	add	r2, r1
 80050f4:	3284      	adds	r2, #132	@ 0x84
 80050f6:	f043 0301 	orr.w	r3, r3, #1
 80050fa:	6013      	str	r3, [r2, #0]
}
 80050fc:	bf00      	nop
 80050fe:	3724      	adds	r7, #36	@ 0x24
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e267      	b.n	80055ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b00      	cmp	r3, #0
 8005124:	d075      	beq.n	8005212 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005126:	4b88      	ldr	r3, [pc, #544]	@ (8005348 <HAL_RCC_OscConfig+0x240>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f003 030c 	and.w	r3, r3, #12
 800512e:	2b04      	cmp	r3, #4
 8005130:	d00c      	beq.n	800514c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005132:	4b85      	ldr	r3, [pc, #532]	@ (8005348 <HAL_RCC_OscConfig+0x240>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800513a:	2b08      	cmp	r3, #8
 800513c:	d112      	bne.n	8005164 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800513e:	4b82      	ldr	r3, [pc, #520]	@ (8005348 <HAL_RCC_OscConfig+0x240>)
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005146:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800514a:	d10b      	bne.n	8005164 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800514c:	4b7e      	ldr	r3, [pc, #504]	@ (8005348 <HAL_RCC_OscConfig+0x240>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d05b      	beq.n	8005210 <HAL_RCC_OscConfig+0x108>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d157      	bne.n	8005210 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e242      	b.n	80055ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800516c:	d106      	bne.n	800517c <HAL_RCC_OscConfig+0x74>
 800516e:	4b76      	ldr	r3, [pc, #472]	@ (8005348 <HAL_RCC_OscConfig+0x240>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a75      	ldr	r2, [pc, #468]	@ (8005348 <HAL_RCC_OscConfig+0x240>)
 8005174:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005178:	6013      	str	r3, [r2, #0]
 800517a:	e01d      	b.n	80051b8 <HAL_RCC_OscConfig+0xb0>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005184:	d10c      	bne.n	80051a0 <HAL_RCC_OscConfig+0x98>
 8005186:	4b70      	ldr	r3, [pc, #448]	@ (8005348 <HAL_RCC_OscConfig+0x240>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a6f      	ldr	r2, [pc, #444]	@ (8005348 <HAL_RCC_OscConfig+0x240>)
 800518c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005190:	6013      	str	r3, [r2, #0]
 8005192:	4b6d      	ldr	r3, [pc, #436]	@ (8005348 <HAL_RCC_OscConfig+0x240>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a6c      	ldr	r2, [pc, #432]	@ (8005348 <HAL_RCC_OscConfig+0x240>)
 8005198:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800519c:	6013      	str	r3, [r2, #0]
 800519e:	e00b      	b.n	80051b8 <HAL_RCC_OscConfig+0xb0>
 80051a0:	4b69      	ldr	r3, [pc, #420]	@ (8005348 <HAL_RCC_OscConfig+0x240>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a68      	ldr	r2, [pc, #416]	@ (8005348 <HAL_RCC_OscConfig+0x240>)
 80051a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051aa:	6013      	str	r3, [r2, #0]
 80051ac:	4b66      	ldr	r3, [pc, #408]	@ (8005348 <HAL_RCC_OscConfig+0x240>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a65      	ldr	r2, [pc, #404]	@ (8005348 <HAL_RCC_OscConfig+0x240>)
 80051b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80051b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d013      	beq.n	80051e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c0:	f7fe ff28 	bl	8004014 <HAL_GetTick>
 80051c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051c8:	f7fe ff24 	bl	8004014 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b64      	cmp	r3, #100	@ 0x64
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e207      	b.n	80055ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051da:	4b5b      	ldr	r3, [pc, #364]	@ (8005348 <HAL_RCC_OscConfig+0x240>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d0f0      	beq.n	80051c8 <HAL_RCC_OscConfig+0xc0>
 80051e6:	e014      	b.n	8005212 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e8:	f7fe ff14 	bl	8004014 <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051ee:	e008      	b.n	8005202 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051f0:	f7fe ff10 	bl	8004014 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b64      	cmp	r3, #100	@ 0x64
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e1f3      	b.n	80055ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005202:	4b51      	ldr	r3, [pc, #324]	@ (8005348 <HAL_RCC_OscConfig+0x240>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1f0      	bne.n	80051f0 <HAL_RCC_OscConfig+0xe8>
 800520e:	e000      	b.n	8005212 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d063      	beq.n	80052e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800521e:	4b4a      	ldr	r3, [pc, #296]	@ (8005348 <HAL_RCC_OscConfig+0x240>)
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f003 030c 	and.w	r3, r3, #12
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00b      	beq.n	8005242 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800522a:	4b47      	ldr	r3, [pc, #284]	@ (8005348 <HAL_RCC_OscConfig+0x240>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005232:	2b08      	cmp	r3, #8
 8005234:	d11c      	bne.n	8005270 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005236:	4b44      	ldr	r3, [pc, #272]	@ (8005348 <HAL_RCC_OscConfig+0x240>)
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d116      	bne.n	8005270 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005242:	4b41      	ldr	r3, [pc, #260]	@ (8005348 <HAL_RCC_OscConfig+0x240>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d005      	beq.n	800525a <HAL_RCC_OscConfig+0x152>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d001      	beq.n	800525a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e1c7      	b.n	80055ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800525a:	4b3b      	ldr	r3, [pc, #236]	@ (8005348 <HAL_RCC_OscConfig+0x240>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	4937      	ldr	r1, [pc, #220]	@ (8005348 <HAL_RCC_OscConfig+0x240>)
 800526a:	4313      	orrs	r3, r2
 800526c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800526e:	e03a      	b.n	80052e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d020      	beq.n	80052ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005278:	4b34      	ldr	r3, [pc, #208]	@ (800534c <HAL_RCC_OscConfig+0x244>)
 800527a:	2201      	movs	r2, #1
 800527c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800527e:	f7fe fec9 	bl	8004014 <HAL_GetTick>
 8005282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005284:	e008      	b.n	8005298 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005286:	f7fe fec5 	bl	8004014 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	2b02      	cmp	r3, #2
 8005292:	d901      	bls.n	8005298 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e1a8      	b.n	80055ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005298:	4b2b      	ldr	r3, [pc, #172]	@ (8005348 <HAL_RCC_OscConfig+0x240>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d0f0      	beq.n	8005286 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052a4:	4b28      	ldr	r3, [pc, #160]	@ (8005348 <HAL_RCC_OscConfig+0x240>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	00db      	lsls	r3, r3, #3
 80052b2:	4925      	ldr	r1, [pc, #148]	@ (8005348 <HAL_RCC_OscConfig+0x240>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	600b      	str	r3, [r1, #0]
 80052b8:	e015      	b.n	80052e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052ba:	4b24      	ldr	r3, [pc, #144]	@ (800534c <HAL_RCC_OscConfig+0x244>)
 80052bc:	2200      	movs	r2, #0
 80052be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c0:	f7fe fea8 	bl	8004014 <HAL_GetTick>
 80052c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052c6:	e008      	b.n	80052da <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052c8:	f7fe fea4 	bl	8004014 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d901      	bls.n	80052da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e187      	b.n	80055ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052da:	4b1b      	ldr	r3, [pc, #108]	@ (8005348 <HAL_RCC_OscConfig+0x240>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1f0      	bne.n	80052c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0308 	and.w	r3, r3, #8
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d036      	beq.n	8005360 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d016      	beq.n	8005328 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052fa:	4b15      	ldr	r3, [pc, #84]	@ (8005350 <HAL_RCC_OscConfig+0x248>)
 80052fc:	2201      	movs	r2, #1
 80052fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005300:	f7fe fe88 	bl	8004014 <HAL_GetTick>
 8005304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005306:	e008      	b.n	800531a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005308:	f7fe fe84 	bl	8004014 <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e167      	b.n	80055ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800531a:	4b0b      	ldr	r3, [pc, #44]	@ (8005348 <HAL_RCC_OscConfig+0x240>)
 800531c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d0f0      	beq.n	8005308 <HAL_RCC_OscConfig+0x200>
 8005326:	e01b      	b.n	8005360 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005328:	4b09      	ldr	r3, [pc, #36]	@ (8005350 <HAL_RCC_OscConfig+0x248>)
 800532a:	2200      	movs	r2, #0
 800532c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800532e:	f7fe fe71 	bl	8004014 <HAL_GetTick>
 8005332:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005334:	e00e      	b.n	8005354 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005336:	f7fe fe6d 	bl	8004014 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	2b02      	cmp	r3, #2
 8005342:	d907      	bls.n	8005354 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e150      	b.n	80055ea <HAL_RCC_OscConfig+0x4e2>
 8005348:	40023800 	.word	0x40023800
 800534c:	42470000 	.word	0x42470000
 8005350:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005354:	4b88      	ldr	r3, [pc, #544]	@ (8005578 <HAL_RCC_OscConfig+0x470>)
 8005356:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1ea      	bne.n	8005336 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 8097 	beq.w	800549c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800536e:	2300      	movs	r3, #0
 8005370:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005372:	4b81      	ldr	r3, [pc, #516]	@ (8005578 <HAL_RCC_OscConfig+0x470>)
 8005374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10f      	bne.n	800539e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800537e:	2300      	movs	r3, #0
 8005380:	60bb      	str	r3, [r7, #8]
 8005382:	4b7d      	ldr	r3, [pc, #500]	@ (8005578 <HAL_RCC_OscConfig+0x470>)
 8005384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005386:	4a7c      	ldr	r2, [pc, #496]	@ (8005578 <HAL_RCC_OscConfig+0x470>)
 8005388:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800538c:	6413      	str	r3, [r2, #64]	@ 0x40
 800538e:	4b7a      	ldr	r3, [pc, #488]	@ (8005578 <HAL_RCC_OscConfig+0x470>)
 8005390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005392:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005396:	60bb      	str	r3, [r7, #8]
 8005398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800539a:	2301      	movs	r3, #1
 800539c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800539e:	4b77      	ldr	r3, [pc, #476]	@ (800557c <HAL_RCC_OscConfig+0x474>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d118      	bne.n	80053dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053aa:	4b74      	ldr	r3, [pc, #464]	@ (800557c <HAL_RCC_OscConfig+0x474>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a73      	ldr	r2, [pc, #460]	@ (800557c <HAL_RCC_OscConfig+0x474>)
 80053b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053b6:	f7fe fe2d 	bl	8004014 <HAL_GetTick>
 80053ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053bc:	e008      	b.n	80053d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053be:	f7fe fe29 	bl	8004014 <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d901      	bls.n	80053d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e10c      	b.n	80055ea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053d0:	4b6a      	ldr	r3, [pc, #424]	@ (800557c <HAL_RCC_OscConfig+0x474>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d0f0      	beq.n	80053be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d106      	bne.n	80053f2 <HAL_RCC_OscConfig+0x2ea>
 80053e4:	4b64      	ldr	r3, [pc, #400]	@ (8005578 <HAL_RCC_OscConfig+0x470>)
 80053e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053e8:	4a63      	ldr	r2, [pc, #396]	@ (8005578 <HAL_RCC_OscConfig+0x470>)
 80053ea:	f043 0301 	orr.w	r3, r3, #1
 80053ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80053f0:	e01c      	b.n	800542c <HAL_RCC_OscConfig+0x324>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	2b05      	cmp	r3, #5
 80053f8:	d10c      	bne.n	8005414 <HAL_RCC_OscConfig+0x30c>
 80053fa:	4b5f      	ldr	r3, [pc, #380]	@ (8005578 <HAL_RCC_OscConfig+0x470>)
 80053fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053fe:	4a5e      	ldr	r2, [pc, #376]	@ (8005578 <HAL_RCC_OscConfig+0x470>)
 8005400:	f043 0304 	orr.w	r3, r3, #4
 8005404:	6713      	str	r3, [r2, #112]	@ 0x70
 8005406:	4b5c      	ldr	r3, [pc, #368]	@ (8005578 <HAL_RCC_OscConfig+0x470>)
 8005408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800540a:	4a5b      	ldr	r2, [pc, #364]	@ (8005578 <HAL_RCC_OscConfig+0x470>)
 800540c:	f043 0301 	orr.w	r3, r3, #1
 8005410:	6713      	str	r3, [r2, #112]	@ 0x70
 8005412:	e00b      	b.n	800542c <HAL_RCC_OscConfig+0x324>
 8005414:	4b58      	ldr	r3, [pc, #352]	@ (8005578 <HAL_RCC_OscConfig+0x470>)
 8005416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005418:	4a57      	ldr	r2, [pc, #348]	@ (8005578 <HAL_RCC_OscConfig+0x470>)
 800541a:	f023 0301 	bic.w	r3, r3, #1
 800541e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005420:	4b55      	ldr	r3, [pc, #340]	@ (8005578 <HAL_RCC_OscConfig+0x470>)
 8005422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005424:	4a54      	ldr	r2, [pc, #336]	@ (8005578 <HAL_RCC_OscConfig+0x470>)
 8005426:	f023 0304 	bic.w	r3, r3, #4
 800542a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d015      	beq.n	8005460 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005434:	f7fe fdee 	bl	8004014 <HAL_GetTick>
 8005438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800543a:	e00a      	b.n	8005452 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800543c:	f7fe fdea 	bl	8004014 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800544a:	4293      	cmp	r3, r2
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e0cb      	b.n	80055ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005452:	4b49      	ldr	r3, [pc, #292]	@ (8005578 <HAL_RCC_OscConfig+0x470>)
 8005454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005456:	f003 0302 	and.w	r3, r3, #2
 800545a:	2b00      	cmp	r3, #0
 800545c:	d0ee      	beq.n	800543c <HAL_RCC_OscConfig+0x334>
 800545e:	e014      	b.n	800548a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005460:	f7fe fdd8 	bl	8004014 <HAL_GetTick>
 8005464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005466:	e00a      	b.n	800547e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005468:	f7fe fdd4 	bl	8004014 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005476:	4293      	cmp	r3, r2
 8005478:	d901      	bls.n	800547e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e0b5      	b.n	80055ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800547e:	4b3e      	ldr	r3, [pc, #248]	@ (8005578 <HAL_RCC_OscConfig+0x470>)
 8005480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1ee      	bne.n	8005468 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800548a:	7dfb      	ldrb	r3, [r7, #23]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d105      	bne.n	800549c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005490:	4b39      	ldr	r3, [pc, #228]	@ (8005578 <HAL_RCC_OscConfig+0x470>)
 8005492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005494:	4a38      	ldr	r2, [pc, #224]	@ (8005578 <HAL_RCC_OscConfig+0x470>)
 8005496:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800549a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 80a1 	beq.w	80055e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054a6:	4b34      	ldr	r3, [pc, #208]	@ (8005578 <HAL_RCC_OscConfig+0x470>)
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f003 030c 	and.w	r3, r3, #12
 80054ae:	2b08      	cmp	r3, #8
 80054b0:	d05c      	beq.n	800556c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d141      	bne.n	800553e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054ba:	4b31      	ldr	r3, [pc, #196]	@ (8005580 <HAL_RCC_OscConfig+0x478>)
 80054bc:	2200      	movs	r2, #0
 80054be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c0:	f7fe fda8 	bl	8004014 <HAL_GetTick>
 80054c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054c6:	e008      	b.n	80054da <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054c8:	f7fe fda4 	bl	8004014 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e087      	b.n	80055ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054da:	4b27      	ldr	r3, [pc, #156]	@ (8005578 <HAL_RCC_OscConfig+0x470>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1f0      	bne.n	80054c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	69da      	ldr	r2, [r3, #28]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	431a      	orrs	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f4:	019b      	lsls	r3, r3, #6
 80054f6:	431a      	orrs	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054fc:	085b      	lsrs	r3, r3, #1
 80054fe:	3b01      	subs	r3, #1
 8005500:	041b      	lsls	r3, r3, #16
 8005502:	431a      	orrs	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005508:	061b      	lsls	r3, r3, #24
 800550a:	491b      	ldr	r1, [pc, #108]	@ (8005578 <HAL_RCC_OscConfig+0x470>)
 800550c:	4313      	orrs	r3, r2
 800550e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005510:	4b1b      	ldr	r3, [pc, #108]	@ (8005580 <HAL_RCC_OscConfig+0x478>)
 8005512:	2201      	movs	r2, #1
 8005514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005516:	f7fe fd7d 	bl	8004014 <HAL_GetTick>
 800551a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800551c:	e008      	b.n	8005530 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800551e:	f7fe fd79 	bl	8004014 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	2b02      	cmp	r3, #2
 800552a:	d901      	bls.n	8005530 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e05c      	b.n	80055ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005530:	4b11      	ldr	r3, [pc, #68]	@ (8005578 <HAL_RCC_OscConfig+0x470>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d0f0      	beq.n	800551e <HAL_RCC_OscConfig+0x416>
 800553c:	e054      	b.n	80055e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800553e:	4b10      	ldr	r3, [pc, #64]	@ (8005580 <HAL_RCC_OscConfig+0x478>)
 8005540:	2200      	movs	r2, #0
 8005542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005544:	f7fe fd66 	bl	8004014 <HAL_GetTick>
 8005548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800554a:	e008      	b.n	800555e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800554c:	f7fe fd62 	bl	8004014 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b02      	cmp	r3, #2
 8005558:	d901      	bls.n	800555e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e045      	b.n	80055ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800555e:	4b06      	ldr	r3, [pc, #24]	@ (8005578 <HAL_RCC_OscConfig+0x470>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1f0      	bne.n	800554c <HAL_RCC_OscConfig+0x444>
 800556a:	e03d      	b.n	80055e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d107      	bne.n	8005584 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e038      	b.n	80055ea <HAL_RCC_OscConfig+0x4e2>
 8005578:	40023800 	.word	0x40023800
 800557c:	40007000 	.word	0x40007000
 8005580:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005584:	4b1b      	ldr	r3, [pc, #108]	@ (80055f4 <HAL_RCC_OscConfig+0x4ec>)
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d028      	beq.n	80055e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800559c:	429a      	cmp	r2, r3
 800559e:	d121      	bne.n	80055e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d11a      	bne.n	80055e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80055b4:	4013      	ands	r3, r2
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80055ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055bc:	4293      	cmp	r3, r2
 80055be:	d111      	bne.n	80055e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ca:	085b      	lsrs	r3, r3, #1
 80055cc:	3b01      	subs	r3, #1
 80055ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d107      	bne.n	80055e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d001      	beq.n	80055e8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e000      	b.n	80055ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3718      	adds	r7, #24
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	40023800 	.word	0x40023800

080055f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e0cc      	b.n	80057a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800560c:	4b68      	ldr	r3, [pc, #416]	@ (80057b0 <HAL_RCC_ClockConfig+0x1b8>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 030f 	and.w	r3, r3, #15
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	429a      	cmp	r2, r3
 8005618:	d90c      	bls.n	8005634 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800561a:	4b65      	ldr	r3, [pc, #404]	@ (80057b0 <HAL_RCC_ClockConfig+0x1b8>)
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	b2d2      	uxtb	r2, r2
 8005620:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005622:	4b63      	ldr	r3, [pc, #396]	@ (80057b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 030f 	and.w	r3, r3, #15
 800562a:	683a      	ldr	r2, [r7, #0]
 800562c:	429a      	cmp	r2, r3
 800562e:	d001      	beq.n	8005634 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e0b8      	b.n	80057a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d020      	beq.n	8005682 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0304 	and.w	r3, r3, #4
 8005648:	2b00      	cmp	r3, #0
 800564a:	d005      	beq.n	8005658 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800564c:	4b59      	ldr	r3, [pc, #356]	@ (80057b4 <HAL_RCC_ClockConfig+0x1bc>)
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	4a58      	ldr	r2, [pc, #352]	@ (80057b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005652:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005656:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0308 	and.w	r3, r3, #8
 8005660:	2b00      	cmp	r3, #0
 8005662:	d005      	beq.n	8005670 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005664:	4b53      	ldr	r3, [pc, #332]	@ (80057b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	4a52      	ldr	r2, [pc, #328]	@ (80057b4 <HAL_RCC_ClockConfig+0x1bc>)
 800566a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800566e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005670:	4b50      	ldr	r3, [pc, #320]	@ (80057b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	494d      	ldr	r1, [pc, #308]	@ (80057b4 <HAL_RCC_ClockConfig+0x1bc>)
 800567e:	4313      	orrs	r3, r2
 8005680:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	2b00      	cmp	r3, #0
 800568c:	d044      	beq.n	8005718 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d107      	bne.n	80056a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005696:	4b47      	ldr	r3, [pc, #284]	@ (80057b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d119      	bne.n	80056d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e07f      	b.n	80057a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d003      	beq.n	80056b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056b2:	2b03      	cmp	r3, #3
 80056b4:	d107      	bne.n	80056c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056b6:	4b3f      	ldr	r3, [pc, #252]	@ (80057b4 <HAL_RCC_ClockConfig+0x1bc>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d109      	bne.n	80056d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e06f      	b.n	80057a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056c6:	4b3b      	ldr	r3, [pc, #236]	@ (80057b4 <HAL_RCC_ClockConfig+0x1bc>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e067      	b.n	80057a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056d6:	4b37      	ldr	r3, [pc, #220]	@ (80057b4 <HAL_RCC_ClockConfig+0x1bc>)
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f023 0203 	bic.w	r2, r3, #3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	4934      	ldr	r1, [pc, #208]	@ (80057b4 <HAL_RCC_ClockConfig+0x1bc>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056e8:	f7fe fc94 	bl	8004014 <HAL_GetTick>
 80056ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ee:	e00a      	b.n	8005706 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056f0:	f7fe fc90 	bl	8004014 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056fe:	4293      	cmp	r3, r2
 8005700:	d901      	bls.n	8005706 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e04f      	b.n	80057a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005706:	4b2b      	ldr	r3, [pc, #172]	@ (80057b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f003 020c 	and.w	r2, r3, #12
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	429a      	cmp	r2, r3
 8005716:	d1eb      	bne.n	80056f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005718:	4b25      	ldr	r3, [pc, #148]	@ (80057b0 <HAL_RCC_ClockConfig+0x1b8>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 030f 	and.w	r3, r3, #15
 8005720:	683a      	ldr	r2, [r7, #0]
 8005722:	429a      	cmp	r2, r3
 8005724:	d20c      	bcs.n	8005740 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005726:	4b22      	ldr	r3, [pc, #136]	@ (80057b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	b2d2      	uxtb	r2, r2
 800572c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800572e:	4b20      	ldr	r3, [pc, #128]	@ (80057b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 030f 	and.w	r3, r3, #15
 8005736:	683a      	ldr	r2, [r7, #0]
 8005738:	429a      	cmp	r2, r3
 800573a:	d001      	beq.n	8005740 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e032      	b.n	80057a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0304 	and.w	r3, r3, #4
 8005748:	2b00      	cmp	r3, #0
 800574a:	d008      	beq.n	800575e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800574c:	4b19      	ldr	r3, [pc, #100]	@ (80057b4 <HAL_RCC_ClockConfig+0x1bc>)
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	4916      	ldr	r1, [pc, #88]	@ (80057b4 <HAL_RCC_ClockConfig+0x1bc>)
 800575a:	4313      	orrs	r3, r2
 800575c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0308 	and.w	r3, r3, #8
 8005766:	2b00      	cmp	r3, #0
 8005768:	d009      	beq.n	800577e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800576a:	4b12      	ldr	r3, [pc, #72]	@ (80057b4 <HAL_RCC_ClockConfig+0x1bc>)
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	490e      	ldr	r1, [pc, #56]	@ (80057b4 <HAL_RCC_ClockConfig+0x1bc>)
 800577a:	4313      	orrs	r3, r2
 800577c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800577e:	f000 f821 	bl	80057c4 <HAL_RCC_GetSysClockFreq>
 8005782:	4602      	mov	r2, r0
 8005784:	4b0b      	ldr	r3, [pc, #44]	@ (80057b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	091b      	lsrs	r3, r3, #4
 800578a:	f003 030f 	and.w	r3, r3, #15
 800578e:	490a      	ldr	r1, [pc, #40]	@ (80057b8 <HAL_RCC_ClockConfig+0x1c0>)
 8005790:	5ccb      	ldrb	r3, [r1, r3]
 8005792:	fa22 f303 	lsr.w	r3, r2, r3
 8005796:	4a09      	ldr	r2, [pc, #36]	@ (80057bc <HAL_RCC_ClockConfig+0x1c4>)
 8005798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800579a:	4b09      	ldr	r3, [pc, #36]	@ (80057c0 <HAL_RCC_ClockConfig+0x1c8>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4618      	mov	r0, r3
 80057a0:	f7fe fbf4 	bl	8003f8c <HAL_InitTick>

  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	40023c00 	.word	0x40023c00
 80057b4:	40023800 	.word	0x40023800
 80057b8:	0800b134 	.word	0x0800b134
 80057bc:	2000007c 	.word	0x2000007c
 80057c0:	20000080 	.word	0x20000080

080057c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057c8:	b094      	sub	sp, #80	@ 0x50
 80057ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80057cc:	2300      	movs	r3, #0
 80057ce:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80057d0:	2300      	movs	r3, #0
 80057d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80057d4:	2300      	movs	r3, #0
 80057d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80057d8:	2300      	movs	r3, #0
 80057da:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057dc:	4b79      	ldr	r3, [pc, #484]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f003 030c 	and.w	r3, r3, #12
 80057e4:	2b08      	cmp	r3, #8
 80057e6:	d00d      	beq.n	8005804 <HAL_RCC_GetSysClockFreq+0x40>
 80057e8:	2b08      	cmp	r3, #8
 80057ea:	f200 80e1 	bhi.w	80059b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d002      	beq.n	80057f8 <HAL_RCC_GetSysClockFreq+0x34>
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	d003      	beq.n	80057fe <HAL_RCC_GetSysClockFreq+0x3a>
 80057f6:	e0db      	b.n	80059b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057f8:	4b73      	ldr	r3, [pc, #460]	@ (80059c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80057fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80057fc:	e0db      	b.n	80059b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057fe:	4b73      	ldr	r3, [pc, #460]	@ (80059cc <HAL_RCC_GetSysClockFreq+0x208>)
 8005800:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005802:	e0d8      	b.n	80059b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005804:	4b6f      	ldr	r3, [pc, #444]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800580c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800580e:	4b6d      	ldr	r3, [pc, #436]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d063      	beq.n	80058e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800581a:	4b6a      	ldr	r3, [pc, #424]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	099b      	lsrs	r3, r3, #6
 8005820:	2200      	movs	r2, #0
 8005822:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005824:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800582c:	633b      	str	r3, [r7, #48]	@ 0x30
 800582e:	2300      	movs	r3, #0
 8005830:	637b      	str	r3, [r7, #52]	@ 0x34
 8005832:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005836:	4622      	mov	r2, r4
 8005838:	462b      	mov	r3, r5
 800583a:	f04f 0000 	mov.w	r0, #0
 800583e:	f04f 0100 	mov.w	r1, #0
 8005842:	0159      	lsls	r1, r3, #5
 8005844:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005848:	0150      	lsls	r0, r2, #5
 800584a:	4602      	mov	r2, r0
 800584c:	460b      	mov	r3, r1
 800584e:	4621      	mov	r1, r4
 8005850:	1a51      	subs	r1, r2, r1
 8005852:	6139      	str	r1, [r7, #16]
 8005854:	4629      	mov	r1, r5
 8005856:	eb63 0301 	sbc.w	r3, r3, r1
 800585a:	617b      	str	r3, [r7, #20]
 800585c:	f04f 0200 	mov.w	r2, #0
 8005860:	f04f 0300 	mov.w	r3, #0
 8005864:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005868:	4659      	mov	r1, fp
 800586a:	018b      	lsls	r3, r1, #6
 800586c:	4651      	mov	r1, sl
 800586e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005872:	4651      	mov	r1, sl
 8005874:	018a      	lsls	r2, r1, #6
 8005876:	4651      	mov	r1, sl
 8005878:	ebb2 0801 	subs.w	r8, r2, r1
 800587c:	4659      	mov	r1, fp
 800587e:	eb63 0901 	sbc.w	r9, r3, r1
 8005882:	f04f 0200 	mov.w	r2, #0
 8005886:	f04f 0300 	mov.w	r3, #0
 800588a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800588e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005892:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005896:	4690      	mov	r8, r2
 8005898:	4699      	mov	r9, r3
 800589a:	4623      	mov	r3, r4
 800589c:	eb18 0303 	adds.w	r3, r8, r3
 80058a0:	60bb      	str	r3, [r7, #8]
 80058a2:	462b      	mov	r3, r5
 80058a4:	eb49 0303 	adc.w	r3, r9, r3
 80058a8:	60fb      	str	r3, [r7, #12]
 80058aa:	f04f 0200 	mov.w	r2, #0
 80058ae:	f04f 0300 	mov.w	r3, #0
 80058b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80058b6:	4629      	mov	r1, r5
 80058b8:	024b      	lsls	r3, r1, #9
 80058ba:	4621      	mov	r1, r4
 80058bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80058c0:	4621      	mov	r1, r4
 80058c2:	024a      	lsls	r2, r1, #9
 80058c4:	4610      	mov	r0, r2
 80058c6:	4619      	mov	r1, r3
 80058c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058ca:	2200      	movs	r2, #0
 80058cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80058d4:	f7fa fff2 	bl	80008bc <__aeabi_uldivmod>
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	4613      	mov	r3, r2
 80058de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058e0:	e058      	b.n	8005994 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058e2:	4b38      	ldr	r3, [pc, #224]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	099b      	lsrs	r3, r3, #6
 80058e8:	2200      	movs	r2, #0
 80058ea:	4618      	mov	r0, r3
 80058ec:	4611      	mov	r1, r2
 80058ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80058f2:	623b      	str	r3, [r7, #32]
 80058f4:	2300      	movs	r3, #0
 80058f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80058f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80058fc:	4642      	mov	r2, r8
 80058fe:	464b      	mov	r3, r9
 8005900:	f04f 0000 	mov.w	r0, #0
 8005904:	f04f 0100 	mov.w	r1, #0
 8005908:	0159      	lsls	r1, r3, #5
 800590a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800590e:	0150      	lsls	r0, r2, #5
 8005910:	4602      	mov	r2, r0
 8005912:	460b      	mov	r3, r1
 8005914:	4641      	mov	r1, r8
 8005916:	ebb2 0a01 	subs.w	sl, r2, r1
 800591a:	4649      	mov	r1, r9
 800591c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005920:	f04f 0200 	mov.w	r2, #0
 8005924:	f04f 0300 	mov.w	r3, #0
 8005928:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800592c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005930:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005934:	ebb2 040a 	subs.w	r4, r2, sl
 8005938:	eb63 050b 	sbc.w	r5, r3, fp
 800593c:	f04f 0200 	mov.w	r2, #0
 8005940:	f04f 0300 	mov.w	r3, #0
 8005944:	00eb      	lsls	r3, r5, #3
 8005946:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800594a:	00e2      	lsls	r2, r4, #3
 800594c:	4614      	mov	r4, r2
 800594e:	461d      	mov	r5, r3
 8005950:	4643      	mov	r3, r8
 8005952:	18e3      	adds	r3, r4, r3
 8005954:	603b      	str	r3, [r7, #0]
 8005956:	464b      	mov	r3, r9
 8005958:	eb45 0303 	adc.w	r3, r5, r3
 800595c:	607b      	str	r3, [r7, #4]
 800595e:	f04f 0200 	mov.w	r2, #0
 8005962:	f04f 0300 	mov.w	r3, #0
 8005966:	e9d7 4500 	ldrd	r4, r5, [r7]
 800596a:	4629      	mov	r1, r5
 800596c:	028b      	lsls	r3, r1, #10
 800596e:	4621      	mov	r1, r4
 8005970:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005974:	4621      	mov	r1, r4
 8005976:	028a      	lsls	r2, r1, #10
 8005978:	4610      	mov	r0, r2
 800597a:	4619      	mov	r1, r3
 800597c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800597e:	2200      	movs	r2, #0
 8005980:	61bb      	str	r3, [r7, #24]
 8005982:	61fa      	str	r2, [r7, #28]
 8005984:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005988:	f7fa ff98 	bl	80008bc <__aeabi_uldivmod>
 800598c:	4602      	mov	r2, r0
 800598e:	460b      	mov	r3, r1
 8005990:	4613      	mov	r3, r2
 8005992:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005994:	4b0b      	ldr	r3, [pc, #44]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	0c1b      	lsrs	r3, r3, #16
 800599a:	f003 0303 	and.w	r3, r3, #3
 800599e:	3301      	adds	r3, #1
 80059a0:	005b      	lsls	r3, r3, #1
 80059a2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80059a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80059a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80059ae:	e002      	b.n	80059b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059b0:	4b05      	ldr	r3, [pc, #20]	@ (80059c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80059b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80059b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3750      	adds	r7, #80	@ 0x50
 80059bc:	46bd      	mov	sp, r7
 80059be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059c2:	bf00      	nop
 80059c4:	40023800 	.word	0x40023800
 80059c8:	00f42400 	.word	0x00f42400
 80059cc:	007a1200 	.word	0x007a1200

080059d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059d0:	b480      	push	{r7}
 80059d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059d4:	4b03      	ldr	r3, [pc, #12]	@ (80059e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80059d6:	681b      	ldr	r3, [r3, #0]
}
 80059d8:	4618      	mov	r0, r3
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	2000007c 	.word	0x2000007c

080059e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80059ec:	f7ff fff0 	bl	80059d0 <HAL_RCC_GetHCLKFreq>
 80059f0:	4602      	mov	r2, r0
 80059f2:	4b05      	ldr	r3, [pc, #20]	@ (8005a08 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	0a9b      	lsrs	r3, r3, #10
 80059f8:	f003 0307 	and.w	r3, r3, #7
 80059fc:	4903      	ldr	r1, [pc, #12]	@ (8005a0c <HAL_RCC_GetPCLK1Freq+0x24>)
 80059fe:	5ccb      	ldrb	r3, [r1, r3]
 8005a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	40023800 	.word	0x40023800
 8005a0c:	0800b144 	.word	0x0800b144

08005a10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0301 	and.w	r3, r3, #1
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10b      	bne.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d105      	bne.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d075      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a44:	4b91      	ldr	r3, [pc, #580]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005a46:	2200      	movs	r2, #0
 8005a48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a4a:	f7fe fae3 	bl	8004014 <HAL_GetTick>
 8005a4e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a50:	e008      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a52:	f7fe fadf 	bl	8004014 <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d901      	bls.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e189      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a64:	4b8a      	ldr	r3, [pc, #552]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1f0      	bne.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0301 	and.w	r3, r3, #1
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d009      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	019a      	lsls	r2, r3, #6
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	071b      	lsls	r3, r3, #28
 8005a88:	4981      	ldr	r1, [pc, #516]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0302 	and.w	r3, r3, #2
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d01f      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005a9c:	4b7c      	ldr	r3, [pc, #496]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005aa2:	0f1b      	lsrs	r3, r3, #28
 8005aa4:	f003 0307 	and.w	r3, r3, #7
 8005aa8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	019a      	lsls	r2, r3, #6
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	061b      	lsls	r3, r3, #24
 8005ab6:	431a      	orrs	r2, r3
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	071b      	lsls	r3, r3, #28
 8005abc:	4974      	ldr	r1, [pc, #464]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005ac4:	4b72      	ldr	r3, [pc, #456]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ac6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005aca:	f023 021f 	bic.w	r2, r3, #31
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	69db      	ldr	r3, [r3, #28]
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	496e      	ldr	r1, [pc, #440]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00d      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	019a      	lsls	r2, r3, #6
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	061b      	lsls	r3, r3, #24
 8005af4:	431a      	orrs	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	071b      	lsls	r3, r3, #28
 8005afc:	4964      	ldr	r1, [pc, #400]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005b04:	4b61      	ldr	r3, [pc, #388]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005b06:	2201      	movs	r2, #1
 8005b08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b0a:	f7fe fa83 	bl	8004014 <HAL_GetTick>
 8005b0e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b10:	e008      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b12:	f7fe fa7f 	bl	8004014 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d901      	bls.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e129      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b24:	4b5a      	ldr	r3, [pc, #360]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d0f0      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0304 	and.w	r3, r3, #4
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d105      	bne.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d079      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005b48:	4b52      	ldr	r3, [pc, #328]	@ (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b4e:	f7fe fa61 	bl	8004014 <HAL_GetTick>
 8005b52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b54:	e008      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b56:	f7fe fa5d 	bl	8004014 <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d901      	bls.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e107      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b68:	4b49      	ldr	r3, [pc, #292]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b74:	d0ef      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0304 	and.w	r3, r3, #4
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d020      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005b82:	4b43      	ldr	r3, [pc, #268]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b88:	0f1b      	lsrs	r3, r3, #28
 8005b8a:	f003 0307 	and.w	r3, r3, #7
 8005b8e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	019a      	lsls	r2, r3, #6
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	061b      	lsls	r3, r3, #24
 8005b9c:	431a      	orrs	r2, r3
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	071b      	lsls	r3, r3, #28
 8005ba2:	493b      	ldr	r1, [pc, #236]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005baa:	4b39      	ldr	r3, [pc, #228]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005bb0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a1b      	ldr	r3, [r3, #32]
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	021b      	lsls	r3, r3, #8
 8005bbc:	4934      	ldr	r1, [pc, #208]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0308 	and.w	r3, r3, #8
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d01e      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005bd0:	4b2f      	ldr	r3, [pc, #188]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bd6:	0e1b      	lsrs	r3, r3, #24
 8005bd8:	f003 030f 	and.w	r3, r3, #15
 8005bdc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	019a      	lsls	r2, r3, #6
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	061b      	lsls	r3, r3, #24
 8005be8:	431a      	orrs	r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	071b      	lsls	r3, r3, #28
 8005bf0:	4927      	ldr	r1, [pc, #156]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005bf8:	4b25      	ldr	r3, [pc, #148]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005bfe:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c06:	4922      	ldr	r1, [pc, #136]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005c0e:	4b21      	ldr	r3, [pc, #132]	@ (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005c10:	2201      	movs	r2, #1
 8005c12:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c14:	f7fe f9fe 	bl	8004014 <HAL_GetTick>
 8005c18:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c1a:	e008      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c1c:	f7fe f9fa 	bl	8004014 <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d901      	bls.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e0a4      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c2e:	4b18      	ldr	r3, [pc, #96]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c3a:	d1ef      	bne.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0320 	and.w	r3, r3, #32
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	f000 808b 	beq.w	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	60fb      	str	r3, [r7, #12]
 8005c4e:	4b10      	ldr	r3, [pc, #64]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c52:	4a0f      	ldr	r2, [pc, #60]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c58:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c62:	60fb      	str	r3, [r7, #12]
 8005c64:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005c66:	4b0c      	ldr	r3, [pc, #48]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a0b      	ldr	r2, [pc, #44]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005c6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c70:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c72:	f7fe f9cf 	bl	8004014 <HAL_GetTick>
 8005c76:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005c78:	e010      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c7a:	f7fe f9cb 	bl	8004014 <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d909      	bls.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e075      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005c8c:	42470068 	.word	0x42470068
 8005c90:	40023800 	.word	0x40023800
 8005c94:	42470070 	.word	0x42470070
 8005c98:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005c9c:	4b38      	ldr	r3, [pc, #224]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d0e8      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ca8:	4b36      	ldr	r3, [pc, #216]	@ (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cb0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d02f      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cbc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d028      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005cc6:	4b2f      	ldr	r3, [pc, #188]	@ (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cce:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005cd0:	4b2d      	ldr	r3, [pc, #180]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005cd6:	4b2c      	ldr	r3, [pc, #176]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005cd8:	2200      	movs	r2, #0
 8005cda:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005cdc:	4a29      	ldr	r2, [pc, #164]	@ (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005ce2:	4b28      	ldr	r3, [pc, #160]	@ (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ce6:	f003 0301 	and.w	r3, r3, #1
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d114      	bne.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005cee:	f7fe f991 	bl	8004014 <HAL_GetTick>
 8005cf2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cf4:	e00a      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cf6:	f7fe f98d 	bl	8004014 <HAL_GetTick>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d901      	bls.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e035      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d10:	f003 0302 	and.w	r3, r3, #2
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d0ee      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d24:	d10d      	bne.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005d26:	4b17      	ldr	r3, [pc, #92]	@ (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d32:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005d36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d3a:	4912      	ldr	r1, [pc, #72]	@ (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	608b      	str	r3, [r1, #8]
 8005d40:	e005      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005d42:	4b10      	ldr	r3, [pc, #64]	@ (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	4a0f      	ldr	r2, [pc, #60]	@ (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d48:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005d4c:	6093      	str	r3, [r2, #8]
 8005d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d50:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d5a:	490a      	ldr	r1, [pc, #40]	@ (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0310 	and.w	r3, r3, #16
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d004      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005d72:	4b06      	ldr	r3, [pc, #24]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005d74:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3718      	adds	r7, #24
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	40007000 	.word	0x40007000
 8005d84:	40023800 	.word	0x40023800
 8005d88:	42470e40 	.word	0x42470e40
 8005d8c:	424711e0 	.word	0x424711e0

08005d90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e07b      	b.n	8005e9a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d108      	bne.n	8005dbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005db2:	d009      	beq.n	8005dc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	61da      	str	r2, [r3, #28]
 8005dba:	e005      	b.n	8005dc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d106      	bne.n	8005de8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f7fd ff48 	bl	8003c78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dfe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005e10:	431a      	orrs	r2, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e1a:	431a      	orrs	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	f003 0302 	and.w	r3, r3, #2
 8005e24:	431a      	orrs	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	431a      	orrs	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e38:	431a      	orrs	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	69db      	ldr	r3, [r3, #28]
 8005e3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e42:	431a      	orrs	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a1b      	ldr	r3, [r3, #32]
 8005e48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e4c:	ea42 0103 	orr.w	r1, r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e54:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	0c1b      	lsrs	r3, r3, #16
 8005e66:	f003 0104 	and.w	r1, r3, #4
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e6e:	f003 0210 	and.w	r2, r3, #16
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	430a      	orrs	r2, r1
 8005e78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	69da      	ldr	r2, [r3, #28]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3708      	adds	r7, #8
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b082      	sub	sp, #8
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d101      	bne.n	8005eb4 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e01a      	b.n	8005eea <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005eca:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f7fd ff2b 	bl	8003d28 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3708      	adds	r7, #8
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b088      	sub	sp, #32
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	60f8      	str	r0, [r7, #12]
 8005efa:	60b9      	str	r1, [r7, #8]
 8005efc:	603b      	str	r3, [r7, #0]
 8005efe:	4613      	mov	r3, r2
 8005f00:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f02:	f7fe f887 	bl	8004014 <HAL_GetTick>
 8005f06:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005f08:	88fb      	ldrh	r3, [r7, #6]
 8005f0a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d001      	beq.n	8005f1c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005f18:	2302      	movs	r3, #2
 8005f1a:	e12a      	b.n	8006172 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d002      	beq.n	8005f28 <HAL_SPI_Transmit+0x36>
 8005f22:	88fb      	ldrh	r3, [r7, #6]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e122      	b.n	8006172 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d101      	bne.n	8005f3a <HAL_SPI_Transmit+0x48>
 8005f36:	2302      	movs	r3, #2
 8005f38:	e11b      	b.n	8006172 <HAL_SPI_Transmit+0x280>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2203      	movs	r2, #3
 8005f46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	88fa      	ldrh	r2, [r7, #6]
 8005f5a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	88fa      	ldrh	r2, [r7, #6]
 8005f60:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2200      	movs	r2, #0
 8005f78:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f88:	d10f      	bne.n	8005faa <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fa8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fb4:	2b40      	cmp	r3, #64	@ 0x40
 8005fb6:	d007      	beq.n	8005fc8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fc6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fd0:	d152      	bne.n	8006078 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d002      	beq.n	8005fe0 <HAL_SPI_Transmit+0xee>
 8005fda:	8b7b      	ldrh	r3, [r7, #26]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d145      	bne.n	800606c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fe4:	881a      	ldrh	r2, [r3, #0]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ff0:	1c9a      	adds	r2, r3, #2
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006004:	e032      	b.n	800606c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f003 0302 	and.w	r3, r3, #2
 8006010:	2b02      	cmp	r3, #2
 8006012:	d112      	bne.n	800603a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006018:	881a      	ldrh	r2, [r3, #0]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006024:	1c9a      	adds	r2, r3, #2
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800602e:	b29b      	uxth	r3, r3
 8006030:	3b01      	subs	r3, #1
 8006032:	b29a      	uxth	r2, r3
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006038:	e018      	b.n	800606c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800603a:	f7fd ffeb 	bl	8004014 <HAL_GetTick>
 800603e:	4602      	mov	r2, r0
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	683a      	ldr	r2, [r7, #0]
 8006046:	429a      	cmp	r2, r3
 8006048:	d803      	bhi.n	8006052 <HAL_SPI_Transmit+0x160>
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006050:	d102      	bne.n	8006058 <HAL_SPI_Transmit+0x166>
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d109      	bne.n	800606c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e082      	b.n	8006172 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006070:	b29b      	uxth	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d1c7      	bne.n	8006006 <HAL_SPI_Transmit+0x114>
 8006076:	e053      	b.n	8006120 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d002      	beq.n	8006086 <HAL_SPI_Transmit+0x194>
 8006080:	8b7b      	ldrh	r3, [r7, #26]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d147      	bne.n	8006116 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	330c      	adds	r3, #12
 8006090:	7812      	ldrb	r2, [r2, #0]
 8006092:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006098:	1c5a      	adds	r2, r3, #1
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	3b01      	subs	r3, #1
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80060ac:	e033      	b.n	8006116 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f003 0302 	and.w	r3, r3, #2
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d113      	bne.n	80060e4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	330c      	adds	r3, #12
 80060c6:	7812      	ldrb	r2, [r2, #0]
 80060c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ce:	1c5a      	adds	r2, r3, #1
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060d8:	b29b      	uxth	r3, r3
 80060da:	3b01      	subs	r3, #1
 80060dc:	b29a      	uxth	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80060e2:	e018      	b.n	8006116 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060e4:	f7fd ff96 	bl	8004014 <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d803      	bhi.n	80060fc <HAL_SPI_Transmit+0x20a>
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060fa:	d102      	bne.n	8006102 <HAL_SPI_Transmit+0x210>
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d109      	bne.n	8006116 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e02d      	b.n	8006172 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800611a:	b29b      	uxth	r3, r3
 800611c:	2b00      	cmp	r3, #0
 800611e:	d1c6      	bne.n	80060ae <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006120:	69fa      	ldr	r2, [r7, #28]
 8006122:	6839      	ldr	r1, [r7, #0]
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f000 fbe7 	bl	80068f8 <SPI_EndRxTxTransaction>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d002      	beq.n	8006136 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2220      	movs	r2, #32
 8006134:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10a      	bne.n	8006154 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800613e:	2300      	movs	r3, #0
 8006140:	617b      	str	r3, [r7, #20]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	617b      	str	r3, [r7, #20]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	617b      	str	r3, [r7, #20]
 8006152:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006168:	2b00      	cmp	r3, #0
 800616a:	d001      	beq.n	8006170 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e000      	b.n	8006172 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006170:	2300      	movs	r3, #0
  }
}
 8006172:	4618      	mov	r0, r3
 8006174:	3720      	adds	r7, #32
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b088      	sub	sp, #32
 800617e:	af02      	add	r7, sp, #8
 8006180:	60f8      	str	r0, [r7, #12]
 8006182:	60b9      	str	r1, [r7, #8]
 8006184:	603b      	str	r3, [r7, #0]
 8006186:	4613      	mov	r3, r2
 8006188:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006190:	b2db      	uxtb	r3, r3
 8006192:	2b01      	cmp	r3, #1
 8006194:	d001      	beq.n	800619a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8006196:	2302      	movs	r3, #2
 8006198:	e104      	b.n	80063a4 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061a2:	d112      	bne.n	80061ca <HAL_SPI_Receive+0x50>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10e      	bne.n	80061ca <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2204      	movs	r2, #4
 80061b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80061b4:	88fa      	ldrh	r2, [r7, #6]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	9300      	str	r3, [sp, #0]
 80061ba:	4613      	mov	r3, r2
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	68b9      	ldr	r1, [r7, #8]
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f000 f8f3 	bl	80063ac <HAL_SPI_TransmitReceive>
 80061c6:	4603      	mov	r3, r0
 80061c8:	e0ec      	b.n	80063a4 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061ca:	f7fd ff23 	bl	8004014 <HAL_GetTick>
 80061ce:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d002      	beq.n	80061dc <HAL_SPI_Receive+0x62>
 80061d6:	88fb      	ldrh	r3, [r7, #6]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d101      	bne.n	80061e0 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e0e1      	b.n	80063a4 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d101      	bne.n	80061ee <HAL_SPI_Receive+0x74>
 80061ea:	2302      	movs	r3, #2
 80061ec:	e0da      	b.n	80063a4 <HAL_SPI_Receive+0x22a>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2204      	movs	r2, #4
 80061fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	88fa      	ldrh	r2, [r7, #6]
 800620e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	88fa      	ldrh	r2, [r7, #6]
 8006214:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2200      	movs	r2, #0
 800621a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800623c:	d10f      	bne.n	800625e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800624c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800625c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006268:	2b40      	cmp	r3, #64	@ 0x40
 800626a:	d007      	beq.n	800627c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800627a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d170      	bne.n	8006366 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006284:	e035      	b.n	80062f2 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f003 0301 	and.w	r3, r3, #1
 8006290:	2b01      	cmp	r3, #1
 8006292:	d115      	bne.n	80062c0 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f103 020c 	add.w	r2, r3, #12
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a0:	7812      	ldrb	r2, [r2, #0]
 80062a2:	b2d2      	uxtb	r2, r2
 80062a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062aa:	1c5a      	adds	r2, r3, #1
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	3b01      	subs	r3, #1
 80062b8:	b29a      	uxth	r2, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80062be:	e018      	b.n	80062f2 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062c0:	f7fd fea8 	bl	8004014 <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	683a      	ldr	r2, [r7, #0]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d803      	bhi.n	80062d8 <HAL_SPI_Receive+0x15e>
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062d6:	d102      	bne.n	80062de <HAL_SPI_Receive+0x164>
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d109      	bne.n	80062f2 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e058      	b.n	80063a4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1c4      	bne.n	8006286 <HAL_SPI_Receive+0x10c>
 80062fc:	e038      	b.n	8006370 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	2b01      	cmp	r3, #1
 800630a:	d113      	bne.n	8006334 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68da      	ldr	r2, [r3, #12]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006316:	b292      	uxth	r2, r2
 8006318:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800631e:	1c9a      	adds	r2, r3, #2
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006328:	b29b      	uxth	r3, r3
 800632a:	3b01      	subs	r3, #1
 800632c:	b29a      	uxth	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006332:	e018      	b.n	8006366 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006334:	f7fd fe6e 	bl	8004014 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	683a      	ldr	r2, [r7, #0]
 8006340:	429a      	cmp	r2, r3
 8006342:	d803      	bhi.n	800634c <HAL_SPI_Receive+0x1d2>
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800634a:	d102      	bne.n	8006352 <HAL_SPI_Receive+0x1d8>
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d109      	bne.n	8006366 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2201      	movs	r2, #1
 8006356:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e01e      	b.n	80063a4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800636a:	b29b      	uxth	r3, r3
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1c6      	bne.n	80062fe <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006370:	697a      	ldr	r2, [r7, #20]
 8006372:	6839      	ldr	r1, [r7, #0]
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f000 fa59 	bl	800682c <SPI_EndRxTransaction>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d002      	beq.n	8006386 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2220      	movs	r2, #32
 8006384:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e000      	b.n	80063a4 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80063a2:	2300      	movs	r3, #0
  }
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3718      	adds	r7, #24
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b08a      	sub	sp, #40	@ 0x28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
 80063b8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80063ba:	2301      	movs	r3, #1
 80063bc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063be:	f7fd fe29 	bl	8004014 <HAL_GetTick>
 80063c2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063ca:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80063d2:	887b      	ldrh	r3, [r7, #2]
 80063d4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80063d6:	7ffb      	ldrb	r3, [r7, #31]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d00c      	beq.n	80063f6 <HAL_SPI_TransmitReceive+0x4a>
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063e2:	d106      	bne.n	80063f2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d102      	bne.n	80063f2 <HAL_SPI_TransmitReceive+0x46>
 80063ec:	7ffb      	ldrb	r3, [r7, #31]
 80063ee:	2b04      	cmp	r3, #4
 80063f0:	d001      	beq.n	80063f6 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80063f2:	2302      	movs	r3, #2
 80063f4:	e17f      	b.n	80066f6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d005      	beq.n	8006408 <HAL_SPI_TransmitReceive+0x5c>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d002      	beq.n	8006408 <HAL_SPI_TransmitReceive+0x5c>
 8006402:	887b      	ldrh	r3, [r7, #2]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d101      	bne.n	800640c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e174      	b.n	80066f6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006412:	2b01      	cmp	r3, #1
 8006414:	d101      	bne.n	800641a <HAL_SPI_TransmitReceive+0x6e>
 8006416:	2302      	movs	r3, #2
 8006418:	e16d      	b.n	80066f6 <HAL_SPI_TransmitReceive+0x34a>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006428:	b2db      	uxtb	r3, r3
 800642a:	2b04      	cmp	r3, #4
 800642c:	d003      	beq.n	8006436 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2205      	movs	r2, #5
 8006432:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	887a      	ldrh	r2, [r7, #2]
 8006446:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	887a      	ldrh	r2, [r7, #2]
 800644c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	887a      	ldrh	r2, [r7, #2]
 8006458:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	887a      	ldrh	r2, [r7, #2]
 800645e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006476:	2b40      	cmp	r3, #64	@ 0x40
 8006478:	d007      	beq.n	800648a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006488:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006492:	d17e      	bne.n	8006592 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d002      	beq.n	80064a2 <HAL_SPI_TransmitReceive+0xf6>
 800649c:	8afb      	ldrh	r3, [r7, #22]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d16c      	bne.n	800657c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064a6:	881a      	ldrh	r2, [r3, #0]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064b2:	1c9a      	adds	r2, r3, #2
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064bc:	b29b      	uxth	r3, r3
 80064be:	3b01      	subs	r3, #1
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064c6:	e059      	b.n	800657c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d11b      	bne.n	800650e <HAL_SPI_TransmitReceive+0x162>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064da:	b29b      	uxth	r3, r3
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d016      	beq.n	800650e <HAL_SPI_TransmitReceive+0x162>
 80064e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d113      	bne.n	800650e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ea:	881a      	ldrh	r2, [r3, #0]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064f6:	1c9a      	adds	r2, r3, #2
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006500:	b29b      	uxth	r3, r3
 8006502:	3b01      	subs	r3, #1
 8006504:	b29a      	uxth	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800650a:	2300      	movs	r3, #0
 800650c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f003 0301 	and.w	r3, r3, #1
 8006518:	2b01      	cmp	r3, #1
 800651a:	d119      	bne.n	8006550 <HAL_SPI_TransmitReceive+0x1a4>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006520:	b29b      	uxth	r3, r3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d014      	beq.n	8006550 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68da      	ldr	r2, [r3, #12]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006530:	b292      	uxth	r2, r2
 8006532:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006538:	1c9a      	adds	r2, r3, #2
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006542:	b29b      	uxth	r3, r3
 8006544:	3b01      	subs	r3, #1
 8006546:	b29a      	uxth	r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800654c:	2301      	movs	r3, #1
 800654e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006550:	f7fd fd60 	bl	8004014 <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	6a3b      	ldr	r3, [r7, #32]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800655c:	429a      	cmp	r2, r3
 800655e:	d80d      	bhi.n	800657c <HAL_SPI_TransmitReceive+0x1d0>
 8006560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006562:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006566:	d009      	beq.n	800657c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e0bc      	b.n	80066f6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006580:	b29b      	uxth	r3, r3
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1a0      	bne.n	80064c8 <HAL_SPI_TransmitReceive+0x11c>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800658a:	b29b      	uxth	r3, r3
 800658c:	2b00      	cmp	r3, #0
 800658e:	d19b      	bne.n	80064c8 <HAL_SPI_TransmitReceive+0x11c>
 8006590:	e082      	b.n	8006698 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d002      	beq.n	80065a0 <HAL_SPI_TransmitReceive+0x1f4>
 800659a:	8afb      	ldrh	r3, [r7, #22]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d171      	bne.n	8006684 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	330c      	adds	r3, #12
 80065aa:	7812      	ldrb	r2, [r2, #0]
 80065ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065b2:	1c5a      	adds	r2, r3, #1
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065bc:	b29b      	uxth	r3, r3
 80065be:	3b01      	subs	r3, #1
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065c6:	e05d      	b.n	8006684 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f003 0302 	and.w	r3, r3, #2
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d11c      	bne.n	8006610 <HAL_SPI_TransmitReceive+0x264>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065da:	b29b      	uxth	r3, r3
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d017      	beq.n	8006610 <HAL_SPI_TransmitReceive+0x264>
 80065e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d114      	bne.n	8006610 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	330c      	adds	r3, #12
 80065f0:	7812      	ldrb	r2, [r2, #0]
 80065f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065f8:	1c5a      	adds	r2, r3, #1
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006602:	b29b      	uxth	r3, r3
 8006604:	3b01      	subs	r3, #1
 8006606:	b29a      	uxth	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800660c:	2300      	movs	r3, #0
 800660e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f003 0301 	and.w	r3, r3, #1
 800661a:	2b01      	cmp	r3, #1
 800661c:	d119      	bne.n	8006652 <HAL_SPI_TransmitReceive+0x2a6>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006622:	b29b      	uxth	r3, r3
 8006624:	2b00      	cmp	r3, #0
 8006626:	d014      	beq.n	8006652 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68da      	ldr	r2, [r3, #12]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006632:	b2d2      	uxtb	r2, r2
 8006634:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800663a:	1c5a      	adds	r2, r3, #1
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006644:	b29b      	uxth	r3, r3
 8006646:	3b01      	subs	r3, #1
 8006648:	b29a      	uxth	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800664e:	2301      	movs	r3, #1
 8006650:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006652:	f7fd fcdf 	bl	8004014 <HAL_GetTick>
 8006656:	4602      	mov	r2, r0
 8006658:	6a3b      	ldr	r3, [r7, #32]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800665e:	429a      	cmp	r2, r3
 8006660:	d803      	bhi.n	800666a <HAL_SPI_TransmitReceive+0x2be>
 8006662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006664:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006668:	d102      	bne.n	8006670 <HAL_SPI_TransmitReceive+0x2c4>
 800666a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800666c:	2b00      	cmp	r3, #0
 800666e:	d109      	bne.n	8006684 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	e038      	b.n	80066f6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006688:	b29b      	uxth	r3, r3
 800668a:	2b00      	cmp	r3, #0
 800668c:	d19c      	bne.n	80065c8 <HAL_SPI_TransmitReceive+0x21c>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006692:	b29b      	uxth	r3, r3
 8006694:	2b00      	cmp	r3, #0
 8006696:	d197      	bne.n	80065c8 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006698:	6a3a      	ldr	r2, [r7, #32]
 800669a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f000 f92b 	bl	80068f8 <SPI_EndRxTxTransaction>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d008      	beq.n	80066ba <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2220      	movs	r2, #32
 80066ac:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e01d      	b.n	80066f6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10a      	bne.n	80066d8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066c2:	2300      	movs	r3, #0
 80066c4:	613b      	str	r3, [r7, #16]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	613b      	str	r3, [r7, #16]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	613b      	str	r3, [r7, #16]
 80066d6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d001      	beq.n	80066f4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e000      	b.n	80066f6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80066f4:	2300      	movs	r3, #0
  }
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3728      	adds	r7, #40	@ 0x28
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80066fe:	b480      	push	{r7}
 8006700:	b083      	sub	sp, #12
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800670c:	b2db      	uxtb	r3, r3
}
 800670e:	4618      	mov	r0, r3
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
	...

0800671c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b088      	sub	sp, #32
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	603b      	str	r3, [r7, #0]
 8006728:	4613      	mov	r3, r2
 800672a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800672c:	f7fd fc72 	bl	8004014 <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006734:	1a9b      	subs	r3, r3, r2
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	4413      	add	r3, r2
 800673a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800673c:	f7fd fc6a 	bl	8004014 <HAL_GetTick>
 8006740:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006742:	4b39      	ldr	r3, [pc, #228]	@ (8006828 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	015b      	lsls	r3, r3, #5
 8006748:	0d1b      	lsrs	r3, r3, #20
 800674a:	69fa      	ldr	r2, [r7, #28]
 800674c:	fb02 f303 	mul.w	r3, r2, r3
 8006750:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006752:	e054      	b.n	80067fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800675a:	d050      	beq.n	80067fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800675c:	f7fd fc5a 	bl	8004014 <HAL_GetTick>
 8006760:	4602      	mov	r2, r0
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	69fa      	ldr	r2, [r7, #28]
 8006768:	429a      	cmp	r2, r3
 800676a:	d902      	bls.n	8006772 <SPI_WaitFlagStateUntilTimeout+0x56>
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d13d      	bne.n	80067ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006780:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800678a:	d111      	bne.n	80067b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006794:	d004      	beq.n	80067a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800679e:	d107      	bne.n	80067b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067b8:	d10f      	bne.n	80067da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80067c8:	601a      	str	r2, [r3, #0]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80067d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2201      	movs	r2, #1
 80067de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80067ea:	2303      	movs	r3, #3
 80067ec:	e017      	b.n	800681e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d101      	bne.n	80067f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80067f4:	2300      	movs	r3, #0
 80067f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	3b01      	subs	r3, #1
 80067fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	689a      	ldr	r2, [r3, #8]
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	4013      	ands	r3, r2
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	429a      	cmp	r2, r3
 800680c:	bf0c      	ite	eq
 800680e:	2301      	moveq	r3, #1
 8006810:	2300      	movne	r3, #0
 8006812:	b2db      	uxtb	r3, r3
 8006814:	461a      	mov	r2, r3
 8006816:	79fb      	ldrb	r3, [r7, #7]
 8006818:	429a      	cmp	r2, r3
 800681a:	d19b      	bne.n	8006754 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3720      	adds	r7, #32
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	2000007c 	.word	0x2000007c

0800682c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b086      	sub	sp, #24
 8006830:	af02      	add	r7, sp, #8
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006840:	d111      	bne.n	8006866 <SPI_EndRxTransaction+0x3a>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800684a:	d004      	beq.n	8006856 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006854:	d107      	bne.n	8006866 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006864:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800686e:	d12a      	bne.n	80068c6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006878:	d012      	beq.n	80068a0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	9300      	str	r3, [sp, #0]
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	2200      	movs	r2, #0
 8006882:	2180      	movs	r1, #128	@ 0x80
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f7ff ff49 	bl	800671c <SPI_WaitFlagStateUntilTimeout>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d02d      	beq.n	80068ec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006894:	f043 0220 	orr.w	r2, r3, #32
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e026      	b.n	80068ee <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	2200      	movs	r2, #0
 80068a8:	2101      	movs	r1, #1
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f7ff ff36 	bl	800671c <SPI_WaitFlagStateUntilTimeout>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d01a      	beq.n	80068ec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068ba:	f043 0220 	orr.w	r2, r3, #32
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e013      	b.n	80068ee <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	9300      	str	r3, [sp, #0]
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	2200      	movs	r2, #0
 80068ce:	2101      	movs	r1, #1
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f7ff ff23 	bl	800671c <SPI_WaitFlagStateUntilTimeout>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d007      	beq.n	80068ec <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068e0:	f043 0220 	orr.w	r2, r3, #32
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e000      	b.n	80068ee <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
	...

080068f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b088      	sub	sp, #32
 80068fc:	af02      	add	r7, sp, #8
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	9300      	str	r3, [sp, #0]
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	2201      	movs	r2, #1
 800690c:	2102      	movs	r1, #2
 800690e:	68f8      	ldr	r0, [r7, #12]
 8006910:	f7ff ff04 	bl	800671c <SPI_WaitFlagStateUntilTimeout>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d007      	beq.n	800692a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800691e:	f043 0220 	orr.w	r2, r3, #32
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e032      	b.n	8006990 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800692a:	4b1b      	ldr	r3, [pc, #108]	@ (8006998 <SPI_EndRxTxTransaction+0xa0>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a1b      	ldr	r2, [pc, #108]	@ (800699c <SPI_EndRxTxTransaction+0xa4>)
 8006930:	fba2 2303 	umull	r2, r3, r2, r3
 8006934:	0d5b      	lsrs	r3, r3, #21
 8006936:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800693a:	fb02 f303 	mul.w	r3, r2, r3
 800693e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006948:	d112      	bne.n	8006970 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	2200      	movs	r2, #0
 8006952:	2180      	movs	r1, #128	@ 0x80
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f7ff fee1 	bl	800671c <SPI_WaitFlagStateUntilTimeout>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d016      	beq.n	800698e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006964:	f043 0220 	orr.w	r2, r3, #32
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e00f      	b.n	8006990 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00a      	beq.n	800698c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	3b01      	subs	r3, #1
 800697a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006986:	2b80      	cmp	r3, #128	@ 0x80
 8006988:	d0f2      	beq.n	8006970 <SPI_EndRxTxTransaction+0x78>
 800698a:	e000      	b.n	800698e <SPI_EndRxTxTransaction+0x96>
        break;
 800698c:	bf00      	nop
  }

  return HAL_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3718      	adds	r7, #24
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	2000007c 	.word	0x2000007c
 800699c:	165e9f81 	.word	0x165e9f81

080069a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d101      	bne.n	80069b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e041      	b.n	8006a36 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d106      	bne.n	80069cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7fd f9cc 	bl	8003d64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2202      	movs	r2, #2
 80069d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	3304      	adds	r3, #4
 80069dc:	4619      	mov	r1, r3
 80069de:	4610      	mov	r0, r2
 80069e0:	f000 f8f0 	bl	8006bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3708      	adds	r7, #8
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
	...

08006a40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b086      	sub	sp, #24
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d101      	bne.n	8006a5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a5a:	2302      	movs	r3, #2
 8006a5c:	e0ae      	b.n	8006bbc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2201      	movs	r2, #1
 8006a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2b0c      	cmp	r3, #12
 8006a6a:	f200 809f 	bhi.w	8006bac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8006a74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a74:	08006aa9 	.word	0x08006aa9
 8006a78:	08006bad 	.word	0x08006bad
 8006a7c:	08006bad 	.word	0x08006bad
 8006a80:	08006bad 	.word	0x08006bad
 8006a84:	08006ae9 	.word	0x08006ae9
 8006a88:	08006bad 	.word	0x08006bad
 8006a8c:	08006bad 	.word	0x08006bad
 8006a90:	08006bad 	.word	0x08006bad
 8006a94:	08006b2b 	.word	0x08006b2b
 8006a98:	08006bad 	.word	0x08006bad
 8006a9c:	08006bad 	.word	0x08006bad
 8006aa0:	08006bad 	.word	0x08006bad
 8006aa4:	08006b6b 	.word	0x08006b6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68b9      	ldr	r1, [r7, #8]
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f000 f934 	bl	8006d1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	699a      	ldr	r2, [r3, #24]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f042 0208 	orr.w	r2, r2, #8
 8006ac2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	699a      	ldr	r2, [r3, #24]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f022 0204 	bic.w	r2, r2, #4
 8006ad2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	6999      	ldr	r1, [r3, #24]
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	691a      	ldr	r2, [r3, #16]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	430a      	orrs	r2, r1
 8006ae4:	619a      	str	r2, [r3, #24]
      break;
 8006ae6:	e064      	b.n	8006bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68b9      	ldr	r1, [r7, #8]
 8006aee:	4618      	mov	r0, r3
 8006af0:	f000 f984 	bl	8006dfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	699a      	ldr	r2, [r3, #24]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	699a      	ldr	r2, [r3, #24]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	6999      	ldr	r1, [r3, #24]
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	021a      	lsls	r2, r3, #8
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	430a      	orrs	r2, r1
 8006b26:	619a      	str	r2, [r3, #24]
      break;
 8006b28:	e043      	b.n	8006bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68b9      	ldr	r1, [r7, #8]
 8006b30:	4618      	mov	r0, r3
 8006b32:	f000 f9d9 	bl	8006ee8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	69da      	ldr	r2, [r3, #28]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f042 0208 	orr.w	r2, r2, #8
 8006b44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	69da      	ldr	r2, [r3, #28]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f022 0204 	bic.w	r2, r2, #4
 8006b54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	69d9      	ldr	r1, [r3, #28]
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	691a      	ldr	r2, [r3, #16]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	430a      	orrs	r2, r1
 8006b66:	61da      	str	r2, [r3, #28]
      break;
 8006b68:	e023      	b.n	8006bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68b9      	ldr	r1, [r7, #8]
 8006b70:	4618      	mov	r0, r3
 8006b72:	f000 fa2d 	bl	8006fd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	69da      	ldr	r2, [r3, #28]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	69da      	ldr	r2, [r3, #28]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	69d9      	ldr	r1, [r3, #28]
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	021a      	lsls	r2, r3, #8
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	61da      	str	r2, [r3, #28]
      break;
 8006baa:	e002      	b.n	8006bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	75fb      	strb	r3, [r7, #23]
      break;
 8006bb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3718      	adds	r7, #24
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a46      	ldr	r2, [pc, #280]	@ (8006cf0 <TIM_Base_SetConfig+0x12c>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d013      	beq.n	8006c04 <TIM_Base_SetConfig+0x40>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006be2:	d00f      	beq.n	8006c04 <TIM_Base_SetConfig+0x40>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a43      	ldr	r2, [pc, #268]	@ (8006cf4 <TIM_Base_SetConfig+0x130>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d00b      	beq.n	8006c04 <TIM_Base_SetConfig+0x40>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a42      	ldr	r2, [pc, #264]	@ (8006cf8 <TIM_Base_SetConfig+0x134>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d007      	beq.n	8006c04 <TIM_Base_SetConfig+0x40>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a41      	ldr	r2, [pc, #260]	@ (8006cfc <TIM_Base_SetConfig+0x138>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d003      	beq.n	8006c04 <TIM_Base_SetConfig+0x40>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a40      	ldr	r2, [pc, #256]	@ (8006d00 <TIM_Base_SetConfig+0x13c>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d108      	bne.n	8006c16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a35      	ldr	r2, [pc, #212]	@ (8006cf0 <TIM_Base_SetConfig+0x12c>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d02b      	beq.n	8006c76 <TIM_Base_SetConfig+0xb2>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c24:	d027      	beq.n	8006c76 <TIM_Base_SetConfig+0xb2>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a32      	ldr	r2, [pc, #200]	@ (8006cf4 <TIM_Base_SetConfig+0x130>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d023      	beq.n	8006c76 <TIM_Base_SetConfig+0xb2>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a31      	ldr	r2, [pc, #196]	@ (8006cf8 <TIM_Base_SetConfig+0x134>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d01f      	beq.n	8006c76 <TIM_Base_SetConfig+0xb2>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a30      	ldr	r2, [pc, #192]	@ (8006cfc <TIM_Base_SetConfig+0x138>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d01b      	beq.n	8006c76 <TIM_Base_SetConfig+0xb2>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a2f      	ldr	r2, [pc, #188]	@ (8006d00 <TIM_Base_SetConfig+0x13c>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d017      	beq.n	8006c76 <TIM_Base_SetConfig+0xb2>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a2e      	ldr	r2, [pc, #184]	@ (8006d04 <TIM_Base_SetConfig+0x140>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d013      	beq.n	8006c76 <TIM_Base_SetConfig+0xb2>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a2d      	ldr	r2, [pc, #180]	@ (8006d08 <TIM_Base_SetConfig+0x144>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d00f      	beq.n	8006c76 <TIM_Base_SetConfig+0xb2>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a2c      	ldr	r2, [pc, #176]	@ (8006d0c <TIM_Base_SetConfig+0x148>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d00b      	beq.n	8006c76 <TIM_Base_SetConfig+0xb2>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a2b      	ldr	r2, [pc, #172]	@ (8006d10 <TIM_Base_SetConfig+0x14c>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d007      	beq.n	8006c76 <TIM_Base_SetConfig+0xb2>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a2a      	ldr	r2, [pc, #168]	@ (8006d14 <TIM_Base_SetConfig+0x150>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d003      	beq.n	8006c76 <TIM_Base_SetConfig+0xb2>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a29      	ldr	r2, [pc, #164]	@ (8006d18 <TIM_Base_SetConfig+0x154>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d108      	bne.n	8006c88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	695b      	ldr	r3, [r3, #20]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	689a      	ldr	r2, [r3, #8]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a10      	ldr	r2, [pc, #64]	@ (8006cf0 <TIM_Base_SetConfig+0x12c>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d003      	beq.n	8006cbc <TIM_Base_SetConfig+0xf8>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a12      	ldr	r2, [pc, #72]	@ (8006d00 <TIM_Base_SetConfig+0x13c>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d103      	bne.n	8006cc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	691a      	ldr	r2, [r3, #16]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	f003 0301 	and.w	r3, r3, #1
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d105      	bne.n	8006ce2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	f023 0201 	bic.w	r2, r3, #1
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	611a      	str	r2, [r3, #16]
  }
}
 8006ce2:	bf00      	nop
 8006ce4:	3714      	adds	r7, #20
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	40010000 	.word	0x40010000
 8006cf4:	40000400 	.word	0x40000400
 8006cf8:	40000800 	.word	0x40000800
 8006cfc:	40000c00 	.word	0x40000c00
 8006d00:	40010400 	.word	0x40010400
 8006d04:	40014000 	.word	0x40014000
 8006d08:	40014400 	.word	0x40014400
 8006d0c:	40014800 	.word	0x40014800
 8006d10:	40001800 	.word	0x40001800
 8006d14:	40001c00 	.word	0x40001c00
 8006d18:	40002000 	.word	0x40002000

08006d1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b087      	sub	sp, #28
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a1b      	ldr	r3, [r3, #32]
 8006d2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a1b      	ldr	r3, [r3, #32]
 8006d30:	f023 0201 	bic.w	r2, r3, #1
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	699b      	ldr	r3, [r3, #24]
 8006d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f023 0303 	bic.w	r3, r3, #3
 8006d52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	f023 0302 	bic.w	r3, r3, #2
 8006d64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	697a      	ldr	r2, [r7, #20]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a20      	ldr	r2, [pc, #128]	@ (8006df4 <TIM_OC1_SetConfig+0xd8>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d003      	beq.n	8006d80 <TIM_OC1_SetConfig+0x64>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a1f      	ldr	r2, [pc, #124]	@ (8006df8 <TIM_OC1_SetConfig+0xdc>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d10c      	bne.n	8006d9a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	f023 0308 	bic.w	r3, r3, #8
 8006d86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	f023 0304 	bic.w	r3, r3, #4
 8006d98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a15      	ldr	r2, [pc, #84]	@ (8006df4 <TIM_OC1_SetConfig+0xd8>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d003      	beq.n	8006daa <TIM_OC1_SetConfig+0x8e>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a14      	ldr	r2, [pc, #80]	@ (8006df8 <TIM_OC1_SetConfig+0xdc>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d111      	bne.n	8006dce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006db0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006db8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	695b      	ldr	r3, [r3, #20]
 8006dbe:	693a      	ldr	r2, [r7, #16]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	699b      	ldr	r3, [r3, #24]
 8006dc8:	693a      	ldr	r2, [r7, #16]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	693a      	ldr	r2, [r7, #16]
 8006dd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	685a      	ldr	r2, [r3, #4]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	697a      	ldr	r2, [r7, #20]
 8006de6:	621a      	str	r2, [r3, #32]
}
 8006de8:	bf00      	nop
 8006dea:	371c      	adds	r7, #28
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr
 8006df4:	40010000 	.word	0x40010000
 8006df8:	40010400 	.word	0x40010400

08006dfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b087      	sub	sp, #28
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a1b      	ldr	r3, [r3, #32]
 8006e0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6a1b      	ldr	r3, [r3, #32]
 8006e10:	f023 0210 	bic.w	r2, r3, #16
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	021b      	lsls	r3, r3, #8
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	f023 0320 	bic.w	r3, r3, #32
 8006e46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	011b      	lsls	r3, r3, #4
 8006e4e:	697a      	ldr	r2, [r7, #20]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a22      	ldr	r2, [pc, #136]	@ (8006ee0 <TIM_OC2_SetConfig+0xe4>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d003      	beq.n	8006e64 <TIM_OC2_SetConfig+0x68>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a21      	ldr	r2, [pc, #132]	@ (8006ee4 <TIM_OC2_SetConfig+0xe8>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d10d      	bne.n	8006e80 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	011b      	lsls	r3, r3, #4
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a17      	ldr	r2, [pc, #92]	@ (8006ee0 <TIM_OC2_SetConfig+0xe4>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d003      	beq.n	8006e90 <TIM_OC2_SetConfig+0x94>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a16      	ldr	r2, [pc, #88]	@ (8006ee4 <TIM_OC2_SetConfig+0xe8>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d113      	bne.n	8006eb8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	695b      	ldr	r3, [r3, #20]
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	693a      	ldr	r2, [r7, #16]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	699b      	ldr	r3, [r3, #24]
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	693a      	ldr	r2, [r7, #16]
 8006ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	685a      	ldr	r2, [r3, #4]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	697a      	ldr	r2, [r7, #20]
 8006ed0:	621a      	str	r2, [r3, #32]
}
 8006ed2:	bf00      	nop
 8006ed4:	371c      	adds	r7, #28
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	40010000 	.word	0x40010000
 8006ee4:	40010400 	.word	0x40010400

08006ee8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b087      	sub	sp, #28
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a1b      	ldr	r3, [r3, #32]
 8006ef6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a1b      	ldr	r3, [r3, #32]
 8006efc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	69db      	ldr	r3, [r3, #28]
 8006f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f023 0303 	bic.w	r3, r3, #3
 8006f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006f30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	021b      	lsls	r3, r3, #8
 8006f38:	697a      	ldr	r2, [r7, #20]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a21      	ldr	r2, [pc, #132]	@ (8006fc8 <TIM_OC3_SetConfig+0xe0>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d003      	beq.n	8006f4e <TIM_OC3_SetConfig+0x66>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a20      	ldr	r2, [pc, #128]	@ (8006fcc <TIM_OC3_SetConfig+0xe4>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d10d      	bne.n	8006f6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006f54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	021b      	lsls	r3, r3, #8
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006f68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a16      	ldr	r2, [pc, #88]	@ (8006fc8 <TIM_OC3_SetConfig+0xe0>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d003      	beq.n	8006f7a <TIM_OC3_SetConfig+0x92>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a15      	ldr	r2, [pc, #84]	@ (8006fcc <TIM_OC3_SetConfig+0xe4>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d113      	bne.n	8006fa2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	011b      	lsls	r3, r3, #4
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	011b      	lsls	r3, r3, #4
 8006f9c:	693a      	ldr	r2, [r7, #16]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	693a      	ldr	r2, [r7, #16]
 8006fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	685a      	ldr	r2, [r3, #4]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	697a      	ldr	r2, [r7, #20]
 8006fba:	621a      	str	r2, [r3, #32]
}
 8006fbc:	bf00      	nop
 8006fbe:	371c      	adds	r7, #28
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	40010000 	.word	0x40010000
 8006fcc:	40010400 	.word	0x40010400

08006fd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b087      	sub	sp, #28
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a1b      	ldr	r3, [r3, #32]
 8006fde:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6a1b      	ldr	r3, [r3, #32]
 8006fe4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	69db      	ldr	r3, [r3, #28]
 8006ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007006:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	021b      	lsls	r3, r3, #8
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	4313      	orrs	r3, r2
 8007012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800701a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	031b      	lsls	r3, r3, #12
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	4313      	orrs	r3, r2
 8007026:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a12      	ldr	r2, [pc, #72]	@ (8007074 <TIM_OC4_SetConfig+0xa4>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d003      	beq.n	8007038 <TIM_OC4_SetConfig+0x68>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a11      	ldr	r2, [pc, #68]	@ (8007078 <TIM_OC4_SetConfig+0xa8>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d109      	bne.n	800704c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800703e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	695b      	ldr	r3, [r3, #20]
 8007044:	019b      	lsls	r3, r3, #6
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	4313      	orrs	r3, r2
 800704a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	697a      	ldr	r2, [r7, #20]
 8007050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	685a      	ldr	r2, [r3, #4]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	693a      	ldr	r2, [r7, #16]
 8007064:	621a      	str	r2, [r3, #32]
}
 8007066:	bf00      	nop
 8007068:	371c      	adds	r7, #28
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	40010000 	.word	0x40010000
 8007078:	40010400 	.word	0x40010400

0800707c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800708c:	2b01      	cmp	r3, #1
 800708e:	d101      	bne.n	8007094 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007090:	2302      	movs	r3, #2
 8007092:	e05a      	b.n	800714a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2202      	movs	r2, #2
 80070a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a21      	ldr	r2, [pc, #132]	@ (8007158 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d022      	beq.n	800711e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070e0:	d01d      	beq.n	800711e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a1d      	ldr	r2, [pc, #116]	@ (800715c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d018      	beq.n	800711e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a1b      	ldr	r2, [pc, #108]	@ (8007160 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d013      	beq.n	800711e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a1a      	ldr	r2, [pc, #104]	@ (8007164 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d00e      	beq.n	800711e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a18      	ldr	r2, [pc, #96]	@ (8007168 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d009      	beq.n	800711e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a17      	ldr	r2, [pc, #92]	@ (800716c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d004      	beq.n	800711e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a15      	ldr	r2, [pc, #84]	@ (8007170 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d10c      	bne.n	8007138 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007124:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	68ba      	ldr	r2, [r7, #8]
 800712c:	4313      	orrs	r3, r2
 800712e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3714      	adds	r7, #20
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	40010000 	.word	0x40010000
 800715c:	40000400 	.word	0x40000400
 8007160:	40000800 	.word	0x40000800
 8007164:	40000c00 	.word	0x40000c00
 8007168:	40010400 	.word	0x40010400
 800716c:	40014000 	.word	0x40014000
 8007170:	40001800 	.word	0x40001800

08007174 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007174:	b480      	push	{r7}
 8007176:	b085      	sub	sp, #20
 8007178:	af00      	add	r7, sp, #0
 800717a:	4603      	mov	r3, r0
 800717c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800717e:	2300      	movs	r3, #0
 8007180:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007182:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007186:	2b84      	cmp	r3, #132	@ 0x84
 8007188:	d005      	beq.n	8007196 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800718a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	4413      	add	r3, r2
 8007192:	3303      	adds	r3, #3
 8007194:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007196:	68fb      	ldr	r3, [r7, #12]
}
 8007198:	4618      	mov	r0, r3
 800719a:	3714      	adds	r7, #20
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80071a8:	f000 fae4 	bl	8007774 <vTaskStartScheduler>
  
  return osOK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80071b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071b4:	b089      	sub	sp, #36	@ 0x24
 80071b6:	af04      	add	r7, sp, #16
 80071b8:	6078      	str	r0, [r7, #4]
 80071ba:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	695b      	ldr	r3, [r3, #20]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d020      	beq.n	8007206 <osThreadCreate+0x54>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	699b      	ldr	r3, [r3, #24]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d01c      	beq.n	8007206 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	685c      	ldr	r4, [r3, #4]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	691e      	ldr	r6, [r3, #16]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80071de:	4618      	mov	r0, r3
 80071e0:	f7ff ffc8 	bl	8007174 <makeFreeRtosPriority>
 80071e4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	695b      	ldr	r3, [r3, #20]
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80071ee:	9202      	str	r2, [sp, #8]
 80071f0:	9301      	str	r3, [sp, #4]
 80071f2:	9100      	str	r1, [sp, #0]
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	4632      	mov	r2, r6
 80071f8:	4629      	mov	r1, r5
 80071fa:	4620      	mov	r0, r4
 80071fc:	f000 f8ed 	bl	80073da <xTaskCreateStatic>
 8007200:	4603      	mov	r3, r0
 8007202:	60fb      	str	r3, [r7, #12]
 8007204:	e01c      	b.n	8007240 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	685c      	ldr	r4, [r3, #4]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007212:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800721a:	4618      	mov	r0, r3
 800721c:	f7ff ffaa 	bl	8007174 <makeFreeRtosPriority>
 8007220:	4602      	mov	r2, r0
 8007222:	f107 030c 	add.w	r3, r7, #12
 8007226:	9301      	str	r3, [sp, #4]
 8007228:	9200      	str	r2, [sp, #0]
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	4632      	mov	r2, r6
 800722e:	4629      	mov	r1, r5
 8007230:	4620      	mov	r0, r4
 8007232:	f000 f932 	bl	800749a <xTaskCreate>
 8007236:	4603      	mov	r3, r0
 8007238:	2b01      	cmp	r3, #1
 800723a:	d001      	beq.n	8007240 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800723c:	2300      	movs	r3, #0
 800723e:	e000      	b.n	8007242 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007240:	68fb      	ldr	r3, [r7, #12]
}
 8007242:	4618      	mov	r0, r3
 8007244:	3714      	adds	r7, #20
 8007246:	46bd      	mov	sp, r7
 8007248:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800724a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b084      	sub	sp, #16
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d001      	beq.n	8007260 <osDelay+0x16>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	e000      	b.n	8007262 <osDelay+0x18>
 8007260:	2301      	movs	r3, #1
 8007262:	4618      	mov	r0, r3
 8007264:	f000 fa50 	bl	8007708 <vTaskDelay>
  
  return osOK;
 8007268:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800726a:	4618      	mov	r0, r3
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007272:	b480      	push	{r7}
 8007274:	b083      	sub	sp, #12
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f103 0208 	add.w	r2, r3, #8
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800728a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f103 0208 	add.w	r2, r3, #8
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f103 0208 	add.w	r2, r3, #8
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80072a6:	bf00      	nop
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80072b2:	b480      	push	{r7}
 80072b4:	b083      	sub	sp, #12
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80072cc:	b480      	push	{r7}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	689a      	ldr	r2, [r3, #8]
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	683a      	ldr	r2, [r7, #0]
 80072f0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	683a      	ldr	r2, [r7, #0]
 80072f6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	1c5a      	adds	r2, r3, #1
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	601a      	str	r2, [r3, #0]
}
 8007308:	bf00      	nop
 800730a:	3714      	adds	r7, #20
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800732a:	d103      	bne.n	8007334 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	60fb      	str	r3, [r7, #12]
 8007332:	e00c      	b.n	800734e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	3308      	adds	r3, #8
 8007338:	60fb      	str	r3, [r7, #12]
 800733a:	e002      	b.n	8007342 <vListInsert+0x2e>
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	60fb      	str	r3, [r7, #12]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	429a      	cmp	r2, r3
 800734c:	d2f6      	bcs.n	800733c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	685a      	ldr	r2, [r3, #4]
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	683a      	ldr	r2, [r7, #0]
 800735c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	683a      	ldr	r2, [r7, #0]
 8007368:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	1c5a      	adds	r2, r3, #1
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	601a      	str	r2, [r3, #0]
}
 800737a:	bf00      	nop
 800737c:	3714      	adds	r7, #20
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr

08007386 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007386:	b480      	push	{r7}
 8007388:	b085      	sub	sp, #20
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	6892      	ldr	r2, [r2, #8]
 800739c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	6852      	ldr	r2, [r2, #4]
 80073a6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d103      	bne.n	80073ba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	689a      	ldr	r2, [r3, #8]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	1e5a      	subs	r2, r3, #1
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3714      	adds	r7, #20
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr

080073da <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b08e      	sub	sp, #56	@ 0x38
 80073de:	af04      	add	r7, sp, #16
 80073e0:	60f8      	str	r0, [r7, #12]
 80073e2:	60b9      	str	r1, [r7, #8]
 80073e4:	607a      	str	r2, [r7, #4]
 80073e6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80073e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d10b      	bne.n	8007406 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80073ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f2:	f383 8811 	msr	BASEPRI, r3
 80073f6:	f3bf 8f6f 	isb	sy
 80073fa:	f3bf 8f4f 	dsb	sy
 80073fe:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007400:	bf00      	nop
 8007402:	bf00      	nop
 8007404:	e7fd      	b.n	8007402 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007408:	2b00      	cmp	r3, #0
 800740a:	d10b      	bne.n	8007424 <xTaskCreateStatic+0x4a>
	__asm volatile
 800740c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007410:	f383 8811 	msr	BASEPRI, r3
 8007414:	f3bf 8f6f 	isb	sy
 8007418:	f3bf 8f4f 	dsb	sy
 800741c:	61fb      	str	r3, [r7, #28]
}
 800741e:	bf00      	nop
 8007420:	bf00      	nop
 8007422:	e7fd      	b.n	8007420 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007424:	2354      	movs	r3, #84	@ 0x54
 8007426:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	2b54      	cmp	r3, #84	@ 0x54
 800742c:	d00b      	beq.n	8007446 <xTaskCreateStatic+0x6c>
	__asm volatile
 800742e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007432:	f383 8811 	msr	BASEPRI, r3
 8007436:	f3bf 8f6f 	isb	sy
 800743a:	f3bf 8f4f 	dsb	sy
 800743e:	61bb      	str	r3, [r7, #24]
}
 8007440:	bf00      	nop
 8007442:	bf00      	nop
 8007444:	e7fd      	b.n	8007442 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007446:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800744a:	2b00      	cmp	r3, #0
 800744c:	d01e      	beq.n	800748c <xTaskCreateStatic+0xb2>
 800744e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007450:	2b00      	cmp	r3, #0
 8007452:	d01b      	beq.n	800748c <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007456:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800745a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800745c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800745e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007460:	2202      	movs	r2, #2
 8007462:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007466:	2300      	movs	r3, #0
 8007468:	9303      	str	r3, [sp, #12]
 800746a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746c:	9302      	str	r3, [sp, #8]
 800746e:	f107 0314 	add.w	r3, r7, #20
 8007472:	9301      	str	r3, [sp, #4]
 8007474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007476:	9300      	str	r3, [sp, #0]
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	68b9      	ldr	r1, [r7, #8]
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	f000 f850 	bl	8007524 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007484:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007486:	f000 f8d5 	bl	8007634 <prvAddNewTaskToReadyList>
 800748a:	e001      	b.n	8007490 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800748c:	2300      	movs	r3, #0
 800748e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007490:	697b      	ldr	r3, [r7, #20]
	}
 8007492:	4618      	mov	r0, r3
 8007494:	3728      	adds	r7, #40	@ 0x28
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800749a:	b580      	push	{r7, lr}
 800749c:	b08c      	sub	sp, #48	@ 0x30
 800749e:	af04      	add	r7, sp, #16
 80074a0:	60f8      	str	r0, [r7, #12]
 80074a2:	60b9      	str	r1, [r7, #8]
 80074a4:	603b      	str	r3, [r7, #0]
 80074a6:	4613      	mov	r3, r2
 80074a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80074aa:	88fb      	ldrh	r3, [r7, #6]
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	4618      	mov	r0, r3
 80074b0:	f000 fef2 	bl	8008298 <pvPortMalloc>
 80074b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00e      	beq.n	80074da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80074bc:	2054      	movs	r0, #84	@ 0x54
 80074be:	f000 feeb 	bl	8008298 <pvPortMalloc>
 80074c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d003      	beq.n	80074d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	697a      	ldr	r2, [r7, #20]
 80074ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80074d0:	e005      	b.n	80074de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80074d2:	6978      	ldr	r0, [r7, #20]
 80074d4:	f000 ffae 	bl	8008434 <vPortFree>
 80074d8:	e001      	b.n	80074de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80074da:	2300      	movs	r3, #0
 80074dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d017      	beq.n	8007514 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80074ec:	88fa      	ldrh	r2, [r7, #6]
 80074ee:	2300      	movs	r3, #0
 80074f0:	9303      	str	r3, [sp, #12]
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	9302      	str	r3, [sp, #8]
 80074f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074f8:	9301      	str	r3, [sp, #4]
 80074fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074fc:	9300      	str	r3, [sp, #0]
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	68b9      	ldr	r1, [r7, #8]
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	f000 f80e 	bl	8007524 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007508:	69f8      	ldr	r0, [r7, #28]
 800750a:	f000 f893 	bl	8007634 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800750e:	2301      	movs	r3, #1
 8007510:	61bb      	str	r3, [r7, #24]
 8007512:	e002      	b.n	800751a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007514:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007518:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800751a:	69bb      	ldr	r3, [r7, #24]
	}
 800751c:	4618      	mov	r0, r3
 800751e:	3720      	adds	r7, #32
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b088      	sub	sp, #32
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	607a      	str	r2, [r7, #4]
 8007530:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007534:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800753c:	3b01      	subs	r3, #1
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	4413      	add	r3, r2
 8007542:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	f023 0307 	bic.w	r3, r3, #7
 800754a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	f003 0307 	and.w	r3, r3, #7
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00b      	beq.n	800756e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800755a:	f383 8811 	msr	BASEPRI, r3
 800755e:	f3bf 8f6f 	isb	sy
 8007562:	f3bf 8f4f 	dsb	sy
 8007566:	617b      	str	r3, [r7, #20]
}
 8007568:	bf00      	nop
 800756a:	bf00      	nop
 800756c:	e7fd      	b.n	800756a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d01f      	beq.n	80075b4 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007574:	2300      	movs	r3, #0
 8007576:	61fb      	str	r3, [r7, #28]
 8007578:	e012      	b.n	80075a0 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800757a:	68ba      	ldr	r2, [r7, #8]
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	4413      	add	r3, r2
 8007580:	7819      	ldrb	r1, [r3, #0]
 8007582:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	4413      	add	r3, r2
 8007588:	3334      	adds	r3, #52	@ 0x34
 800758a:	460a      	mov	r2, r1
 800758c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800758e:	68ba      	ldr	r2, [r7, #8]
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	4413      	add	r3, r2
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d006      	beq.n	80075a8 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	3301      	adds	r3, #1
 800759e:	61fb      	str	r3, [r7, #28]
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	2b0f      	cmp	r3, #15
 80075a4:	d9e9      	bls.n	800757a <prvInitialiseNewTask+0x56>
 80075a6:	e000      	b.n	80075aa <prvInitialiseNewTask+0x86>
			{
				break;
 80075a8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80075aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80075b2:	e003      	b.n	80075bc <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80075b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b6:	2200      	movs	r2, #0
 80075b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80075bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075be:	2b06      	cmp	r3, #6
 80075c0:	d901      	bls.n	80075c6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80075c2:	2306      	movs	r3, #6
 80075c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80075c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075ca:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80075cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075d0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80075d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d4:	2200      	movs	r2, #0
 80075d6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80075d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075da:	3304      	adds	r3, #4
 80075dc:	4618      	mov	r0, r3
 80075de:	f7ff fe68 	bl	80072b2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80075e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e4:	3318      	adds	r3, #24
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7ff fe63 	bl	80072b2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80075ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075f0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f4:	f1c3 0207 	rsb	r2, r3, #7
 80075f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075fa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80075fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007600:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007604:	2200      	movs	r2, #0
 8007606:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800760a:	2200      	movs	r2, #0
 800760c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007610:	683a      	ldr	r2, [r7, #0]
 8007612:	68f9      	ldr	r1, [r7, #12]
 8007614:	69b8      	ldr	r0, [r7, #24]
 8007616:	f000 fc2b 	bl	8007e70 <pxPortInitialiseStack>
 800761a:	4602      	mov	r2, r0
 800761c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800761e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007622:	2b00      	cmp	r3, #0
 8007624:	d002      	beq.n	800762c <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007628:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800762a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800762c:	bf00      	nop
 800762e:	3720      	adds	r7, #32
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800763c:	f000 fd4c 	bl	80080d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007640:	4b2a      	ldr	r3, [pc, #168]	@ (80076ec <prvAddNewTaskToReadyList+0xb8>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	3301      	adds	r3, #1
 8007646:	4a29      	ldr	r2, [pc, #164]	@ (80076ec <prvAddNewTaskToReadyList+0xb8>)
 8007648:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800764a:	4b29      	ldr	r3, [pc, #164]	@ (80076f0 <prvAddNewTaskToReadyList+0xbc>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d109      	bne.n	8007666 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007652:	4a27      	ldr	r2, [pc, #156]	@ (80076f0 <prvAddNewTaskToReadyList+0xbc>)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007658:	4b24      	ldr	r3, [pc, #144]	@ (80076ec <prvAddNewTaskToReadyList+0xb8>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2b01      	cmp	r3, #1
 800765e:	d110      	bne.n	8007682 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007660:	f000 fac4 	bl	8007bec <prvInitialiseTaskLists>
 8007664:	e00d      	b.n	8007682 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007666:	4b23      	ldr	r3, [pc, #140]	@ (80076f4 <prvAddNewTaskToReadyList+0xc0>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d109      	bne.n	8007682 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800766e:	4b20      	ldr	r3, [pc, #128]	@ (80076f0 <prvAddNewTaskToReadyList+0xbc>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007678:	429a      	cmp	r2, r3
 800767a:	d802      	bhi.n	8007682 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800767c:	4a1c      	ldr	r2, [pc, #112]	@ (80076f0 <prvAddNewTaskToReadyList+0xbc>)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007682:	4b1d      	ldr	r3, [pc, #116]	@ (80076f8 <prvAddNewTaskToReadyList+0xc4>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	3301      	adds	r3, #1
 8007688:	4a1b      	ldr	r2, [pc, #108]	@ (80076f8 <prvAddNewTaskToReadyList+0xc4>)
 800768a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007690:	2201      	movs	r2, #1
 8007692:	409a      	lsls	r2, r3
 8007694:	4b19      	ldr	r3, [pc, #100]	@ (80076fc <prvAddNewTaskToReadyList+0xc8>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4313      	orrs	r3, r2
 800769a:	4a18      	ldr	r2, [pc, #96]	@ (80076fc <prvAddNewTaskToReadyList+0xc8>)
 800769c:	6013      	str	r3, [r2, #0]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076a2:	4613      	mov	r3, r2
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	4413      	add	r3, r2
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	4a15      	ldr	r2, [pc, #84]	@ (8007700 <prvAddNewTaskToReadyList+0xcc>)
 80076ac:	441a      	add	r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	3304      	adds	r3, #4
 80076b2:	4619      	mov	r1, r3
 80076b4:	4610      	mov	r0, r2
 80076b6:	f7ff fe09 	bl	80072cc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80076ba:	f000 fd3f 	bl	800813c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80076be:	4b0d      	ldr	r3, [pc, #52]	@ (80076f4 <prvAddNewTaskToReadyList+0xc0>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00e      	beq.n	80076e4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80076c6:	4b0a      	ldr	r3, [pc, #40]	@ (80076f0 <prvAddNewTaskToReadyList+0xbc>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d207      	bcs.n	80076e4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80076d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007704 <prvAddNewTaskToReadyList+0xd0>)
 80076d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076da:	601a      	str	r2, [r3, #0]
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076e4:	bf00      	nop
 80076e6:	3708      	adds	r7, #8
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	20026004 	.word	0x20026004
 80076f0:	20025f04 	.word	0x20025f04
 80076f4:	20026010 	.word	0x20026010
 80076f8:	20026020 	.word	0x20026020
 80076fc:	2002600c 	.word	0x2002600c
 8007700:	20025f08 	.word	0x20025f08
 8007704:	e000ed04 	.word	0xe000ed04

08007708 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007710:	2300      	movs	r3, #0
 8007712:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d018      	beq.n	800774c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800771a:	4b14      	ldr	r3, [pc, #80]	@ (800776c <vTaskDelay+0x64>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00b      	beq.n	800773a <vTaskDelay+0x32>
	__asm volatile
 8007722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007726:	f383 8811 	msr	BASEPRI, r3
 800772a:	f3bf 8f6f 	isb	sy
 800772e:	f3bf 8f4f 	dsb	sy
 8007732:	60bb      	str	r3, [r7, #8]
}
 8007734:	bf00      	nop
 8007736:	bf00      	nop
 8007738:	e7fd      	b.n	8007736 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800773a:	f000 f87d 	bl	8007838 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800773e:	2100      	movs	r1, #0
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 fb2f 	bl	8007da4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007746:	f000 f885 	bl	8007854 <xTaskResumeAll>
 800774a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d107      	bne.n	8007762 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007752:	4b07      	ldr	r3, [pc, #28]	@ (8007770 <vTaskDelay+0x68>)
 8007754:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007758:	601a      	str	r2, [r3, #0]
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007762:	bf00      	nop
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	2002602c 	.word	0x2002602c
 8007770:	e000ed04 	.word	0xe000ed04

08007774 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b08a      	sub	sp, #40	@ 0x28
 8007778:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800777a:	2300      	movs	r3, #0
 800777c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800777e:	2300      	movs	r3, #0
 8007780:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007782:	463a      	mov	r2, r7
 8007784:	1d39      	adds	r1, r7, #4
 8007786:	f107 0308 	add.w	r3, r7, #8
 800778a:	4618      	mov	r0, r3
 800778c:	f7fb fc98 	bl	80030c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	68ba      	ldr	r2, [r7, #8]
 8007796:	9202      	str	r2, [sp, #8]
 8007798:	9301      	str	r3, [sp, #4]
 800779a:	2300      	movs	r3, #0
 800779c:	9300      	str	r3, [sp, #0]
 800779e:	2300      	movs	r3, #0
 80077a0:	460a      	mov	r2, r1
 80077a2:	491f      	ldr	r1, [pc, #124]	@ (8007820 <vTaskStartScheduler+0xac>)
 80077a4:	481f      	ldr	r0, [pc, #124]	@ (8007824 <vTaskStartScheduler+0xb0>)
 80077a6:	f7ff fe18 	bl	80073da <xTaskCreateStatic>
 80077aa:	4603      	mov	r3, r0
 80077ac:	4a1e      	ldr	r2, [pc, #120]	@ (8007828 <vTaskStartScheduler+0xb4>)
 80077ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80077b0:	4b1d      	ldr	r3, [pc, #116]	@ (8007828 <vTaskStartScheduler+0xb4>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d002      	beq.n	80077be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80077b8:	2301      	movs	r3, #1
 80077ba:	617b      	str	r3, [r7, #20]
 80077bc:	e001      	b.n	80077c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80077be:	2300      	movs	r3, #0
 80077c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d116      	bne.n	80077f6 <vTaskStartScheduler+0x82>
	__asm volatile
 80077c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077cc:	f383 8811 	msr	BASEPRI, r3
 80077d0:	f3bf 8f6f 	isb	sy
 80077d4:	f3bf 8f4f 	dsb	sy
 80077d8:	613b      	str	r3, [r7, #16]
}
 80077da:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80077dc:	4b13      	ldr	r3, [pc, #76]	@ (800782c <vTaskStartScheduler+0xb8>)
 80077de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80077e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80077e4:	4b12      	ldr	r3, [pc, #72]	@ (8007830 <vTaskStartScheduler+0xbc>)
 80077e6:	2201      	movs	r2, #1
 80077e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80077ea:	4b12      	ldr	r3, [pc, #72]	@ (8007834 <vTaskStartScheduler+0xc0>)
 80077ec:	2200      	movs	r2, #0
 80077ee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80077f0:	f000 fbce 	bl	8007f90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80077f4:	e00f      	b.n	8007816 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077fc:	d10b      	bne.n	8007816 <vTaskStartScheduler+0xa2>
	__asm volatile
 80077fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007802:	f383 8811 	msr	BASEPRI, r3
 8007806:	f3bf 8f6f 	isb	sy
 800780a:	f3bf 8f4f 	dsb	sy
 800780e:	60fb      	str	r3, [r7, #12]
}
 8007810:	bf00      	nop
 8007812:	bf00      	nop
 8007814:	e7fd      	b.n	8007812 <vTaskStartScheduler+0x9e>
}
 8007816:	bf00      	nop
 8007818:	3718      	adds	r7, #24
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	08009f5c 	.word	0x08009f5c
 8007824:	08007bbd 	.word	0x08007bbd
 8007828:	20026028 	.word	0x20026028
 800782c:	20026024 	.word	0x20026024
 8007830:	20026010 	.word	0x20026010
 8007834:	20026008 	.word	0x20026008

08007838 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007838:	b480      	push	{r7}
 800783a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800783c:	4b04      	ldr	r3, [pc, #16]	@ (8007850 <vTaskSuspendAll+0x18>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	3301      	adds	r3, #1
 8007842:	4a03      	ldr	r2, [pc, #12]	@ (8007850 <vTaskSuspendAll+0x18>)
 8007844:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007846:	bf00      	nop
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr
 8007850:	2002602c 	.word	0x2002602c

08007854 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800785a:	2300      	movs	r3, #0
 800785c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800785e:	2300      	movs	r3, #0
 8007860:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007862:	4b42      	ldr	r3, [pc, #264]	@ (800796c <xTaskResumeAll+0x118>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10b      	bne.n	8007882 <xTaskResumeAll+0x2e>
	__asm volatile
 800786a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800786e:	f383 8811 	msr	BASEPRI, r3
 8007872:	f3bf 8f6f 	isb	sy
 8007876:	f3bf 8f4f 	dsb	sy
 800787a:	603b      	str	r3, [r7, #0]
}
 800787c:	bf00      	nop
 800787e:	bf00      	nop
 8007880:	e7fd      	b.n	800787e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007882:	f000 fc29 	bl	80080d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007886:	4b39      	ldr	r3, [pc, #228]	@ (800796c <xTaskResumeAll+0x118>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	3b01      	subs	r3, #1
 800788c:	4a37      	ldr	r2, [pc, #220]	@ (800796c <xTaskResumeAll+0x118>)
 800788e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007890:	4b36      	ldr	r3, [pc, #216]	@ (800796c <xTaskResumeAll+0x118>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d161      	bne.n	800795c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007898:	4b35      	ldr	r3, [pc, #212]	@ (8007970 <xTaskResumeAll+0x11c>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d05d      	beq.n	800795c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078a0:	e02e      	b.n	8007900 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078a2:	4b34      	ldr	r3, [pc, #208]	@ (8007974 <xTaskResumeAll+0x120>)
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	3318      	adds	r3, #24
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7ff fd69 	bl	8007386 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	3304      	adds	r3, #4
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7ff fd64 	bl	8007386 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c2:	2201      	movs	r2, #1
 80078c4:	409a      	lsls	r2, r3
 80078c6:	4b2c      	ldr	r3, [pc, #176]	@ (8007978 <xTaskResumeAll+0x124>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	4a2a      	ldr	r2, [pc, #168]	@ (8007978 <xTaskResumeAll+0x124>)
 80078ce:	6013      	str	r3, [r2, #0]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078d4:	4613      	mov	r3, r2
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	4413      	add	r3, r2
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	4a27      	ldr	r2, [pc, #156]	@ (800797c <xTaskResumeAll+0x128>)
 80078de:	441a      	add	r2, r3
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	3304      	adds	r3, #4
 80078e4:	4619      	mov	r1, r3
 80078e6:	4610      	mov	r0, r2
 80078e8:	f7ff fcf0 	bl	80072cc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078f0:	4b23      	ldr	r3, [pc, #140]	@ (8007980 <xTaskResumeAll+0x12c>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d302      	bcc.n	8007900 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80078fa:	4b22      	ldr	r3, [pc, #136]	@ (8007984 <xTaskResumeAll+0x130>)
 80078fc:	2201      	movs	r2, #1
 80078fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007900:	4b1c      	ldr	r3, [pc, #112]	@ (8007974 <xTaskResumeAll+0x120>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1cc      	bne.n	80078a2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d001      	beq.n	8007912 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800790e:	f000 fa0b 	bl	8007d28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007912:	4b1d      	ldr	r3, [pc, #116]	@ (8007988 <xTaskResumeAll+0x134>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d010      	beq.n	8007940 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800791e:	f000 f837 	bl	8007990 <xTaskIncrementTick>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d002      	beq.n	800792e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007928:	4b16      	ldr	r3, [pc, #88]	@ (8007984 <xTaskResumeAll+0x130>)
 800792a:	2201      	movs	r2, #1
 800792c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	3b01      	subs	r3, #1
 8007932:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d1f1      	bne.n	800791e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800793a:	4b13      	ldr	r3, [pc, #76]	@ (8007988 <xTaskResumeAll+0x134>)
 800793c:	2200      	movs	r2, #0
 800793e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007940:	4b10      	ldr	r3, [pc, #64]	@ (8007984 <xTaskResumeAll+0x130>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d009      	beq.n	800795c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007948:	2301      	movs	r3, #1
 800794a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800794c:	4b0f      	ldr	r3, [pc, #60]	@ (800798c <xTaskResumeAll+0x138>)
 800794e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007952:	601a      	str	r2, [r3, #0]
 8007954:	f3bf 8f4f 	dsb	sy
 8007958:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800795c:	f000 fbee 	bl	800813c <vPortExitCritical>

	return xAlreadyYielded;
 8007960:	68bb      	ldr	r3, [r7, #8]
}
 8007962:	4618      	mov	r0, r3
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	2002602c 	.word	0x2002602c
 8007970:	20026004 	.word	0x20026004
 8007974:	20025fc4 	.word	0x20025fc4
 8007978:	2002600c 	.word	0x2002600c
 800797c:	20025f08 	.word	0x20025f08
 8007980:	20025f04 	.word	0x20025f04
 8007984:	20026018 	.word	0x20026018
 8007988:	20026014 	.word	0x20026014
 800798c:	e000ed04 	.word	0xe000ed04

08007990 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007996:	2300      	movs	r3, #0
 8007998:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800799a:	4b4f      	ldr	r3, [pc, #316]	@ (8007ad8 <xTaskIncrementTick+0x148>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f040 808f 	bne.w	8007ac2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80079a4:	4b4d      	ldr	r3, [pc, #308]	@ (8007adc <xTaskIncrementTick+0x14c>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	3301      	adds	r3, #1
 80079aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80079ac:	4a4b      	ldr	r2, [pc, #300]	@ (8007adc <xTaskIncrementTick+0x14c>)
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d121      	bne.n	80079fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80079b8:	4b49      	ldr	r3, [pc, #292]	@ (8007ae0 <xTaskIncrementTick+0x150>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00b      	beq.n	80079da <xTaskIncrementTick+0x4a>
	__asm volatile
 80079c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c6:	f383 8811 	msr	BASEPRI, r3
 80079ca:	f3bf 8f6f 	isb	sy
 80079ce:	f3bf 8f4f 	dsb	sy
 80079d2:	603b      	str	r3, [r7, #0]
}
 80079d4:	bf00      	nop
 80079d6:	bf00      	nop
 80079d8:	e7fd      	b.n	80079d6 <xTaskIncrementTick+0x46>
 80079da:	4b41      	ldr	r3, [pc, #260]	@ (8007ae0 <xTaskIncrementTick+0x150>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	60fb      	str	r3, [r7, #12]
 80079e0:	4b40      	ldr	r3, [pc, #256]	@ (8007ae4 <xTaskIncrementTick+0x154>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a3e      	ldr	r2, [pc, #248]	@ (8007ae0 <xTaskIncrementTick+0x150>)
 80079e6:	6013      	str	r3, [r2, #0]
 80079e8:	4a3e      	ldr	r2, [pc, #248]	@ (8007ae4 <xTaskIncrementTick+0x154>)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6013      	str	r3, [r2, #0]
 80079ee:	4b3e      	ldr	r3, [pc, #248]	@ (8007ae8 <xTaskIncrementTick+0x158>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	3301      	adds	r3, #1
 80079f4:	4a3c      	ldr	r2, [pc, #240]	@ (8007ae8 <xTaskIncrementTick+0x158>)
 80079f6:	6013      	str	r3, [r2, #0]
 80079f8:	f000 f996 	bl	8007d28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80079fc:	4b3b      	ldr	r3, [pc, #236]	@ (8007aec <xTaskIncrementTick+0x15c>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	693a      	ldr	r2, [r7, #16]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d348      	bcc.n	8007a98 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a06:	4b36      	ldr	r3, [pc, #216]	@ (8007ae0 <xTaskIncrementTick+0x150>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d104      	bne.n	8007a1a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a10:	4b36      	ldr	r3, [pc, #216]	@ (8007aec <xTaskIncrementTick+0x15c>)
 8007a12:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007a16:	601a      	str	r2, [r3, #0]
					break;
 8007a18:	e03e      	b.n	8007a98 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a1a:	4b31      	ldr	r3, [pc, #196]	@ (8007ae0 <xTaskIncrementTick+0x150>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a2a:	693a      	ldr	r2, [r7, #16]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d203      	bcs.n	8007a3a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007a32:	4a2e      	ldr	r2, [pc, #184]	@ (8007aec <xTaskIncrementTick+0x15c>)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007a38:	e02e      	b.n	8007a98 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	3304      	adds	r3, #4
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7ff fca1 	bl	8007386 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d004      	beq.n	8007a56 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	3318      	adds	r3, #24
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7ff fc98 	bl	8007386 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	409a      	lsls	r2, r3
 8007a5e:	4b24      	ldr	r3, [pc, #144]	@ (8007af0 <xTaskIncrementTick+0x160>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	4a22      	ldr	r2, [pc, #136]	@ (8007af0 <xTaskIncrementTick+0x160>)
 8007a66:	6013      	str	r3, [r2, #0]
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	4413      	add	r3, r2
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	4a1f      	ldr	r2, [pc, #124]	@ (8007af4 <xTaskIncrementTick+0x164>)
 8007a76:	441a      	add	r2, r3
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	3304      	adds	r3, #4
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	4610      	mov	r0, r2
 8007a80:	f7ff fc24 	bl	80072cc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a88:	4b1b      	ldr	r3, [pc, #108]	@ (8007af8 <xTaskIncrementTick+0x168>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d3b9      	bcc.n	8007a06 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007a92:	2301      	movs	r3, #1
 8007a94:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a96:	e7b6      	b.n	8007a06 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a98:	4b17      	ldr	r3, [pc, #92]	@ (8007af8 <xTaskIncrementTick+0x168>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a9e:	4915      	ldr	r1, [pc, #84]	@ (8007af4 <xTaskIncrementTick+0x164>)
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	4413      	add	r3, r2
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	440b      	add	r3, r1
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d901      	bls.n	8007ab4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007ab4:	4b11      	ldr	r3, [pc, #68]	@ (8007afc <xTaskIncrementTick+0x16c>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d007      	beq.n	8007acc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007abc:	2301      	movs	r3, #1
 8007abe:	617b      	str	r3, [r7, #20]
 8007ac0:	e004      	b.n	8007acc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8007b00 <xTaskIncrementTick+0x170>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	4a0d      	ldr	r2, [pc, #52]	@ (8007b00 <xTaskIncrementTick+0x170>)
 8007aca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007acc:	697b      	ldr	r3, [r7, #20]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3718      	adds	r7, #24
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	2002602c 	.word	0x2002602c
 8007adc:	20026008 	.word	0x20026008
 8007ae0:	20025fbc 	.word	0x20025fbc
 8007ae4:	20025fc0 	.word	0x20025fc0
 8007ae8:	2002601c 	.word	0x2002601c
 8007aec:	20026024 	.word	0x20026024
 8007af0:	2002600c 	.word	0x2002600c
 8007af4:	20025f08 	.word	0x20025f08
 8007af8:	20025f04 	.word	0x20025f04
 8007afc:	20026018 	.word	0x20026018
 8007b00:	20026014 	.word	0x20026014

08007b04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b04:	b480      	push	{r7}
 8007b06:	b087      	sub	sp, #28
 8007b08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b0a:	4b27      	ldr	r3, [pc, #156]	@ (8007ba8 <vTaskSwitchContext+0xa4>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d003      	beq.n	8007b1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b12:	4b26      	ldr	r3, [pc, #152]	@ (8007bac <vTaskSwitchContext+0xa8>)
 8007b14:	2201      	movs	r2, #1
 8007b16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b18:	e040      	b.n	8007b9c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007b1a:	4b24      	ldr	r3, [pc, #144]	@ (8007bac <vTaskSwitchContext+0xa8>)
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b20:	4b23      	ldr	r3, [pc, #140]	@ (8007bb0 <vTaskSwitchContext+0xac>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	fab3 f383 	clz	r3, r3
 8007b2c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007b2e:	7afb      	ldrb	r3, [r7, #11]
 8007b30:	f1c3 031f 	rsb	r3, r3, #31
 8007b34:	617b      	str	r3, [r7, #20]
 8007b36:	491f      	ldr	r1, [pc, #124]	@ (8007bb4 <vTaskSwitchContext+0xb0>)
 8007b38:	697a      	ldr	r2, [r7, #20]
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	4413      	add	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	440b      	add	r3, r1
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d10b      	bne.n	8007b62 <vTaskSwitchContext+0x5e>
	__asm volatile
 8007b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b4e:	f383 8811 	msr	BASEPRI, r3
 8007b52:	f3bf 8f6f 	isb	sy
 8007b56:	f3bf 8f4f 	dsb	sy
 8007b5a:	607b      	str	r3, [r7, #4]
}
 8007b5c:	bf00      	nop
 8007b5e:	bf00      	nop
 8007b60:	e7fd      	b.n	8007b5e <vTaskSwitchContext+0x5a>
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	4613      	mov	r3, r2
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4413      	add	r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4a11      	ldr	r2, [pc, #68]	@ (8007bb4 <vTaskSwitchContext+0xb0>)
 8007b6e:	4413      	add	r3, r2
 8007b70:	613b      	str	r3, [r7, #16]
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	685a      	ldr	r2, [r3, #4]
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	605a      	str	r2, [r3, #4]
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	685a      	ldr	r2, [r3, #4]
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	3308      	adds	r3, #8
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d104      	bne.n	8007b92 <vTaskSwitchContext+0x8e>
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	685a      	ldr	r2, [r3, #4]
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	605a      	str	r2, [r3, #4]
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	4a07      	ldr	r2, [pc, #28]	@ (8007bb8 <vTaskSwitchContext+0xb4>)
 8007b9a:	6013      	str	r3, [r2, #0]
}
 8007b9c:	bf00      	nop
 8007b9e:	371c      	adds	r7, #28
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr
 8007ba8:	2002602c 	.word	0x2002602c
 8007bac:	20026018 	.word	0x20026018
 8007bb0:	2002600c 	.word	0x2002600c
 8007bb4:	20025f08 	.word	0x20025f08
 8007bb8:	20025f04 	.word	0x20025f04

08007bbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007bc4:	f000 f852 	bl	8007c6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007bc8:	4b06      	ldr	r3, [pc, #24]	@ (8007be4 <prvIdleTask+0x28>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d9f9      	bls.n	8007bc4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007bd0:	4b05      	ldr	r3, [pc, #20]	@ (8007be8 <prvIdleTask+0x2c>)
 8007bd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bd6:	601a      	str	r2, [r3, #0]
 8007bd8:	f3bf 8f4f 	dsb	sy
 8007bdc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007be0:	e7f0      	b.n	8007bc4 <prvIdleTask+0x8>
 8007be2:	bf00      	nop
 8007be4:	20025f08 	.word	0x20025f08
 8007be8:	e000ed04 	.word	0xe000ed04

08007bec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b082      	sub	sp, #8
 8007bf0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	607b      	str	r3, [r7, #4]
 8007bf6:	e00c      	b.n	8007c12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4413      	add	r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	4a12      	ldr	r2, [pc, #72]	@ (8007c4c <prvInitialiseTaskLists+0x60>)
 8007c04:	4413      	add	r3, r2
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7ff fb33 	bl	8007272 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	607b      	str	r3, [r7, #4]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2b06      	cmp	r3, #6
 8007c16:	d9ef      	bls.n	8007bf8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007c18:	480d      	ldr	r0, [pc, #52]	@ (8007c50 <prvInitialiseTaskLists+0x64>)
 8007c1a:	f7ff fb2a 	bl	8007272 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007c1e:	480d      	ldr	r0, [pc, #52]	@ (8007c54 <prvInitialiseTaskLists+0x68>)
 8007c20:	f7ff fb27 	bl	8007272 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007c24:	480c      	ldr	r0, [pc, #48]	@ (8007c58 <prvInitialiseTaskLists+0x6c>)
 8007c26:	f7ff fb24 	bl	8007272 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007c2a:	480c      	ldr	r0, [pc, #48]	@ (8007c5c <prvInitialiseTaskLists+0x70>)
 8007c2c:	f7ff fb21 	bl	8007272 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007c30:	480b      	ldr	r0, [pc, #44]	@ (8007c60 <prvInitialiseTaskLists+0x74>)
 8007c32:	f7ff fb1e 	bl	8007272 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007c36:	4b0b      	ldr	r3, [pc, #44]	@ (8007c64 <prvInitialiseTaskLists+0x78>)
 8007c38:	4a05      	ldr	r2, [pc, #20]	@ (8007c50 <prvInitialiseTaskLists+0x64>)
 8007c3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8007c68 <prvInitialiseTaskLists+0x7c>)
 8007c3e:	4a05      	ldr	r2, [pc, #20]	@ (8007c54 <prvInitialiseTaskLists+0x68>)
 8007c40:	601a      	str	r2, [r3, #0]
}
 8007c42:	bf00      	nop
 8007c44:	3708      	adds	r7, #8
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	bf00      	nop
 8007c4c:	20025f08 	.word	0x20025f08
 8007c50:	20025f94 	.word	0x20025f94
 8007c54:	20025fa8 	.word	0x20025fa8
 8007c58:	20025fc4 	.word	0x20025fc4
 8007c5c:	20025fd8 	.word	0x20025fd8
 8007c60:	20025ff0 	.word	0x20025ff0
 8007c64:	20025fbc 	.word	0x20025fbc
 8007c68:	20025fc0 	.word	0x20025fc0

08007c6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c72:	e019      	b.n	8007ca8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007c74:	f000 fa30 	bl	80080d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c78:	4b10      	ldr	r3, [pc, #64]	@ (8007cbc <prvCheckTasksWaitingTermination+0x50>)
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	3304      	adds	r3, #4
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7ff fb7e 	bl	8007386 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8007cc0 <prvCheckTasksWaitingTermination+0x54>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	4a0b      	ldr	r2, [pc, #44]	@ (8007cc0 <prvCheckTasksWaitingTermination+0x54>)
 8007c92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007c94:	4b0b      	ldr	r3, [pc, #44]	@ (8007cc4 <prvCheckTasksWaitingTermination+0x58>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8007cc4 <prvCheckTasksWaitingTermination+0x58>)
 8007c9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007c9e:	f000 fa4d 	bl	800813c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f810 	bl	8007cc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ca8:	4b06      	ldr	r3, [pc, #24]	@ (8007cc4 <prvCheckTasksWaitingTermination+0x58>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d1e1      	bne.n	8007c74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007cb0:	bf00      	nop
 8007cb2:	bf00      	nop
 8007cb4:	3708      	adds	r7, #8
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	20025fd8 	.word	0x20025fd8
 8007cc0:	20026004 	.word	0x20026004
 8007cc4:	20025fec 	.word	0x20025fec

08007cc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d108      	bne.n	8007cec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f000 fba8 	bl	8008434 <vPortFree>
				vPortFree( pxTCB );
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 fba5 	bl	8008434 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007cea:	e019      	b.n	8007d20 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d103      	bne.n	8007cfe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fb9c 	bl	8008434 <vPortFree>
	}
 8007cfc:	e010      	b.n	8007d20 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d00b      	beq.n	8007d20 <prvDeleteTCB+0x58>
	__asm volatile
 8007d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d0c:	f383 8811 	msr	BASEPRI, r3
 8007d10:	f3bf 8f6f 	isb	sy
 8007d14:	f3bf 8f4f 	dsb	sy
 8007d18:	60fb      	str	r3, [r7, #12]
}
 8007d1a:	bf00      	nop
 8007d1c:	bf00      	nop
 8007d1e:	e7fd      	b.n	8007d1c <prvDeleteTCB+0x54>
	}
 8007d20:	bf00      	nop
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8007d60 <prvResetNextTaskUnblockTime+0x38>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d104      	bne.n	8007d42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007d38:	4b0a      	ldr	r3, [pc, #40]	@ (8007d64 <prvResetNextTaskUnblockTime+0x3c>)
 8007d3a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007d3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007d40:	e008      	b.n	8007d54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d42:	4b07      	ldr	r3, [pc, #28]	@ (8007d60 <prvResetNextTaskUnblockTime+0x38>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	68db      	ldr	r3, [r3, #12]
 8007d4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	4a04      	ldr	r2, [pc, #16]	@ (8007d64 <prvResetNextTaskUnblockTime+0x3c>)
 8007d52:	6013      	str	r3, [r2, #0]
}
 8007d54:	bf00      	nop
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr
 8007d60:	20025fbc 	.word	0x20025fbc
 8007d64:	20026024 	.word	0x20026024

08007d68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8007d9c <xTaskGetSchedulerState+0x34>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d102      	bne.n	8007d7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007d76:	2301      	movs	r3, #1
 8007d78:	607b      	str	r3, [r7, #4]
 8007d7a:	e008      	b.n	8007d8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d7c:	4b08      	ldr	r3, [pc, #32]	@ (8007da0 <xTaskGetSchedulerState+0x38>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d102      	bne.n	8007d8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007d84:	2302      	movs	r3, #2
 8007d86:	607b      	str	r3, [r7, #4]
 8007d88:	e001      	b.n	8007d8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007d8e:	687b      	ldr	r3, [r7, #4]
	}
 8007d90:	4618      	mov	r0, r3
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr
 8007d9c:	20026010 	.word	0x20026010
 8007da0:	2002602c 	.word	0x2002602c

08007da4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007dae:	4b29      	ldr	r3, [pc, #164]	@ (8007e54 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007db4:	4b28      	ldr	r3, [pc, #160]	@ (8007e58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	3304      	adds	r3, #4
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7ff fae3 	bl	8007386 <uxListRemove>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d10b      	bne.n	8007dde <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007dc6:	4b24      	ldr	r3, [pc, #144]	@ (8007e58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dcc:	2201      	movs	r2, #1
 8007dce:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd2:	43da      	mvns	r2, r3
 8007dd4:	4b21      	ldr	r3, [pc, #132]	@ (8007e5c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4013      	ands	r3, r2
 8007dda:	4a20      	ldr	r2, [pc, #128]	@ (8007e5c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007ddc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007de4:	d10a      	bne.n	8007dfc <prvAddCurrentTaskToDelayedList+0x58>
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d007      	beq.n	8007dfc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dec:	4b1a      	ldr	r3, [pc, #104]	@ (8007e58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	3304      	adds	r3, #4
 8007df2:	4619      	mov	r1, r3
 8007df4:	481a      	ldr	r0, [pc, #104]	@ (8007e60 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007df6:	f7ff fa69 	bl	80072cc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007dfa:	e026      	b.n	8007e4a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4413      	add	r3, r2
 8007e02:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007e04:	4b14      	ldr	r3, [pc, #80]	@ (8007e58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	68ba      	ldr	r2, [r7, #8]
 8007e0a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007e0c:	68ba      	ldr	r2, [r7, #8]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d209      	bcs.n	8007e28 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e14:	4b13      	ldr	r3, [pc, #76]	@ (8007e64 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	4b0f      	ldr	r3, [pc, #60]	@ (8007e58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	3304      	adds	r3, #4
 8007e1e:	4619      	mov	r1, r3
 8007e20:	4610      	mov	r0, r2
 8007e22:	f7ff fa77 	bl	8007314 <vListInsert>
}
 8007e26:	e010      	b.n	8007e4a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e28:	4b0f      	ldr	r3, [pc, #60]	@ (8007e68 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8007e58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	3304      	adds	r3, #4
 8007e32:	4619      	mov	r1, r3
 8007e34:	4610      	mov	r0, r2
 8007e36:	f7ff fa6d 	bl	8007314 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8007e6c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	68ba      	ldr	r2, [r7, #8]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d202      	bcs.n	8007e4a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007e44:	4a09      	ldr	r2, [pc, #36]	@ (8007e6c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	6013      	str	r3, [r2, #0]
}
 8007e4a:	bf00      	nop
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	20026008 	.word	0x20026008
 8007e58:	20025f04 	.word	0x20025f04
 8007e5c:	2002600c 	.word	0x2002600c
 8007e60:	20025ff0 	.word	0x20025ff0
 8007e64:	20025fc0 	.word	0x20025fc0
 8007e68:	20025fbc 	.word	0x20025fbc
 8007e6c:	20026024 	.word	0x20026024

08007e70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e70:	b480      	push	{r7}
 8007e72:	b085      	sub	sp, #20
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	3b04      	subs	r3, #4
 8007e80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007e88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	3b04      	subs	r3, #4
 8007e8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	f023 0201 	bic.w	r2, r3, #1
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	3b04      	subs	r3, #4
 8007e9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ea0:	4a0c      	ldr	r2, [pc, #48]	@ (8007ed4 <pxPortInitialiseStack+0x64>)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	3b14      	subs	r3, #20
 8007eaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	3b04      	subs	r3, #4
 8007eb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f06f 0202 	mvn.w	r2, #2
 8007ebe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	3b20      	subs	r3, #32
 8007ec4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3714      	adds	r7, #20
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr
 8007ed4:	08007ed9 	.word	0x08007ed9

08007ed8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b085      	sub	sp, #20
 8007edc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007ee2:	4b13      	ldr	r3, [pc, #76]	@ (8007f30 <prvTaskExitError+0x58>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007eea:	d00b      	beq.n	8007f04 <prvTaskExitError+0x2c>
	__asm volatile
 8007eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef0:	f383 8811 	msr	BASEPRI, r3
 8007ef4:	f3bf 8f6f 	isb	sy
 8007ef8:	f3bf 8f4f 	dsb	sy
 8007efc:	60fb      	str	r3, [r7, #12]
}
 8007efe:	bf00      	nop
 8007f00:	bf00      	nop
 8007f02:	e7fd      	b.n	8007f00 <prvTaskExitError+0x28>
	__asm volatile
 8007f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f08:	f383 8811 	msr	BASEPRI, r3
 8007f0c:	f3bf 8f6f 	isb	sy
 8007f10:	f3bf 8f4f 	dsb	sy
 8007f14:	60bb      	str	r3, [r7, #8]
}
 8007f16:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f18:	bf00      	nop
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d0fc      	beq.n	8007f1a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f20:	bf00      	nop
 8007f22:	bf00      	nop
 8007f24:	3714      	adds	r7, #20
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	20000088 	.word	0x20000088
	...

08007f40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f40:	4b07      	ldr	r3, [pc, #28]	@ (8007f60 <pxCurrentTCBConst2>)
 8007f42:	6819      	ldr	r1, [r3, #0]
 8007f44:	6808      	ldr	r0, [r1, #0]
 8007f46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f4a:	f380 8809 	msr	PSP, r0
 8007f4e:	f3bf 8f6f 	isb	sy
 8007f52:	f04f 0000 	mov.w	r0, #0
 8007f56:	f380 8811 	msr	BASEPRI, r0
 8007f5a:	4770      	bx	lr
 8007f5c:	f3af 8000 	nop.w

08007f60 <pxCurrentTCBConst2>:
 8007f60:	20025f04 	.word	0x20025f04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f64:	bf00      	nop
 8007f66:	bf00      	nop

08007f68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f68:	4808      	ldr	r0, [pc, #32]	@ (8007f8c <prvPortStartFirstTask+0x24>)
 8007f6a:	6800      	ldr	r0, [r0, #0]
 8007f6c:	6800      	ldr	r0, [r0, #0]
 8007f6e:	f380 8808 	msr	MSP, r0
 8007f72:	f04f 0000 	mov.w	r0, #0
 8007f76:	f380 8814 	msr	CONTROL, r0
 8007f7a:	b662      	cpsie	i
 8007f7c:	b661      	cpsie	f
 8007f7e:	f3bf 8f4f 	dsb	sy
 8007f82:	f3bf 8f6f 	isb	sy
 8007f86:	df00      	svc	0
 8007f88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f8a:	bf00      	nop
 8007f8c:	e000ed08 	.word	0xe000ed08

08007f90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007f96:	4b47      	ldr	r3, [pc, #284]	@ (80080b4 <xPortStartScheduler+0x124>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a47      	ldr	r2, [pc, #284]	@ (80080b8 <xPortStartScheduler+0x128>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d10b      	bne.n	8007fb8 <xPortStartScheduler+0x28>
	__asm volatile
 8007fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fa4:	f383 8811 	msr	BASEPRI, r3
 8007fa8:	f3bf 8f6f 	isb	sy
 8007fac:	f3bf 8f4f 	dsb	sy
 8007fb0:	613b      	str	r3, [r7, #16]
}
 8007fb2:	bf00      	nop
 8007fb4:	bf00      	nop
 8007fb6:	e7fd      	b.n	8007fb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007fb8:	4b3e      	ldr	r3, [pc, #248]	@ (80080b4 <xPortStartScheduler+0x124>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a3f      	ldr	r2, [pc, #252]	@ (80080bc <xPortStartScheduler+0x12c>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d10b      	bne.n	8007fda <xPortStartScheduler+0x4a>
	__asm volatile
 8007fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc6:	f383 8811 	msr	BASEPRI, r3
 8007fca:	f3bf 8f6f 	isb	sy
 8007fce:	f3bf 8f4f 	dsb	sy
 8007fd2:	60fb      	str	r3, [r7, #12]
}
 8007fd4:	bf00      	nop
 8007fd6:	bf00      	nop
 8007fd8:	e7fd      	b.n	8007fd6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007fda:	4b39      	ldr	r3, [pc, #228]	@ (80080c0 <xPortStartScheduler+0x130>)
 8007fdc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	22ff      	movs	r2, #255	@ 0xff
 8007fea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ff4:	78fb      	ldrb	r3, [r7, #3]
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007ffc:	b2da      	uxtb	r2, r3
 8007ffe:	4b31      	ldr	r3, [pc, #196]	@ (80080c4 <xPortStartScheduler+0x134>)
 8008000:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008002:	4b31      	ldr	r3, [pc, #196]	@ (80080c8 <xPortStartScheduler+0x138>)
 8008004:	2207      	movs	r2, #7
 8008006:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008008:	e009      	b.n	800801e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800800a:	4b2f      	ldr	r3, [pc, #188]	@ (80080c8 <xPortStartScheduler+0x138>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	3b01      	subs	r3, #1
 8008010:	4a2d      	ldr	r2, [pc, #180]	@ (80080c8 <xPortStartScheduler+0x138>)
 8008012:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008014:	78fb      	ldrb	r3, [r7, #3]
 8008016:	b2db      	uxtb	r3, r3
 8008018:	005b      	lsls	r3, r3, #1
 800801a:	b2db      	uxtb	r3, r3
 800801c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800801e:	78fb      	ldrb	r3, [r7, #3]
 8008020:	b2db      	uxtb	r3, r3
 8008022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008026:	2b80      	cmp	r3, #128	@ 0x80
 8008028:	d0ef      	beq.n	800800a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800802a:	4b27      	ldr	r3, [pc, #156]	@ (80080c8 <xPortStartScheduler+0x138>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f1c3 0307 	rsb	r3, r3, #7
 8008032:	2b04      	cmp	r3, #4
 8008034:	d00b      	beq.n	800804e <xPortStartScheduler+0xbe>
	__asm volatile
 8008036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800803a:	f383 8811 	msr	BASEPRI, r3
 800803e:	f3bf 8f6f 	isb	sy
 8008042:	f3bf 8f4f 	dsb	sy
 8008046:	60bb      	str	r3, [r7, #8]
}
 8008048:	bf00      	nop
 800804a:	bf00      	nop
 800804c:	e7fd      	b.n	800804a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800804e:	4b1e      	ldr	r3, [pc, #120]	@ (80080c8 <xPortStartScheduler+0x138>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	021b      	lsls	r3, r3, #8
 8008054:	4a1c      	ldr	r2, [pc, #112]	@ (80080c8 <xPortStartScheduler+0x138>)
 8008056:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008058:	4b1b      	ldr	r3, [pc, #108]	@ (80080c8 <xPortStartScheduler+0x138>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008060:	4a19      	ldr	r2, [pc, #100]	@ (80080c8 <xPortStartScheduler+0x138>)
 8008062:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	b2da      	uxtb	r2, r3
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800806c:	4b17      	ldr	r3, [pc, #92]	@ (80080cc <xPortStartScheduler+0x13c>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a16      	ldr	r2, [pc, #88]	@ (80080cc <xPortStartScheduler+0x13c>)
 8008072:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008076:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008078:	4b14      	ldr	r3, [pc, #80]	@ (80080cc <xPortStartScheduler+0x13c>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a13      	ldr	r2, [pc, #76]	@ (80080cc <xPortStartScheduler+0x13c>)
 800807e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008082:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008084:	f000 f8da 	bl	800823c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008088:	4b11      	ldr	r3, [pc, #68]	@ (80080d0 <xPortStartScheduler+0x140>)
 800808a:	2200      	movs	r2, #0
 800808c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800808e:	f000 f8f9 	bl	8008284 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008092:	4b10      	ldr	r3, [pc, #64]	@ (80080d4 <xPortStartScheduler+0x144>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a0f      	ldr	r2, [pc, #60]	@ (80080d4 <xPortStartScheduler+0x144>)
 8008098:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800809c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800809e:	f7ff ff63 	bl	8007f68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80080a2:	f7ff fd2f 	bl	8007b04 <vTaskSwitchContext>
	prvTaskExitError();
 80080a6:	f7ff ff17 	bl	8007ed8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3718      	adds	r7, #24
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	e000ed00 	.word	0xe000ed00
 80080b8:	410fc271 	.word	0x410fc271
 80080bc:	410fc270 	.word	0x410fc270
 80080c0:	e000e400 	.word	0xe000e400
 80080c4:	20026030 	.word	0x20026030
 80080c8:	20026034 	.word	0x20026034
 80080cc:	e000ed20 	.word	0xe000ed20
 80080d0:	20000088 	.word	0x20000088
 80080d4:	e000ef34 	.word	0xe000ef34

080080d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
	__asm volatile
 80080de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080e2:	f383 8811 	msr	BASEPRI, r3
 80080e6:	f3bf 8f6f 	isb	sy
 80080ea:	f3bf 8f4f 	dsb	sy
 80080ee:	607b      	str	r3, [r7, #4]
}
 80080f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80080f2:	4b10      	ldr	r3, [pc, #64]	@ (8008134 <vPortEnterCritical+0x5c>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	3301      	adds	r3, #1
 80080f8:	4a0e      	ldr	r2, [pc, #56]	@ (8008134 <vPortEnterCritical+0x5c>)
 80080fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80080fc:	4b0d      	ldr	r3, [pc, #52]	@ (8008134 <vPortEnterCritical+0x5c>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2b01      	cmp	r3, #1
 8008102:	d110      	bne.n	8008126 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008104:	4b0c      	ldr	r3, [pc, #48]	@ (8008138 <vPortEnterCritical+0x60>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	b2db      	uxtb	r3, r3
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00b      	beq.n	8008126 <vPortEnterCritical+0x4e>
	__asm volatile
 800810e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008112:	f383 8811 	msr	BASEPRI, r3
 8008116:	f3bf 8f6f 	isb	sy
 800811a:	f3bf 8f4f 	dsb	sy
 800811e:	603b      	str	r3, [r7, #0]
}
 8008120:	bf00      	nop
 8008122:	bf00      	nop
 8008124:	e7fd      	b.n	8008122 <vPortEnterCritical+0x4a>
	}
}
 8008126:	bf00      	nop
 8008128:	370c      	adds	r7, #12
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop
 8008134:	20000088 	.word	0x20000088
 8008138:	e000ed04 	.word	0xe000ed04

0800813c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008142:	4b12      	ldr	r3, [pc, #72]	@ (800818c <vPortExitCritical+0x50>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d10b      	bne.n	8008162 <vPortExitCritical+0x26>
	__asm volatile
 800814a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800814e:	f383 8811 	msr	BASEPRI, r3
 8008152:	f3bf 8f6f 	isb	sy
 8008156:	f3bf 8f4f 	dsb	sy
 800815a:	607b      	str	r3, [r7, #4]
}
 800815c:	bf00      	nop
 800815e:	bf00      	nop
 8008160:	e7fd      	b.n	800815e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008162:	4b0a      	ldr	r3, [pc, #40]	@ (800818c <vPortExitCritical+0x50>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	3b01      	subs	r3, #1
 8008168:	4a08      	ldr	r2, [pc, #32]	@ (800818c <vPortExitCritical+0x50>)
 800816a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800816c:	4b07      	ldr	r3, [pc, #28]	@ (800818c <vPortExitCritical+0x50>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d105      	bne.n	8008180 <vPortExitCritical+0x44>
 8008174:	2300      	movs	r3, #0
 8008176:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800817e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008180:	bf00      	nop
 8008182:	370c      	adds	r7, #12
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr
 800818c:	20000088 	.word	0x20000088

08008190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008190:	f3ef 8009 	mrs	r0, PSP
 8008194:	f3bf 8f6f 	isb	sy
 8008198:	4b15      	ldr	r3, [pc, #84]	@ (80081f0 <pxCurrentTCBConst>)
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	f01e 0f10 	tst.w	lr, #16
 80081a0:	bf08      	it	eq
 80081a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80081a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081aa:	6010      	str	r0, [r2, #0]
 80081ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80081b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80081b4:	f380 8811 	msr	BASEPRI, r0
 80081b8:	f3bf 8f4f 	dsb	sy
 80081bc:	f3bf 8f6f 	isb	sy
 80081c0:	f7ff fca0 	bl	8007b04 <vTaskSwitchContext>
 80081c4:	f04f 0000 	mov.w	r0, #0
 80081c8:	f380 8811 	msr	BASEPRI, r0
 80081cc:	bc09      	pop	{r0, r3}
 80081ce:	6819      	ldr	r1, [r3, #0]
 80081d0:	6808      	ldr	r0, [r1, #0]
 80081d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d6:	f01e 0f10 	tst.w	lr, #16
 80081da:	bf08      	it	eq
 80081dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80081e0:	f380 8809 	msr	PSP, r0
 80081e4:	f3bf 8f6f 	isb	sy
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop
 80081ec:	f3af 8000 	nop.w

080081f0 <pxCurrentTCBConst>:
 80081f0:	20025f04 	.word	0x20025f04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80081f4:	bf00      	nop
 80081f6:	bf00      	nop

080081f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
	__asm volatile
 80081fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008202:	f383 8811 	msr	BASEPRI, r3
 8008206:	f3bf 8f6f 	isb	sy
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	607b      	str	r3, [r7, #4]
}
 8008210:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008212:	f7ff fbbd 	bl	8007990 <xTaskIncrementTick>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d003      	beq.n	8008224 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800821c:	4b06      	ldr	r3, [pc, #24]	@ (8008238 <xPortSysTickHandler+0x40>)
 800821e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008222:	601a      	str	r2, [r3, #0]
 8008224:	2300      	movs	r3, #0
 8008226:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	f383 8811 	msr	BASEPRI, r3
}
 800822e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008230:	bf00      	nop
 8008232:	3708      	adds	r7, #8
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}
 8008238:	e000ed04 	.word	0xe000ed04

0800823c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800823c:	b480      	push	{r7}
 800823e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008240:	4b0b      	ldr	r3, [pc, #44]	@ (8008270 <vPortSetupTimerInterrupt+0x34>)
 8008242:	2200      	movs	r2, #0
 8008244:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008246:	4b0b      	ldr	r3, [pc, #44]	@ (8008274 <vPortSetupTimerInterrupt+0x38>)
 8008248:	2200      	movs	r2, #0
 800824a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800824c:	4b0a      	ldr	r3, [pc, #40]	@ (8008278 <vPortSetupTimerInterrupt+0x3c>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a0a      	ldr	r2, [pc, #40]	@ (800827c <vPortSetupTimerInterrupt+0x40>)
 8008252:	fba2 2303 	umull	r2, r3, r2, r3
 8008256:	099b      	lsrs	r3, r3, #6
 8008258:	4a09      	ldr	r2, [pc, #36]	@ (8008280 <vPortSetupTimerInterrupt+0x44>)
 800825a:	3b01      	subs	r3, #1
 800825c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800825e:	4b04      	ldr	r3, [pc, #16]	@ (8008270 <vPortSetupTimerInterrupt+0x34>)
 8008260:	2207      	movs	r2, #7
 8008262:	601a      	str	r2, [r3, #0]
}
 8008264:	bf00      	nop
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop
 8008270:	e000e010 	.word	0xe000e010
 8008274:	e000e018 	.word	0xe000e018
 8008278:	2000007c 	.word	0x2000007c
 800827c:	10624dd3 	.word	0x10624dd3
 8008280:	e000e014 	.word	0xe000e014

08008284 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008284:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008294 <vPortEnableVFP+0x10>
 8008288:	6801      	ldr	r1, [r0, #0]
 800828a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800828e:	6001      	str	r1, [r0, #0]
 8008290:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008292:	bf00      	nop
 8008294:	e000ed88 	.word	0xe000ed88

08008298 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b08a      	sub	sp, #40	@ 0x28
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80082a0:	2300      	movs	r3, #0
 80082a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80082a4:	f7ff fac8 	bl	8007838 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80082a8:	4b5c      	ldr	r3, [pc, #368]	@ (800841c <pvPortMalloc+0x184>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d101      	bne.n	80082b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80082b0:	f000 f924 	bl	80084fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80082b4:	4b5a      	ldr	r3, [pc, #360]	@ (8008420 <pvPortMalloc+0x188>)
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4013      	ands	r3, r2
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f040 8095 	bne.w	80083ec <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d01e      	beq.n	8008306 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80082c8:	2208      	movs	r2, #8
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4413      	add	r3, r2
 80082ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f003 0307 	and.w	r3, r3, #7
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d015      	beq.n	8008306 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f023 0307 	bic.w	r3, r3, #7
 80082e0:	3308      	adds	r3, #8
 80082e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f003 0307 	and.w	r3, r3, #7
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00b      	beq.n	8008306 <pvPortMalloc+0x6e>
	__asm volatile
 80082ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f2:	f383 8811 	msr	BASEPRI, r3
 80082f6:	f3bf 8f6f 	isb	sy
 80082fa:	f3bf 8f4f 	dsb	sy
 80082fe:	617b      	str	r3, [r7, #20]
}
 8008300:	bf00      	nop
 8008302:	bf00      	nop
 8008304:	e7fd      	b.n	8008302 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d06f      	beq.n	80083ec <pvPortMalloc+0x154>
 800830c:	4b45      	ldr	r3, [pc, #276]	@ (8008424 <pvPortMalloc+0x18c>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	429a      	cmp	r2, r3
 8008314:	d86a      	bhi.n	80083ec <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008316:	4b44      	ldr	r3, [pc, #272]	@ (8008428 <pvPortMalloc+0x190>)
 8008318:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800831a:	4b43      	ldr	r3, [pc, #268]	@ (8008428 <pvPortMalloc+0x190>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008320:	e004      	b.n	800832c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008324:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800832c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	429a      	cmp	r2, r3
 8008334:	d903      	bls.n	800833e <pvPortMalloc+0xa6>
 8008336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d1f1      	bne.n	8008322 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800833e:	4b37      	ldr	r3, [pc, #220]	@ (800841c <pvPortMalloc+0x184>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008344:	429a      	cmp	r2, r3
 8008346:	d051      	beq.n	80083ec <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008348:	6a3b      	ldr	r3, [r7, #32]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2208      	movs	r2, #8
 800834e:	4413      	add	r3, r2
 8008350:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	6a3b      	ldr	r3, [r7, #32]
 8008358:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800835a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800835c:	685a      	ldr	r2, [r3, #4]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	1ad2      	subs	r2, r2, r3
 8008362:	2308      	movs	r3, #8
 8008364:	005b      	lsls	r3, r3, #1
 8008366:	429a      	cmp	r2, r3
 8008368:	d920      	bls.n	80083ac <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800836a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4413      	add	r3, r2
 8008370:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	f003 0307 	and.w	r3, r3, #7
 8008378:	2b00      	cmp	r3, #0
 800837a:	d00b      	beq.n	8008394 <pvPortMalloc+0xfc>
	__asm volatile
 800837c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008380:	f383 8811 	msr	BASEPRI, r3
 8008384:	f3bf 8f6f 	isb	sy
 8008388:	f3bf 8f4f 	dsb	sy
 800838c:	613b      	str	r3, [r7, #16]
}
 800838e:	bf00      	nop
 8008390:	bf00      	nop
 8008392:	e7fd      	b.n	8008390 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008396:	685a      	ldr	r2, [r3, #4]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	1ad2      	subs	r2, r2, r3
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80083a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80083a6:	69b8      	ldr	r0, [r7, #24]
 80083a8:	f000 f90a 	bl	80085c0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80083ac:	4b1d      	ldr	r3, [pc, #116]	@ (8008424 <pvPortMalloc+0x18c>)
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	1ad3      	subs	r3, r2, r3
 80083b6:	4a1b      	ldr	r2, [pc, #108]	@ (8008424 <pvPortMalloc+0x18c>)
 80083b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80083ba:	4b1a      	ldr	r3, [pc, #104]	@ (8008424 <pvPortMalloc+0x18c>)
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	4b1b      	ldr	r3, [pc, #108]	@ (800842c <pvPortMalloc+0x194>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d203      	bcs.n	80083ce <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80083c6:	4b17      	ldr	r3, [pc, #92]	@ (8008424 <pvPortMalloc+0x18c>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a18      	ldr	r2, [pc, #96]	@ (800842c <pvPortMalloc+0x194>)
 80083cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80083ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d0:	685a      	ldr	r2, [r3, #4]
 80083d2:	4b13      	ldr	r3, [pc, #76]	@ (8008420 <pvPortMalloc+0x188>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	431a      	orrs	r2, r3
 80083d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80083dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083de:	2200      	movs	r2, #0
 80083e0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80083e2:	4b13      	ldr	r3, [pc, #76]	@ (8008430 <pvPortMalloc+0x198>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	3301      	adds	r3, #1
 80083e8:	4a11      	ldr	r2, [pc, #68]	@ (8008430 <pvPortMalloc+0x198>)
 80083ea:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80083ec:	f7ff fa32 	bl	8007854 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	f003 0307 	and.w	r3, r3, #7
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00b      	beq.n	8008412 <pvPortMalloc+0x17a>
	__asm volatile
 80083fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083fe:	f383 8811 	msr	BASEPRI, r3
 8008402:	f3bf 8f6f 	isb	sy
 8008406:	f3bf 8f4f 	dsb	sy
 800840a:	60fb      	str	r3, [r7, #12]
}
 800840c:	bf00      	nop
 800840e:	bf00      	nop
 8008410:	e7fd      	b.n	800840e <pvPortMalloc+0x176>
	return pvReturn;
 8008412:	69fb      	ldr	r3, [r7, #28]
}
 8008414:	4618      	mov	r0, r3
 8008416:	3728      	adds	r7, #40	@ 0x28
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	20029c40 	.word	0x20029c40
 8008420:	20029c54 	.word	0x20029c54
 8008424:	20029c44 	.word	0x20029c44
 8008428:	20029c38 	.word	0x20029c38
 800842c:	20029c48 	.word	0x20029c48
 8008430:	20029c4c 	.word	0x20029c4c

08008434 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b086      	sub	sp, #24
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d04f      	beq.n	80084e6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008446:	2308      	movs	r3, #8
 8008448:	425b      	negs	r3, r3
 800844a:	697a      	ldr	r2, [r7, #20]
 800844c:	4413      	add	r3, r2
 800844e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	685a      	ldr	r2, [r3, #4]
 8008458:	4b25      	ldr	r3, [pc, #148]	@ (80084f0 <vPortFree+0xbc>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4013      	ands	r3, r2
 800845e:	2b00      	cmp	r3, #0
 8008460:	d10b      	bne.n	800847a <vPortFree+0x46>
	__asm volatile
 8008462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008466:	f383 8811 	msr	BASEPRI, r3
 800846a:	f3bf 8f6f 	isb	sy
 800846e:	f3bf 8f4f 	dsb	sy
 8008472:	60fb      	str	r3, [r7, #12]
}
 8008474:	bf00      	nop
 8008476:	bf00      	nop
 8008478:	e7fd      	b.n	8008476 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d00b      	beq.n	800849a <vPortFree+0x66>
	__asm volatile
 8008482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008486:	f383 8811 	msr	BASEPRI, r3
 800848a:	f3bf 8f6f 	isb	sy
 800848e:	f3bf 8f4f 	dsb	sy
 8008492:	60bb      	str	r3, [r7, #8]
}
 8008494:	bf00      	nop
 8008496:	bf00      	nop
 8008498:	e7fd      	b.n	8008496 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	685a      	ldr	r2, [r3, #4]
 800849e:	4b14      	ldr	r3, [pc, #80]	@ (80084f0 <vPortFree+0xbc>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4013      	ands	r3, r2
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d01e      	beq.n	80084e6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d11a      	bne.n	80084e6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	685a      	ldr	r2, [r3, #4]
 80084b4:	4b0e      	ldr	r3, [pc, #56]	@ (80084f0 <vPortFree+0xbc>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	43db      	mvns	r3, r3
 80084ba:	401a      	ands	r2, r3
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80084c0:	f7ff f9ba 	bl	8007838 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	685a      	ldr	r2, [r3, #4]
 80084c8:	4b0a      	ldr	r3, [pc, #40]	@ (80084f4 <vPortFree+0xc0>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4413      	add	r3, r2
 80084ce:	4a09      	ldr	r2, [pc, #36]	@ (80084f4 <vPortFree+0xc0>)
 80084d0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80084d2:	6938      	ldr	r0, [r7, #16]
 80084d4:	f000 f874 	bl	80085c0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80084d8:	4b07      	ldr	r3, [pc, #28]	@ (80084f8 <vPortFree+0xc4>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	3301      	adds	r3, #1
 80084de:	4a06      	ldr	r2, [pc, #24]	@ (80084f8 <vPortFree+0xc4>)
 80084e0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80084e2:	f7ff f9b7 	bl	8007854 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80084e6:	bf00      	nop
 80084e8:	3718      	adds	r7, #24
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	20029c54 	.word	0x20029c54
 80084f4:	20029c44 	.word	0x20029c44
 80084f8:	20029c50 	.word	0x20029c50

080084fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008502:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008506:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008508:	4b27      	ldr	r3, [pc, #156]	@ (80085a8 <prvHeapInit+0xac>)
 800850a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f003 0307 	and.w	r3, r3, #7
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00c      	beq.n	8008530 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	3307      	adds	r3, #7
 800851a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f023 0307 	bic.w	r3, r3, #7
 8008522:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008524:	68ba      	ldr	r2, [r7, #8]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	1ad3      	subs	r3, r2, r3
 800852a:	4a1f      	ldr	r2, [pc, #124]	@ (80085a8 <prvHeapInit+0xac>)
 800852c:	4413      	add	r3, r2
 800852e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008534:	4a1d      	ldr	r2, [pc, #116]	@ (80085ac <prvHeapInit+0xb0>)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800853a:	4b1c      	ldr	r3, [pc, #112]	@ (80085ac <prvHeapInit+0xb0>)
 800853c:	2200      	movs	r2, #0
 800853e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	68ba      	ldr	r2, [r7, #8]
 8008544:	4413      	add	r3, r2
 8008546:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008548:	2208      	movs	r2, #8
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	1a9b      	subs	r3, r3, r2
 800854e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f023 0307 	bic.w	r3, r3, #7
 8008556:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	4a15      	ldr	r2, [pc, #84]	@ (80085b0 <prvHeapInit+0xb4>)
 800855c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800855e:	4b14      	ldr	r3, [pc, #80]	@ (80085b0 <prvHeapInit+0xb4>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2200      	movs	r2, #0
 8008564:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008566:	4b12      	ldr	r3, [pc, #72]	@ (80085b0 <prvHeapInit+0xb4>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2200      	movs	r2, #0
 800856c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	1ad2      	subs	r2, r2, r3
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800857c:	4b0c      	ldr	r3, [pc, #48]	@ (80085b0 <prvHeapInit+0xb4>)
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	4a0a      	ldr	r2, [pc, #40]	@ (80085b4 <prvHeapInit+0xb8>)
 800858a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	4a09      	ldr	r2, [pc, #36]	@ (80085b8 <prvHeapInit+0xbc>)
 8008592:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008594:	4b09      	ldr	r3, [pc, #36]	@ (80085bc <prvHeapInit+0xc0>)
 8008596:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800859a:	601a      	str	r2, [r3, #0]
}
 800859c:	bf00      	nop
 800859e:	3714      	adds	r7, #20
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr
 80085a8:	20026038 	.word	0x20026038
 80085ac:	20029c38 	.word	0x20029c38
 80085b0:	20029c40 	.word	0x20029c40
 80085b4:	20029c48 	.word	0x20029c48
 80085b8:	20029c44 	.word	0x20029c44
 80085bc:	20029c54 	.word	0x20029c54

080085c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80085c0:	b480      	push	{r7}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80085c8:	4b28      	ldr	r3, [pc, #160]	@ (800866c <prvInsertBlockIntoFreeList+0xac>)
 80085ca:	60fb      	str	r3, [r7, #12]
 80085cc:	e002      	b.n	80085d4 <prvInsertBlockIntoFreeList+0x14>
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	60fb      	str	r3, [r7, #12]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	429a      	cmp	r2, r3
 80085dc:	d8f7      	bhi.n	80085ce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	68ba      	ldr	r2, [r7, #8]
 80085e8:	4413      	add	r3, r2
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d108      	bne.n	8008602 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	685a      	ldr	r2, [r3, #4]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	441a      	add	r2, r3
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	68ba      	ldr	r2, [r7, #8]
 800860c:	441a      	add	r2, r3
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	429a      	cmp	r2, r3
 8008614:	d118      	bne.n	8008648 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	4b15      	ldr	r3, [pc, #84]	@ (8008670 <prvInsertBlockIntoFreeList+0xb0>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	429a      	cmp	r2, r3
 8008620:	d00d      	beq.n	800863e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	685a      	ldr	r2, [r3, #4]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	441a      	add	r2, r3
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	601a      	str	r2, [r3, #0]
 800863c:	e008      	b.n	8008650 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800863e:	4b0c      	ldr	r3, [pc, #48]	@ (8008670 <prvInsertBlockIntoFreeList+0xb0>)
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	601a      	str	r2, [r3, #0]
 8008646:	e003      	b.n	8008650 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008650:	68fa      	ldr	r2, [r7, #12]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	429a      	cmp	r2, r3
 8008656:	d002      	beq.n	800865e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800865e:	bf00      	nop
 8008660:	3714      	adds	r7, #20
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	20029c38 	.word	0x20029c38
 8008670:	20029c40 	.word	0x20029c40

08008674 <findslot>:
 8008674:	4b0a      	ldr	r3, [pc, #40]	@ (80086a0 <findslot+0x2c>)
 8008676:	b510      	push	{r4, lr}
 8008678:	4604      	mov	r4, r0
 800867a:	6818      	ldr	r0, [r3, #0]
 800867c:	b118      	cbz	r0, 8008686 <findslot+0x12>
 800867e:	6a03      	ldr	r3, [r0, #32]
 8008680:	b90b      	cbnz	r3, 8008686 <findslot+0x12>
 8008682:	f000 fc19 	bl	8008eb8 <__sinit>
 8008686:	2c13      	cmp	r4, #19
 8008688:	d807      	bhi.n	800869a <findslot+0x26>
 800868a:	4806      	ldr	r0, [pc, #24]	@ (80086a4 <findslot+0x30>)
 800868c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8008690:	3201      	adds	r2, #1
 8008692:	d002      	beq.n	800869a <findslot+0x26>
 8008694:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8008698:	bd10      	pop	{r4, pc}
 800869a:	2000      	movs	r0, #0
 800869c:	e7fc      	b.n	8008698 <findslot+0x24>
 800869e:	bf00      	nop
 80086a0:	200000a0 	.word	0x200000a0
 80086a4:	20029c64 	.word	0x20029c64

080086a8 <error>:
 80086a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086aa:	4604      	mov	r4, r0
 80086ac:	f000 fcb2 	bl	8009014 <__errno>
 80086b0:	2613      	movs	r6, #19
 80086b2:	4605      	mov	r5, r0
 80086b4:	2700      	movs	r7, #0
 80086b6:	4630      	mov	r0, r6
 80086b8:	4639      	mov	r1, r7
 80086ba:	beab      	bkpt	0x00ab
 80086bc:	4606      	mov	r6, r0
 80086be:	602e      	str	r6, [r5, #0]
 80086c0:	4620      	mov	r0, r4
 80086c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080086c4 <checkerror>:
 80086c4:	1c43      	adds	r3, r0, #1
 80086c6:	d101      	bne.n	80086cc <checkerror+0x8>
 80086c8:	f7ff bfee 	b.w	80086a8 <error>
 80086cc:	4770      	bx	lr

080086ce <_swiread>:
 80086ce:	b530      	push	{r4, r5, lr}
 80086d0:	b085      	sub	sp, #20
 80086d2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80086d6:	9203      	str	r2, [sp, #12]
 80086d8:	2406      	movs	r4, #6
 80086da:	ad01      	add	r5, sp, #4
 80086dc:	4620      	mov	r0, r4
 80086de:	4629      	mov	r1, r5
 80086e0:	beab      	bkpt	0x00ab
 80086e2:	4604      	mov	r4, r0
 80086e4:	4620      	mov	r0, r4
 80086e6:	f7ff ffed 	bl	80086c4 <checkerror>
 80086ea:	b005      	add	sp, #20
 80086ec:	bd30      	pop	{r4, r5, pc}

080086ee <_read>:
 80086ee:	b570      	push	{r4, r5, r6, lr}
 80086f0:	460e      	mov	r6, r1
 80086f2:	4614      	mov	r4, r2
 80086f4:	f7ff ffbe 	bl	8008674 <findslot>
 80086f8:	4605      	mov	r5, r0
 80086fa:	b930      	cbnz	r0, 800870a <_read+0x1c>
 80086fc:	f000 fc8a 	bl	8009014 <__errno>
 8008700:	2309      	movs	r3, #9
 8008702:	6003      	str	r3, [r0, #0]
 8008704:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008708:	bd70      	pop	{r4, r5, r6, pc}
 800870a:	6800      	ldr	r0, [r0, #0]
 800870c:	4622      	mov	r2, r4
 800870e:	4631      	mov	r1, r6
 8008710:	f7ff ffdd 	bl	80086ce <_swiread>
 8008714:	1c43      	adds	r3, r0, #1
 8008716:	d0f5      	beq.n	8008704 <_read+0x16>
 8008718:	686b      	ldr	r3, [r5, #4]
 800871a:	1a20      	subs	r0, r4, r0
 800871c:	4403      	add	r3, r0
 800871e:	606b      	str	r3, [r5, #4]
 8008720:	e7f2      	b.n	8008708 <_read+0x1a>

08008722 <_swilseek>:
 8008722:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008724:	460c      	mov	r4, r1
 8008726:	4616      	mov	r6, r2
 8008728:	f7ff ffa4 	bl	8008674 <findslot>
 800872c:	4605      	mov	r5, r0
 800872e:	b940      	cbnz	r0, 8008742 <_swilseek+0x20>
 8008730:	f000 fc70 	bl	8009014 <__errno>
 8008734:	2309      	movs	r3, #9
 8008736:	6003      	str	r3, [r0, #0]
 8008738:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800873c:	4620      	mov	r0, r4
 800873e:	b003      	add	sp, #12
 8008740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008742:	2e02      	cmp	r6, #2
 8008744:	d903      	bls.n	800874e <_swilseek+0x2c>
 8008746:	f000 fc65 	bl	8009014 <__errno>
 800874a:	2316      	movs	r3, #22
 800874c:	e7f3      	b.n	8008736 <_swilseek+0x14>
 800874e:	2e01      	cmp	r6, #1
 8008750:	d112      	bne.n	8008778 <_swilseek+0x56>
 8008752:	6843      	ldr	r3, [r0, #4]
 8008754:	18e4      	adds	r4, r4, r3
 8008756:	d4f6      	bmi.n	8008746 <_swilseek+0x24>
 8008758:	682b      	ldr	r3, [r5, #0]
 800875a:	260a      	movs	r6, #10
 800875c:	e9cd 3400 	strd	r3, r4, [sp]
 8008760:	466f      	mov	r7, sp
 8008762:	4630      	mov	r0, r6
 8008764:	4639      	mov	r1, r7
 8008766:	beab      	bkpt	0x00ab
 8008768:	4606      	mov	r6, r0
 800876a:	4630      	mov	r0, r6
 800876c:	f7ff ffaa 	bl	80086c4 <checkerror>
 8008770:	2800      	cmp	r0, #0
 8008772:	dbe1      	blt.n	8008738 <_swilseek+0x16>
 8008774:	606c      	str	r4, [r5, #4]
 8008776:	e7e1      	b.n	800873c <_swilseek+0x1a>
 8008778:	2e02      	cmp	r6, #2
 800877a:	6803      	ldr	r3, [r0, #0]
 800877c:	d1ec      	bne.n	8008758 <_swilseek+0x36>
 800877e:	9300      	str	r3, [sp, #0]
 8008780:	260c      	movs	r6, #12
 8008782:	466f      	mov	r7, sp
 8008784:	4630      	mov	r0, r6
 8008786:	4639      	mov	r1, r7
 8008788:	beab      	bkpt	0x00ab
 800878a:	4606      	mov	r6, r0
 800878c:	4630      	mov	r0, r6
 800878e:	f7ff ff99 	bl	80086c4 <checkerror>
 8008792:	1c43      	adds	r3, r0, #1
 8008794:	d0d0      	beq.n	8008738 <_swilseek+0x16>
 8008796:	4404      	add	r4, r0
 8008798:	e7de      	b.n	8008758 <_swilseek+0x36>

0800879a <_lseek>:
 800879a:	f7ff bfc2 	b.w	8008722 <_swilseek>

0800879e <_swiwrite>:
 800879e:	b530      	push	{r4, r5, lr}
 80087a0:	b085      	sub	sp, #20
 80087a2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80087a6:	9203      	str	r2, [sp, #12]
 80087a8:	2405      	movs	r4, #5
 80087aa:	ad01      	add	r5, sp, #4
 80087ac:	4620      	mov	r0, r4
 80087ae:	4629      	mov	r1, r5
 80087b0:	beab      	bkpt	0x00ab
 80087b2:	4604      	mov	r4, r0
 80087b4:	4620      	mov	r0, r4
 80087b6:	f7ff ff85 	bl	80086c4 <checkerror>
 80087ba:	b005      	add	sp, #20
 80087bc:	bd30      	pop	{r4, r5, pc}

080087be <_write>:
 80087be:	b570      	push	{r4, r5, r6, lr}
 80087c0:	460e      	mov	r6, r1
 80087c2:	4615      	mov	r5, r2
 80087c4:	f7ff ff56 	bl	8008674 <findslot>
 80087c8:	4604      	mov	r4, r0
 80087ca:	b930      	cbnz	r0, 80087da <_write+0x1c>
 80087cc:	f000 fc22 	bl	8009014 <__errno>
 80087d0:	2309      	movs	r3, #9
 80087d2:	6003      	str	r3, [r0, #0]
 80087d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80087d8:	bd70      	pop	{r4, r5, r6, pc}
 80087da:	6800      	ldr	r0, [r0, #0]
 80087dc:	462a      	mov	r2, r5
 80087de:	4631      	mov	r1, r6
 80087e0:	f7ff ffdd 	bl	800879e <_swiwrite>
 80087e4:	1e03      	subs	r3, r0, #0
 80087e6:	dbf5      	blt.n	80087d4 <_write+0x16>
 80087e8:	6862      	ldr	r2, [r4, #4]
 80087ea:	1ae8      	subs	r0, r5, r3
 80087ec:	4402      	add	r2, r0
 80087ee:	42ab      	cmp	r3, r5
 80087f0:	6062      	str	r2, [r4, #4]
 80087f2:	d1f1      	bne.n	80087d8 <_write+0x1a>
 80087f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80087f8:	2000      	movs	r0, #0
 80087fa:	f7ff bf55 	b.w	80086a8 <error>

080087fe <_swiclose>:
 80087fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008800:	2402      	movs	r4, #2
 8008802:	9001      	str	r0, [sp, #4]
 8008804:	ad01      	add	r5, sp, #4
 8008806:	4620      	mov	r0, r4
 8008808:	4629      	mov	r1, r5
 800880a:	beab      	bkpt	0x00ab
 800880c:	4604      	mov	r4, r0
 800880e:	4620      	mov	r0, r4
 8008810:	f7ff ff58 	bl	80086c4 <checkerror>
 8008814:	b003      	add	sp, #12
 8008816:	bd30      	pop	{r4, r5, pc}

08008818 <_close>:
 8008818:	b538      	push	{r3, r4, r5, lr}
 800881a:	4605      	mov	r5, r0
 800881c:	f7ff ff2a 	bl	8008674 <findslot>
 8008820:	4604      	mov	r4, r0
 8008822:	b930      	cbnz	r0, 8008832 <_close+0x1a>
 8008824:	f000 fbf6 	bl	8009014 <__errno>
 8008828:	2309      	movs	r3, #9
 800882a:	6003      	str	r3, [r0, #0]
 800882c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008830:	bd38      	pop	{r3, r4, r5, pc}
 8008832:	3d01      	subs	r5, #1
 8008834:	2d01      	cmp	r5, #1
 8008836:	d809      	bhi.n	800884c <_close+0x34>
 8008838:	4b07      	ldr	r3, [pc, #28]	@ (8008858 <_close+0x40>)
 800883a:	689a      	ldr	r2, [r3, #8]
 800883c:	691b      	ldr	r3, [r3, #16]
 800883e:	429a      	cmp	r2, r3
 8008840:	d104      	bne.n	800884c <_close+0x34>
 8008842:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008846:	6023      	str	r3, [r4, #0]
 8008848:	2000      	movs	r0, #0
 800884a:	e7f1      	b.n	8008830 <_close+0x18>
 800884c:	6820      	ldr	r0, [r4, #0]
 800884e:	f7ff ffd6 	bl	80087fe <_swiclose>
 8008852:	2800      	cmp	r0, #0
 8008854:	d0f5      	beq.n	8008842 <_close+0x2a>
 8008856:	e7eb      	b.n	8008830 <_close+0x18>
 8008858:	20029c64 	.word	0x20029c64

0800885c <_getpid>:
 800885c:	2001      	movs	r0, #1
 800885e:	4770      	bx	lr

08008860 <_swistat>:
 8008860:	b570      	push	{r4, r5, r6, lr}
 8008862:	460c      	mov	r4, r1
 8008864:	f7ff ff06 	bl	8008674 <findslot>
 8008868:	4605      	mov	r5, r0
 800886a:	b930      	cbnz	r0, 800887a <_swistat+0x1a>
 800886c:	f000 fbd2 	bl	8009014 <__errno>
 8008870:	2309      	movs	r3, #9
 8008872:	6003      	str	r3, [r0, #0]
 8008874:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008878:	bd70      	pop	{r4, r5, r6, pc}
 800887a:	6863      	ldr	r3, [r4, #4]
 800887c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008880:	6063      	str	r3, [r4, #4]
 8008882:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008886:	64a3      	str	r3, [r4, #72]	@ 0x48
 8008888:	260c      	movs	r6, #12
 800888a:	4630      	mov	r0, r6
 800888c:	4629      	mov	r1, r5
 800888e:	beab      	bkpt	0x00ab
 8008890:	4605      	mov	r5, r0
 8008892:	4628      	mov	r0, r5
 8008894:	f7ff ff16 	bl	80086c4 <checkerror>
 8008898:	1c43      	adds	r3, r0, #1
 800889a:	d0eb      	beq.n	8008874 <_swistat+0x14>
 800889c:	6120      	str	r0, [r4, #16]
 800889e:	2000      	movs	r0, #0
 80088a0:	e7ea      	b.n	8008878 <_swistat+0x18>

080088a2 <_fstat>:
 80088a2:	460b      	mov	r3, r1
 80088a4:	b510      	push	{r4, lr}
 80088a6:	2100      	movs	r1, #0
 80088a8:	4604      	mov	r4, r0
 80088aa:	2258      	movs	r2, #88	@ 0x58
 80088ac:	4618      	mov	r0, r3
 80088ae:	f000 fba9 	bl	8009004 <memset>
 80088b2:	4601      	mov	r1, r0
 80088b4:	4620      	mov	r0, r4
 80088b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088ba:	f7ff bfd1 	b.w	8008860 <_swistat>

080088be <_stat>:
 80088be:	b538      	push	{r3, r4, r5, lr}
 80088c0:	460d      	mov	r5, r1
 80088c2:	4604      	mov	r4, r0
 80088c4:	2258      	movs	r2, #88	@ 0x58
 80088c6:	2100      	movs	r1, #0
 80088c8:	4628      	mov	r0, r5
 80088ca:	f000 fb9b 	bl	8009004 <memset>
 80088ce:	4620      	mov	r0, r4
 80088d0:	2100      	movs	r1, #0
 80088d2:	f000 f811 	bl	80088f8 <_swiopen>
 80088d6:	1c43      	adds	r3, r0, #1
 80088d8:	4604      	mov	r4, r0
 80088da:	d00b      	beq.n	80088f4 <_stat+0x36>
 80088dc:	686b      	ldr	r3, [r5, #4]
 80088de:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80088e2:	606b      	str	r3, [r5, #4]
 80088e4:	4629      	mov	r1, r5
 80088e6:	f7ff ffbb 	bl	8008860 <_swistat>
 80088ea:	4605      	mov	r5, r0
 80088ec:	4620      	mov	r0, r4
 80088ee:	f7ff ff93 	bl	8008818 <_close>
 80088f2:	462c      	mov	r4, r5
 80088f4:	4620      	mov	r0, r4
 80088f6:	bd38      	pop	{r3, r4, r5, pc}

080088f8 <_swiopen>:
 80088f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088fc:	4f29      	ldr	r7, [pc, #164]	@ (80089a4 <_swiopen+0xac>)
 80088fe:	b096      	sub	sp, #88	@ 0x58
 8008900:	4682      	mov	sl, r0
 8008902:	460e      	mov	r6, r1
 8008904:	2400      	movs	r4, #0
 8008906:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 800890a:	3301      	adds	r3, #1
 800890c:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8008910:	d00c      	beq.n	800892c <_swiopen+0x34>
 8008912:	3401      	adds	r4, #1
 8008914:	2c14      	cmp	r4, #20
 8008916:	d1f6      	bne.n	8008906 <_swiopen+0xe>
 8008918:	f000 fb7c 	bl	8009014 <__errno>
 800891c:	2318      	movs	r3, #24
 800891e:	6003      	str	r3, [r0, #0]
 8008920:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008924:	4620      	mov	r0, r4
 8008926:	b016      	add	sp, #88	@ 0x58
 8008928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800892c:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8008930:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008934:	46e9      	mov	r9, sp
 8008936:	d109      	bne.n	800894c <_swiopen+0x54>
 8008938:	4649      	mov	r1, r9
 800893a:	4650      	mov	r0, sl
 800893c:	f7ff ffbf 	bl	80088be <_stat>
 8008940:	3001      	adds	r0, #1
 8008942:	d003      	beq.n	800894c <_swiopen+0x54>
 8008944:	f000 fb66 	bl	8009014 <__errno>
 8008948:	2311      	movs	r3, #17
 800894a:	e7e8      	b.n	800891e <_swiopen+0x26>
 800894c:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8008950:	f240 6301 	movw	r3, #1537	@ 0x601
 8008954:	07b2      	lsls	r2, r6, #30
 8008956:	bf48      	it	mi
 8008958:	f045 0502 	orrmi.w	r5, r5, #2
 800895c:	421e      	tst	r6, r3
 800895e:	bf18      	it	ne
 8008960:	f045 0504 	orrne.w	r5, r5, #4
 8008964:	0733      	lsls	r3, r6, #28
 8008966:	bf48      	it	mi
 8008968:	f025 0504 	bicmi.w	r5, r5, #4
 800896c:	4650      	mov	r0, sl
 800896e:	bf48      	it	mi
 8008970:	f045 0508 	orrmi.w	r5, r5, #8
 8008974:	f8cd a000 	str.w	sl, [sp]
 8008978:	f7f7 fc3a 	bl	80001f0 <strlen>
 800897c:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8008980:	2501      	movs	r5, #1
 8008982:	4628      	mov	r0, r5
 8008984:	4649      	mov	r1, r9
 8008986:	beab      	bkpt	0x00ab
 8008988:	4605      	mov	r5, r0
 800898a:	2d00      	cmp	r5, #0
 800898c:	db05      	blt.n	800899a <_swiopen+0xa2>
 800898e:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8008992:	4447      	add	r7, r8
 8008994:	2300      	movs	r3, #0
 8008996:	607b      	str	r3, [r7, #4]
 8008998:	e7c4      	b.n	8008924 <_swiopen+0x2c>
 800899a:	4628      	mov	r0, r5
 800899c:	f7ff fe84 	bl	80086a8 <error>
 80089a0:	4604      	mov	r4, r0
 80089a2:	e7bf      	b.n	8008924 <_swiopen+0x2c>
 80089a4:	20029c64 	.word	0x20029c64

080089a8 <_get_semihosting_exts>:
 80089a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80089ac:	4606      	mov	r6, r0
 80089ae:	460f      	mov	r7, r1
 80089b0:	4829      	ldr	r0, [pc, #164]	@ (8008a58 <_get_semihosting_exts+0xb0>)
 80089b2:	2100      	movs	r1, #0
 80089b4:	4615      	mov	r5, r2
 80089b6:	f7ff ff9f 	bl	80088f8 <_swiopen>
 80089ba:	462a      	mov	r2, r5
 80089bc:	4604      	mov	r4, r0
 80089be:	2100      	movs	r1, #0
 80089c0:	4630      	mov	r0, r6
 80089c2:	f000 fb1f 	bl	8009004 <memset>
 80089c6:	1c63      	adds	r3, r4, #1
 80089c8:	d014      	beq.n	80089f4 <_get_semihosting_exts+0x4c>
 80089ca:	4620      	mov	r0, r4
 80089cc:	f7ff fe52 	bl	8008674 <findslot>
 80089d0:	f04f 080c 	mov.w	r8, #12
 80089d4:	4681      	mov	r9, r0
 80089d6:	4640      	mov	r0, r8
 80089d8:	4649      	mov	r1, r9
 80089da:	beab      	bkpt	0x00ab
 80089dc:	4680      	mov	r8, r0
 80089de:	4640      	mov	r0, r8
 80089e0:	f7ff fe70 	bl	80086c4 <checkerror>
 80089e4:	2803      	cmp	r0, #3
 80089e6:	dd02      	ble.n	80089ee <_get_semihosting_exts+0x46>
 80089e8:	1ec3      	subs	r3, r0, #3
 80089ea:	42ab      	cmp	r3, r5
 80089ec:	dc07      	bgt.n	80089fe <_get_semihosting_exts+0x56>
 80089ee:	4620      	mov	r0, r4
 80089f0:	f7ff ff12 	bl	8008818 <_close>
 80089f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80089f8:	b003      	add	sp, #12
 80089fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089fe:	2204      	movs	r2, #4
 8008a00:	eb0d 0102 	add.w	r1, sp, r2
 8008a04:	4620      	mov	r0, r4
 8008a06:	f7ff fe72 	bl	80086ee <_read>
 8008a0a:	2803      	cmp	r0, #3
 8008a0c:	ddef      	ble.n	80089ee <_get_semihosting_exts+0x46>
 8008a0e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008a12:	2b53      	cmp	r3, #83	@ 0x53
 8008a14:	d1eb      	bne.n	80089ee <_get_semihosting_exts+0x46>
 8008a16:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008a1a:	2b48      	cmp	r3, #72	@ 0x48
 8008a1c:	d1e7      	bne.n	80089ee <_get_semihosting_exts+0x46>
 8008a1e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008a22:	2b46      	cmp	r3, #70	@ 0x46
 8008a24:	d1e3      	bne.n	80089ee <_get_semihosting_exts+0x46>
 8008a26:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008a2a:	2b42      	cmp	r3, #66	@ 0x42
 8008a2c:	d1df      	bne.n	80089ee <_get_semihosting_exts+0x46>
 8008a2e:	2201      	movs	r2, #1
 8008a30:	4639      	mov	r1, r7
 8008a32:	4620      	mov	r0, r4
 8008a34:	f7ff fe75 	bl	8008722 <_swilseek>
 8008a38:	2800      	cmp	r0, #0
 8008a3a:	dbd8      	blt.n	80089ee <_get_semihosting_exts+0x46>
 8008a3c:	462a      	mov	r2, r5
 8008a3e:	4631      	mov	r1, r6
 8008a40:	4620      	mov	r0, r4
 8008a42:	f7ff fe54 	bl	80086ee <_read>
 8008a46:	4605      	mov	r5, r0
 8008a48:	4620      	mov	r0, r4
 8008a4a:	f7ff fee5 	bl	8008818 <_close>
 8008a4e:	4628      	mov	r0, r5
 8008a50:	f7ff fe38 	bl	80086c4 <checkerror>
 8008a54:	e7d0      	b.n	80089f8 <_get_semihosting_exts+0x50>
 8008a56:	bf00      	nop
 8008a58:	0800b14c 	.word	0x0800b14c

08008a5c <initialise_semihosting_exts>:
 8008a5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a5e:	4d0a      	ldr	r5, [pc, #40]	@ (8008a88 <initialise_semihosting_exts+0x2c>)
 8008a60:	4c0a      	ldr	r4, [pc, #40]	@ (8008a8c <initialise_semihosting_exts+0x30>)
 8008a62:	2100      	movs	r1, #0
 8008a64:	2201      	movs	r2, #1
 8008a66:	a801      	add	r0, sp, #4
 8008a68:	6029      	str	r1, [r5, #0]
 8008a6a:	6022      	str	r2, [r4, #0]
 8008a6c:	f7ff ff9c 	bl	80089a8 <_get_semihosting_exts>
 8008a70:	2800      	cmp	r0, #0
 8008a72:	dd07      	ble.n	8008a84 <initialise_semihosting_exts+0x28>
 8008a74:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008a78:	f003 0201 	and.w	r2, r3, #1
 8008a7c:	f003 0302 	and.w	r3, r3, #2
 8008a80:	602a      	str	r2, [r5, #0]
 8008a82:	6023      	str	r3, [r4, #0]
 8008a84:	b003      	add	sp, #12
 8008a86:	bd30      	pop	{r4, r5, pc}
 8008a88:	20000090 	.word	0x20000090
 8008a8c:	2000008c 	.word	0x2000008c

08008a90 <_has_ext_stdout_stderr>:
 8008a90:	b510      	push	{r4, lr}
 8008a92:	4c04      	ldr	r4, [pc, #16]	@ (8008aa4 <_has_ext_stdout_stderr+0x14>)
 8008a94:	6823      	ldr	r3, [r4, #0]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	da01      	bge.n	8008a9e <_has_ext_stdout_stderr+0xe>
 8008a9a:	f7ff ffdf 	bl	8008a5c <initialise_semihosting_exts>
 8008a9e:	6820      	ldr	r0, [r4, #0]
 8008aa0:	bd10      	pop	{r4, pc}
 8008aa2:	bf00      	nop
 8008aa4:	2000008c 	.word	0x2000008c

08008aa8 <initialise_monitor_handles>:
 8008aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aac:	b085      	sub	sp, #20
 8008aae:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8008b60 <initialise_monitor_handles+0xb8>
 8008ab2:	f8cd 9004 	str.w	r9, [sp, #4]
 8008ab6:	2303      	movs	r3, #3
 8008ab8:	2400      	movs	r4, #0
 8008aba:	9303      	str	r3, [sp, #12]
 8008abc:	af01      	add	r7, sp, #4
 8008abe:	9402      	str	r4, [sp, #8]
 8008ac0:	2501      	movs	r5, #1
 8008ac2:	4628      	mov	r0, r5
 8008ac4:	4639      	mov	r1, r7
 8008ac6:	beab      	bkpt	0x00ab
 8008ac8:	4605      	mov	r5, r0
 8008aca:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8008b64 <initialise_monitor_handles+0xbc>
 8008ace:	4623      	mov	r3, r4
 8008ad0:	4c20      	ldr	r4, [pc, #128]	@ (8008b54 <initialise_monitor_handles+0xac>)
 8008ad2:	f8c8 5000 	str.w	r5, [r8]
 8008ad6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008ada:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	2b14      	cmp	r3, #20
 8008ae2:	d1fa      	bne.n	8008ada <initialise_monitor_handles+0x32>
 8008ae4:	f7ff ffd4 	bl	8008a90 <_has_ext_stdout_stderr>
 8008ae8:	4d1b      	ldr	r5, [pc, #108]	@ (8008b58 <initialise_monitor_handles+0xb0>)
 8008aea:	b1d0      	cbz	r0, 8008b22 <initialise_monitor_handles+0x7a>
 8008aec:	f04f 0a03 	mov.w	sl, #3
 8008af0:	2304      	movs	r3, #4
 8008af2:	f8cd 9004 	str.w	r9, [sp, #4]
 8008af6:	2601      	movs	r6, #1
 8008af8:	f8cd a00c 	str.w	sl, [sp, #12]
 8008afc:	9302      	str	r3, [sp, #8]
 8008afe:	4630      	mov	r0, r6
 8008b00:	4639      	mov	r1, r7
 8008b02:	beab      	bkpt	0x00ab
 8008b04:	4683      	mov	fp, r0
 8008b06:	4b15      	ldr	r3, [pc, #84]	@ (8008b5c <initialise_monitor_handles+0xb4>)
 8008b08:	f8cd 9004 	str.w	r9, [sp, #4]
 8008b0c:	f8c3 b000 	str.w	fp, [r3]
 8008b10:	2308      	movs	r3, #8
 8008b12:	f8cd a00c 	str.w	sl, [sp, #12]
 8008b16:	9302      	str	r3, [sp, #8]
 8008b18:	4630      	mov	r0, r6
 8008b1a:	4639      	mov	r1, r7
 8008b1c:	beab      	bkpt	0x00ab
 8008b1e:	4606      	mov	r6, r0
 8008b20:	602e      	str	r6, [r5, #0]
 8008b22:	682b      	ldr	r3, [r5, #0]
 8008b24:	3301      	adds	r3, #1
 8008b26:	bf02      	ittt	eq
 8008b28:	4b0c      	ldreq	r3, [pc, #48]	@ (8008b5c <initialise_monitor_handles+0xb4>)
 8008b2a:	681b      	ldreq	r3, [r3, #0]
 8008b2c:	602b      	streq	r3, [r5, #0]
 8008b2e:	2600      	movs	r6, #0
 8008b30:	f8d8 3000 	ldr.w	r3, [r8]
 8008b34:	6023      	str	r3, [r4, #0]
 8008b36:	6066      	str	r6, [r4, #4]
 8008b38:	f7ff ffaa 	bl	8008a90 <_has_ext_stdout_stderr>
 8008b3c:	b130      	cbz	r0, 8008b4c <initialise_monitor_handles+0xa4>
 8008b3e:	4b07      	ldr	r3, [pc, #28]	@ (8008b5c <initialise_monitor_handles+0xb4>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8008b46:	682b      	ldr	r3, [r5, #0]
 8008b48:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8008b4c:	b005      	add	sp, #20
 8008b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b52:	bf00      	nop
 8008b54:	20029c64 	.word	0x20029c64
 8008b58:	20029c58 	.word	0x20029c58
 8008b5c:	20029c5c 	.word	0x20029c5c
 8008b60:	0800b162 	.word	0x0800b162
 8008b64:	20029c60 	.word	0x20029c60

08008b68 <_isatty>:
 8008b68:	b570      	push	{r4, r5, r6, lr}
 8008b6a:	f7ff fd83 	bl	8008674 <findslot>
 8008b6e:	2409      	movs	r4, #9
 8008b70:	4605      	mov	r5, r0
 8008b72:	b920      	cbnz	r0, 8008b7e <_isatty+0x16>
 8008b74:	f000 fa4e 	bl	8009014 <__errno>
 8008b78:	6004      	str	r4, [r0, #0]
 8008b7a:	2000      	movs	r0, #0
 8008b7c:	bd70      	pop	{r4, r5, r6, pc}
 8008b7e:	4620      	mov	r0, r4
 8008b80:	4629      	mov	r1, r5
 8008b82:	beab      	bkpt	0x00ab
 8008b84:	4604      	mov	r4, r0
 8008b86:	2c01      	cmp	r4, #1
 8008b88:	4620      	mov	r0, r4
 8008b8a:	d0f7      	beq.n	8008b7c <_isatty+0x14>
 8008b8c:	f000 fa42 	bl	8009014 <__errno>
 8008b90:	2513      	movs	r5, #19
 8008b92:	4604      	mov	r4, r0
 8008b94:	2600      	movs	r6, #0
 8008b96:	4628      	mov	r0, r5
 8008b98:	4631      	mov	r1, r6
 8008b9a:	beab      	bkpt	0x00ab
 8008b9c:	4605      	mov	r5, r0
 8008b9e:	6025      	str	r5, [r4, #0]
 8008ba0:	e7eb      	b.n	8008b7a <_isatty+0x12>
	...

08008ba4 <__sflush_r>:
 8008ba4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bac:	0716      	lsls	r6, r2, #28
 8008bae:	4605      	mov	r5, r0
 8008bb0:	460c      	mov	r4, r1
 8008bb2:	d454      	bmi.n	8008c5e <__sflush_r+0xba>
 8008bb4:	684b      	ldr	r3, [r1, #4]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	dc02      	bgt.n	8008bc0 <__sflush_r+0x1c>
 8008bba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	dd48      	ble.n	8008c52 <__sflush_r+0xae>
 8008bc0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008bc2:	2e00      	cmp	r6, #0
 8008bc4:	d045      	beq.n	8008c52 <__sflush_r+0xae>
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008bcc:	682f      	ldr	r7, [r5, #0]
 8008bce:	6a21      	ldr	r1, [r4, #32]
 8008bd0:	602b      	str	r3, [r5, #0]
 8008bd2:	d030      	beq.n	8008c36 <__sflush_r+0x92>
 8008bd4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008bd6:	89a3      	ldrh	r3, [r4, #12]
 8008bd8:	0759      	lsls	r1, r3, #29
 8008bda:	d505      	bpl.n	8008be8 <__sflush_r+0x44>
 8008bdc:	6863      	ldr	r3, [r4, #4]
 8008bde:	1ad2      	subs	r2, r2, r3
 8008be0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008be2:	b10b      	cbz	r3, 8008be8 <__sflush_r+0x44>
 8008be4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008be6:	1ad2      	subs	r2, r2, r3
 8008be8:	2300      	movs	r3, #0
 8008bea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008bec:	6a21      	ldr	r1, [r4, #32]
 8008bee:	4628      	mov	r0, r5
 8008bf0:	47b0      	blx	r6
 8008bf2:	1c43      	adds	r3, r0, #1
 8008bf4:	89a3      	ldrh	r3, [r4, #12]
 8008bf6:	d106      	bne.n	8008c06 <__sflush_r+0x62>
 8008bf8:	6829      	ldr	r1, [r5, #0]
 8008bfa:	291d      	cmp	r1, #29
 8008bfc:	d82b      	bhi.n	8008c56 <__sflush_r+0xb2>
 8008bfe:	4a2a      	ldr	r2, [pc, #168]	@ (8008ca8 <__sflush_r+0x104>)
 8008c00:	410a      	asrs	r2, r1
 8008c02:	07d6      	lsls	r6, r2, #31
 8008c04:	d427      	bmi.n	8008c56 <__sflush_r+0xb2>
 8008c06:	2200      	movs	r2, #0
 8008c08:	6062      	str	r2, [r4, #4]
 8008c0a:	04d9      	lsls	r1, r3, #19
 8008c0c:	6922      	ldr	r2, [r4, #16]
 8008c0e:	6022      	str	r2, [r4, #0]
 8008c10:	d504      	bpl.n	8008c1c <__sflush_r+0x78>
 8008c12:	1c42      	adds	r2, r0, #1
 8008c14:	d101      	bne.n	8008c1a <__sflush_r+0x76>
 8008c16:	682b      	ldr	r3, [r5, #0]
 8008c18:	b903      	cbnz	r3, 8008c1c <__sflush_r+0x78>
 8008c1a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008c1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c1e:	602f      	str	r7, [r5, #0]
 8008c20:	b1b9      	cbz	r1, 8008c52 <__sflush_r+0xae>
 8008c22:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c26:	4299      	cmp	r1, r3
 8008c28:	d002      	beq.n	8008c30 <__sflush_r+0x8c>
 8008c2a:	4628      	mov	r0, r5
 8008c2c:	f000 fa3e 	bl	80090ac <_free_r>
 8008c30:	2300      	movs	r3, #0
 8008c32:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c34:	e00d      	b.n	8008c52 <__sflush_r+0xae>
 8008c36:	2301      	movs	r3, #1
 8008c38:	4628      	mov	r0, r5
 8008c3a:	47b0      	blx	r6
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	1c50      	adds	r0, r2, #1
 8008c40:	d1c9      	bne.n	8008bd6 <__sflush_r+0x32>
 8008c42:	682b      	ldr	r3, [r5, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d0c6      	beq.n	8008bd6 <__sflush_r+0x32>
 8008c48:	2b1d      	cmp	r3, #29
 8008c4a:	d001      	beq.n	8008c50 <__sflush_r+0xac>
 8008c4c:	2b16      	cmp	r3, #22
 8008c4e:	d11e      	bne.n	8008c8e <__sflush_r+0xea>
 8008c50:	602f      	str	r7, [r5, #0]
 8008c52:	2000      	movs	r0, #0
 8008c54:	e022      	b.n	8008c9c <__sflush_r+0xf8>
 8008c56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c5a:	b21b      	sxth	r3, r3
 8008c5c:	e01b      	b.n	8008c96 <__sflush_r+0xf2>
 8008c5e:	690f      	ldr	r7, [r1, #16]
 8008c60:	2f00      	cmp	r7, #0
 8008c62:	d0f6      	beq.n	8008c52 <__sflush_r+0xae>
 8008c64:	0793      	lsls	r3, r2, #30
 8008c66:	680e      	ldr	r6, [r1, #0]
 8008c68:	bf08      	it	eq
 8008c6a:	694b      	ldreq	r3, [r1, #20]
 8008c6c:	600f      	str	r7, [r1, #0]
 8008c6e:	bf18      	it	ne
 8008c70:	2300      	movne	r3, #0
 8008c72:	eba6 0807 	sub.w	r8, r6, r7
 8008c76:	608b      	str	r3, [r1, #8]
 8008c78:	f1b8 0f00 	cmp.w	r8, #0
 8008c7c:	dde9      	ble.n	8008c52 <__sflush_r+0xae>
 8008c7e:	6a21      	ldr	r1, [r4, #32]
 8008c80:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008c82:	4643      	mov	r3, r8
 8008c84:	463a      	mov	r2, r7
 8008c86:	4628      	mov	r0, r5
 8008c88:	47b0      	blx	r6
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	dc08      	bgt.n	8008ca0 <__sflush_r+0xfc>
 8008c8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c96:	81a3      	strh	r3, [r4, #12]
 8008c98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ca0:	4407      	add	r7, r0
 8008ca2:	eba8 0800 	sub.w	r8, r8, r0
 8008ca6:	e7e7      	b.n	8008c78 <__sflush_r+0xd4>
 8008ca8:	dfbffffe 	.word	0xdfbffffe

08008cac <_fflush_r>:
 8008cac:	b538      	push	{r3, r4, r5, lr}
 8008cae:	690b      	ldr	r3, [r1, #16]
 8008cb0:	4605      	mov	r5, r0
 8008cb2:	460c      	mov	r4, r1
 8008cb4:	b913      	cbnz	r3, 8008cbc <_fflush_r+0x10>
 8008cb6:	2500      	movs	r5, #0
 8008cb8:	4628      	mov	r0, r5
 8008cba:	bd38      	pop	{r3, r4, r5, pc}
 8008cbc:	b118      	cbz	r0, 8008cc6 <_fflush_r+0x1a>
 8008cbe:	6a03      	ldr	r3, [r0, #32]
 8008cc0:	b90b      	cbnz	r3, 8008cc6 <_fflush_r+0x1a>
 8008cc2:	f000 f8f9 	bl	8008eb8 <__sinit>
 8008cc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d0f3      	beq.n	8008cb6 <_fflush_r+0xa>
 8008cce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008cd0:	07d0      	lsls	r0, r2, #31
 8008cd2:	d404      	bmi.n	8008cde <_fflush_r+0x32>
 8008cd4:	0599      	lsls	r1, r3, #22
 8008cd6:	d402      	bmi.n	8008cde <_fflush_r+0x32>
 8008cd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008cda:	f000 f9c6 	bl	800906a <__retarget_lock_acquire_recursive>
 8008cde:	4628      	mov	r0, r5
 8008ce0:	4621      	mov	r1, r4
 8008ce2:	f7ff ff5f 	bl	8008ba4 <__sflush_r>
 8008ce6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ce8:	07da      	lsls	r2, r3, #31
 8008cea:	4605      	mov	r5, r0
 8008cec:	d4e4      	bmi.n	8008cb8 <_fflush_r+0xc>
 8008cee:	89a3      	ldrh	r3, [r4, #12]
 8008cf0:	059b      	lsls	r3, r3, #22
 8008cf2:	d4e1      	bmi.n	8008cb8 <_fflush_r+0xc>
 8008cf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008cf6:	f000 f9b9 	bl	800906c <__retarget_lock_release_recursive>
 8008cfa:	e7dd      	b.n	8008cb8 <_fflush_r+0xc>

08008cfc <fflush>:
 8008cfc:	4601      	mov	r1, r0
 8008cfe:	b920      	cbnz	r0, 8008d0a <fflush+0xe>
 8008d00:	4a04      	ldr	r2, [pc, #16]	@ (8008d14 <fflush+0x18>)
 8008d02:	4905      	ldr	r1, [pc, #20]	@ (8008d18 <fflush+0x1c>)
 8008d04:	4805      	ldr	r0, [pc, #20]	@ (8008d1c <fflush+0x20>)
 8008d06:	f000 b8ef 	b.w	8008ee8 <_fwalk_sglue>
 8008d0a:	4b05      	ldr	r3, [pc, #20]	@ (8008d20 <fflush+0x24>)
 8008d0c:	6818      	ldr	r0, [r3, #0]
 8008d0e:	f7ff bfcd 	b.w	8008cac <_fflush_r>
 8008d12:	bf00      	nop
 8008d14:	20000094 	.word	0x20000094
 8008d18:	08008cad 	.word	0x08008cad
 8008d1c:	200000a4 	.word	0x200000a4
 8008d20:	200000a0 	.word	0x200000a0

08008d24 <rand>:
 8008d24:	4b16      	ldr	r3, [pc, #88]	@ (8008d80 <rand+0x5c>)
 8008d26:	b510      	push	{r4, lr}
 8008d28:	681c      	ldr	r4, [r3, #0]
 8008d2a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008d2c:	b9b3      	cbnz	r3, 8008d5c <rand+0x38>
 8008d2e:	2018      	movs	r0, #24
 8008d30:	f000 fb48 	bl	80093c4 <malloc>
 8008d34:	4602      	mov	r2, r0
 8008d36:	6320      	str	r0, [r4, #48]	@ 0x30
 8008d38:	b920      	cbnz	r0, 8008d44 <rand+0x20>
 8008d3a:	4b12      	ldr	r3, [pc, #72]	@ (8008d84 <rand+0x60>)
 8008d3c:	4812      	ldr	r0, [pc, #72]	@ (8008d88 <rand+0x64>)
 8008d3e:	2152      	movs	r1, #82	@ 0x52
 8008d40:	f000 f996 	bl	8009070 <__assert_func>
 8008d44:	4911      	ldr	r1, [pc, #68]	@ (8008d8c <rand+0x68>)
 8008d46:	4b12      	ldr	r3, [pc, #72]	@ (8008d90 <rand+0x6c>)
 8008d48:	e9c0 1300 	strd	r1, r3, [r0]
 8008d4c:	4b11      	ldr	r3, [pc, #68]	@ (8008d94 <rand+0x70>)
 8008d4e:	6083      	str	r3, [r0, #8]
 8008d50:	230b      	movs	r3, #11
 8008d52:	8183      	strh	r3, [r0, #12]
 8008d54:	2100      	movs	r1, #0
 8008d56:	2001      	movs	r0, #1
 8008d58:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008d5c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008d5e:	480e      	ldr	r0, [pc, #56]	@ (8008d98 <rand+0x74>)
 8008d60:	690b      	ldr	r3, [r1, #16]
 8008d62:	694c      	ldr	r4, [r1, #20]
 8008d64:	4a0d      	ldr	r2, [pc, #52]	@ (8008d9c <rand+0x78>)
 8008d66:	4358      	muls	r0, r3
 8008d68:	fb02 0004 	mla	r0, r2, r4, r0
 8008d6c:	fba3 3202 	umull	r3, r2, r3, r2
 8008d70:	3301      	adds	r3, #1
 8008d72:	eb40 0002 	adc.w	r0, r0, r2
 8008d76:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8008d7a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8008d7e:	bd10      	pop	{r4, pc}
 8008d80:	200000a0 	.word	0x200000a0
 8008d84:	0800b166 	.word	0x0800b166
 8008d88:	0800b17d 	.word	0x0800b17d
 8008d8c:	abcd330e 	.word	0xabcd330e
 8008d90:	e66d1234 	.word	0xe66d1234
 8008d94:	0005deec 	.word	0x0005deec
 8008d98:	5851f42d 	.word	0x5851f42d
 8008d9c:	4c957f2d 	.word	0x4c957f2d

08008da0 <std>:
 8008da0:	2300      	movs	r3, #0
 8008da2:	b510      	push	{r4, lr}
 8008da4:	4604      	mov	r4, r0
 8008da6:	e9c0 3300 	strd	r3, r3, [r0]
 8008daa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008dae:	6083      	str	r3, [r0, #8]
 8008db0:	8181      	strh	r1, [r0, #12]
 8008db2:	6643      	str	r3, [r0, #100]	@ 0x64
 8008db4:	81c2      	strh	r2, [r0, #14]
 8008db6:	6183      	str	r3, [r0, #24]
 8008db8:	4619      	mov	r1, r3
 8008dba:	2208      	movs	r2, #8
 8008dbc:	305c      	adds	r0, #92	@ 0x5c
 8008dbe:	f000 f921 	bl	8009004 <memset>
 8008dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8008df8 <std+0x58>)
 8008dc4:	6263      	str	r3, [r4, #36]	@ 0x24
 8008dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8008dfc <std+0x5c>)
 8008dc8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008dca:	4b0d      	ldr	r3, [pc, #52]	@ (8008e00 <std+0x60>)
 8008dcc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008dce:	4b0d      	ldr	r3, [pc, #52]	@ (8008e04 <std+0x64>)
 8008dd0:	6323      	str	r3, [r4, #48]	@ 0x30
 8008dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8008e08 <std+0x68>)
 8008dd4:	6224      	str	r4, [r4, #32]
 8008dd6:	429c      	cmp	r4, r3
 8008dd8:	d006      	beq.n	8008de8 <std+0x48>
 8008dda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008dde:	4294      	cmp	r4, r2
 8008de0:	d002      	beq.n	8008de8 <std+0x48>
 8008de2:	33d0      	adds	r3, #208	@ 0xd0
 8008de4:	429c      	cmp	r4, r3
 8008de6:	d105      	bne.n	8008df4 <std+0x54>
 8008de8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008df0:	f000 b93a 	b.w	8009068 <__retarget_lock_init_recursive>
 8008df4:	bd10      	pop	{r4, pc}
 8008df6:	bf00      	nop
 8008df8:	0800984d 	.word	0x0800984d
 8008dfc:	0800986f 	.word	0x0800986f
 8008e00:	080098a7 	.word	0x080098a7
 8008e04:	080098cb 	.word	0x080098cb
 8008e08:	20029d04 	.word	0x20029d04

08008e0c <stdio_exit_handler>:
 8008e0c:	4a02      	ldr	r2, [pc, #8]	@ (8008e18 <stdio_exit_handler+0xc>)
 8008e0e:	4903      	ldr	r1, [pc, #12]	@ (8008e1c <stdio_exit_handler+0x10>)
 8008e10:	4803      	ldr	r0, [pc, #12]	@ (8008e20 <stdio_exit_handler+0x14>)
 8008e12:	f000 b869 	b.w	8008ee8 <_fwalk_sglue>
 8008e16:	bf00      	nop
 8008e18:	20000094 	.word	0x20000094
 8008e1c:	08008cad 	.word	0x08008cad
 8008e20:	200000a4 	.word	0x200000a4

08008e24 <cleanup_stdio>:
 8008e24:	6841      	ldr	r1, [r0, #4]
 8008e26:	4b0c      	ldr	r3, [pc, #48]	@ (8008e58 <cleanup_stdio+0x34>)
 8008e28:	4299      	cmp	r1, r3
 8008e2a:	b510      	push	{r4, lr}
 8008e2c:	4604      	mov	r4, r0
 8008e2e:	d001      	beq.n	8008e34 <cleanup_stdio+0x10>
 8008e30:	f7ff ff3c 	bl	8008cac <_fflush_r>
 8008e34:	68a1      	ldr	r1, [r4, #8]
 8008e36:	4b09      	ldr	r3, [pc, #36]	@ (8008e5c <cleanup_stdio+0x38>)
 8008e38:	4299      	cmp	r1, r3
 8008e3a:	d002      	beq.n	8008e42 <cleanup_stdio+0x1e>
 8008e3c:	4620      	mov	r0, r4
 8008e3e:	f7ff ff35 	bl	8008cac <_fflush_r>
 8008e42:	68e1      	ldr	r1, [r4, #12]
 8008e44:	4b06      	ldr	r3, [pc, #24]	@ (8008e60 <cleanup_stdio+0x3c>)
 8008e46:	4299      	cmp	r1, r3
 8008e48:	d004      	beq.n	8008e54 <cleanup_stdio+0x30>
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e50:	f7ff bf2c 	b.w	8008cac <_fflush_r>
 8008e54:	bd10      	pop	{r4, pc}
 8008e56:	bf00      	nop
 8008e58:	20029d04 	.word	0x20029d04
 8008e5c:	20029d6c 	.word	0x20029d6c
 8008e60:	20029dd4 	.word	0x20029dd4

08008e64 <global_stdio_init.part.0>:
 8008e64:	b510      	push	{r4, lr}
 8008e66:	4b0b      	ldr	r3, [pc, #44]	@ (8008e94 <global_stdio_init.part.0+0x30>)
 8008e68:	4c0b      	ldr	r4, [pc, #44]	@ (8008e98 <global_stdio_init.part.0+0x34>)
 8008e6a:	4a0c      	ldr	r2, [pc, #48]	@ (8008e9c <global_stdio_init.part.0+0x38>)
 8008e6c:	601a      	str	r2, [r3, #0]
 8008e6e:	4620      	mov	r0, r4
 8008e70:	2200      	movs	r2, #0
 8008e72:	2104      	movs	r1, #4
 8008e74:	f7ff ff94 	bl	8008da0 <std>
 8008e78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	2109      	movs	r1, #9
 8008e80:	f7ff ff8e 	bl	8008da0 <std>
 8008e84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008e88:	2202      	movs	r2, #2
 8008e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e8e:	2112      	movs	r1, #18
 8008e90:	f7ff bf86 	b.w	8008da0 <std>
 8008e94:	20029e3c 	.word	0x20029e3c
 8008e98:	20029d04 	.word	0x20029d04
 8008e9c:	08008e0d 	.word	0x08008e0d

08008ea0 <__sfp_lock_acquire>:
 8008ea0:	4801      	ldr	r0, [pc, #4]	@ (8008ea8 <__sfp_lock_acquire+0x8>)
 8008ea2:	f000 b8e2 	b.w	800906a <__retarget_lock_acquire_recursive>
 8008ea6:	bf00      	nop
 8008ea8:	20029e41 	.word	0x20029e41

08008eac <__sfp_lock_release>:
 8008eac:	4801      	ldr	r0, [pc, #4]	@ (8008eb4 <__sfp_lock_release+0x8>)
 8008eae:	f000 b8dd 	b.w	800906c <__retarget_lock_release_recursive>
 8008eb2:	bf00      	nop
 8008eb4:	20029e41 	.word	0x20029e41

08008eb8 <__sinit>:
 8008eb8:	b510      	push	{r4, lr}
 8008eba:	4604      	mov	r4, r0
 8008ebc:	f7ff fff0 	bl	8008ea0 <__sfp_lock_acquire>
 8008ec0:	6a23      	ldr	r3, [r4, #32]
 8008ec2:	b11b      	cbz	r3, 8008ecc <__sinit+0x14>
 8008ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ec8:	f7ff bff0 	b.w	8008eac <__sfp_lock_release>
 8008ecc:	4b04      	ldr	r3, [pc, #16]	@ (8008ee0 <__sinit+0x28>)
 8008ece:	6223      	str	r3, [r4, #32]
 8008ed0:	4b04      	ldr	r3, [pc, #16]	@ (8008ee4 <__sinit+0x2c>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d1f5      	bne.n	8008ec4 <__sinit+0xc>
 8008ed8:	f7ff ffc4 	bl	8008e64 <global_stdio_init.part.0>
 8008edc:	e7f2      	b.n	8008ec4 <__sinit+0xc>
 8008ede:	bf00      	nop
 8008ee0:	08008e25 	.word	0x08008e25
 8008ee4:	20029e3c 	.word	0x20029e3c

08008ee8 <_fwalk_sglue>:
 8008ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008eec:	4607      	mov	r7, r0
 8008eee:	4688      	mov	r8, r1
 8008ef0:	4614      	mov	r4, r2
 8008ef2:	2600      	movs	r6, #0
 8008ef4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ef8:	f1b9 0901 	subs.w	r9, r9, #1
 8008efc:	d505      	bpl.n	8008f0a <_fwalk_sglue+0x22>
 8008efe:	6824      	ldr	r4, [r4, #0]
 8008f00:	2c00      	cmp	r4, #0
 8008f02:	d1f7      	bne.n	8008ef4 <_fwalk_sglue+0xc>
 8008f04:	4630      	mov	r0, r6
 8008f06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f0a:	89ab      	ldrh	r3, [r5, #12]
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d907      	bls.n	8008f20 <_fwalk_sglue+0x38>
 8008f10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f14:	3301      	adds	r3, #1
 8008f16:	d003      	beq.n	8008f20 <_fwalk_sglue+0x38>
 8008f18:	4629      	mov	r1, r5
 8008f1a:	4638      	mov	r0, r7
 8008f1c:	47c0      	blx	r8
 8008f1e:	4306      	orrs	r6, r0
 8008f20:	3568      	adds	r5, #104	@ 0x68
 8008f22:	e7e9      	b.n	8008ef8 <_fwalk_sglue+0x10>

08008f24 <iprintf>:
 8008f24:	b40f      	push	{r0, r1, r2, r3}
 8008f26:	b507      	push	{r0, r1, r2, lr}
 8008f28:	4906      	ldr	r1, [pc, #24]	@ (8008f44 <iprintf+0x20>)
 8008f2a:	ab04      	add	r3, sp, #16
 8008f2c:	6808      	ldr	r0, [r1, #0]
 8008f2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f32:	6881      	ldr	r1, [r0, #8]
 8008f34:	9301      	str	r3, [sp, #4]
 8008f36:	f000 f92d 	bl	8009194 <_vfiprintf_r>
 8008f3a:	b003      	add	sp, #12
 8008f3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f40:	b004      	add	sp, #16
 8008f42:	4770      	bx	lr
 8008f44:	200000a0 	.word	0x200000a0

08008f48 <_puts_r>:
 8008f48:	6a03      	ldr	r3, [r0, #32]
 8008f4a:	b570      	push	{r4, r5, r6, lr}
 8008f4c:	6884      	ldr	r4, [r0, #8]
 8008f4e:	4605      	mov	r5, r0
 8008f50:	460e      	mov	r6, r1
 8008f52:	b90b      	cbnz	r3, 8008f58 <_puts_r+0x10>
 8008f54:	f7ff ffb0 	bl	8008eb8 <__sinit>
 8008f58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f5a:	07db      	lsls	r3, r3, #31
 8008f5c:	d405      	bmi.n	8008f6a <_puts_r+0x22>
 8008f5e:	89a3      	ldrh	r3, [r4, #12]
 8008f60:	0598      	lsls	r0, r3, #22
 8008f62:	d402      	bmi.n	8008f6a <_puts_r+0x22>
 8008f64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f66:	f000 f880 	bl	800906a <__retarget_lock_acquire_recursive>
 8008f6a:	89a3      	ldrh	r3, [r4, #12]
 8008f6c:	0719      	lsls	r1, r3, #28
 8008f6e:	d502      	bpl.n	8008f76 <_puts_r+0x2e>
 8008f70:	6923      	ldr	r3, [r4, #16]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d135      	bne.n	8008fe2 <_puts_r+0x9a>
 8008f76:	4621      	mov	r1, r4
 8008f78:	4628      	mov	r0, r5
 8008f7a:	f000 fcfb 	bl	8009974 <__swsetup_r>
 8008f7e:	b380      	cbz	r0, 8008fe2 <_puts_r+0x9a>
 8008f80:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008f84:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f86:	07da      	lsls	r2, r3, #31
 8008f88:	d405      	bmi.n	8008f96 <_puts_r+0x4e>
 8008f8a:	89a3      	ldrh	r3, [r4, #12]
 8008f8c:	059b      	lsls	r3, r3, #22
 8008f8e:	d402      	bmi.n	8008f96 <_puts_r+0x4e>
 8008f90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f92:	f000 f86b 	bl	800906c <__retarget_lock_release_recursive>
 8008f96:	4628      	mov	r0, r5
 8008f98:	bd70      	pop	{r4, r5, r6, pc}
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	da04      	bge.n	8008fa8 <_puts_r+0x60>
 8008f9e:	69a2      	ldr	r2, [r4, #24]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	dc17      	bgt.n	8008fd4 <_puts_r+0x8c>
 8008fa4:	290a      	cmp	r1, #10
 8008fa6:	d015      	beq.n	8008fd4 <_puts_r+0x8c>
 8008fa8:	6823      	ldr	r3, [r4, #0]
 8008faa:	1c5a      	adds	r2, r3, #1
 8008fac:	6022      	str	r2, [r4, #0]
 8008fae:	7019      	strb	r1, [r3, #0]
 8008fb0:	68a3      	ldr	r3, [r4, #8]
 8008fb2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	60a3      	str	r3, [r4, #8]
 8008fba:	2900      	cmp	r1, #0
 8008fbc:	d1ed      	bne.n	8008f9a <_puts_r+0x52>
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	da11      	bge.n	8008fe6 <_puts_r+0x9e>
 8008fc2:	4622      	mov	r2, r4
 8008fc4:	210a      	movs	r1, #10
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	f000 fc96 	bl	80098f8 <__swbuf_r>
 8008fcc:	3001      	adds	r0, #1
 8008fce:	d0d7      	beq.n	8008f80 <_puts_r+0x38>
 8008fd0:	250a      	movs	r5, #10
 8008fd2:	e7d7      	b.n	8008f84 <_puts_r+0x3c>
 8008fd4:	4622      	mov	r2, r4
 8008fd6:	4628      	mov	r0, r5
 8008fd8:	f000 fc8e 	bl	80098f8 <__swbuf_r>
 8008fdc:	3001      	adds	r0, #1
 8008fde:	d1e7      	bne.n	8008fb0 <_puts_r+0x68>
 8008fe0:	e7ce      	b.n	8008f80 <_puts_r+0x38>
 8008fe2:	3e01      	subs	r6, #1
 8008fe4:	e7e4      	b.n	8008fb0 <_puts_r+0x68>
 8008fe6:	6823      	ldr	r3, [r4, #0]
 8008fe8:	1c5a      	adds	r2, r3, #1
 8008fea:	6022      	str	r2, [r4, #0]
 8008fec:	220a      	movs	r2, #10
 8008fee:	701a      	strb	r2, [r3, #0]
 8008ff0:	e7ee      	b.n	8008fd0 <_puts_r+0x88>
	...

08008ff4 <puts>:
 8008ff4:	4b02      	ldr	r3, [pc, #8]	@ (8009000 <puts+0xc>)
 8008ff6:	4601      	mov	r1, r0
 8008ff8:	6818      	ldr	r0, [r3, #0]
 8008ffa:	f7ff bfa5 	b.w	8008f48 <_puts_r>
 8008ffe:	bf00      	nop
 8009000:	200000a0 	.word	0x200000a0

08009004 <memset>:
 8009004:	4402      	add	r2, r0
 8009006:	4603      	mov	r3, r0
 8009008:	4293      	cmp	r3, r2
 800900a:	d100      	bne.n	800900e <memset+0xa>
 800900c:	4770      	bx	lr
 800900e:	f803 1b01 	strb.w	r1, [r3], #1
 8009012:	e7f9      	b.n	8009008 <memset+0x4>

08009014 <__errno>:
 8009014:	4b01      	ldr	r3, [pc, #4]	@ (800901c <__errno+0x8>)
 8009016:	6818      	ldr	r0, [r3, #0]
 8009018:	4770      	bx	lr
 800901a:	bf00      	nop
 800901c:	200000a0 	.word	0x200000a0

08009020 <__libc_init_array>:
 8009020:	b570      	push	{r4, r5, r6, lr}
 8009022:	4d0d      	ldr	r5, [pc, #52]	@ (8009058 <__libc_init_array+0x38>)
 8009024:	4c0d      	ldr	r4, [pc, #52]	@ (800905c <__libc_init_array+0x3c>)
 8009026:	1b64      	subs	r4, r4, r5
 8009028:	10a4      	asrs	r4, r4, #2
 800902a:	2600      	movs	r6, #0
 800902c:	42a6      	cmp	r6, r4
 800902e:	d109      	bne.n	8009044 <__libc_init_array+0x24>
 8009030:	4d0b      	ldr	r5, [pc, #44]	@ (8009060 <__libc_init_array+0x40>)
 8009032:	4c0c      	ldr	r4, [pc, #48]	@ (8009064 <__libc_init_array+0x44>)
 8009034:	f000 fe24 	bl	8009c80 <_init>
 8009038:	1b64      	subs	r4, r4, r5
 800903a:	10a4      	asrs	r4, r4, #2
 800903c:	2600      	movs	r6, #0
 800903e:	42a6      	cmp	r6, r4
 8009040:	d105      	bne.n	800904e <__libc_init_array+0x2e>
 8009042:	bd70      	pop	{r4, r5, r6, pc}
 8009044:	f855 3b04 	ldr.w	r3, [r5], #4
 8009048:	4798      	blx	r3
 800904a:	3601      	adds	r6, #1
 800904c:	e7ee      	b.n	800902c <__libc_init_array+0xc>
 800904e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009052:	4798      	blx	r3
 8009054:	3601      	adds	r6, #1
 8009056:	e7f2      	b.n	800903e <__libc_init_array+0x1e>
 8009058:	0800b24c 	.word	0x0800b24c
 800905c:	0800b24c 	.word	0x0800b24c
 8009060:	0800b24c 	.word	0x0800b24c
 8009064:	0800b250 	.word	0x0800b250

08009068 <__retarget_lock_init_recursive>:
 8009068:	4770      	bx	lr

0800906a <__retarget_lock_acquire_recursive>:
 800906a:	4770      	bx	lr

0800906c <__retarget_lock_release_recursive>:
 800906c:	4770      	bx	lr
	...

08009070 <__assert_func>:
 8009070:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009072:	4614      	mov	r4, r2
 8009074:	461a      	mov	r2, r3
 8009076:	4b09      	ldr	r3, [pc, #36]	@ (800909c <__assert_func+0x2c>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4605      	mov	r5, r0
 800907c:	68d8      	ldr	r0, [r3, #12]
 800907e:	b954      	cbnz	r4, 8009096 <__assert_func+0x26>
 8009080:	4b07      	ldr	r3, [pc, #28]	@ (80090a0 <__assert_func+0x30>)
 8009082:	461c      	mov	r4, r3
 8009084:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009088:	9100      	str	r1, [sp, #0]
 800908a:	462b      	mov	r3, r5
 800908c:	4905      	ldr	r1, [pc, #20]	@ (80090a4 <__assert_func+0x34>)
 800908e:	f000 fc21 	bl	80098d4 <fiprintf>
 8009092:	f000 fd9f 	bl	8009bd4 <abort>
 8009096:	4b04      	ldr	r3, [pc, #16]	@ (80090a8 <__assert_func+0x38>)
 8009098:	e7f4      	b.n	8009084 <__assert_func+0x14>
 800909a:	bf00      	nop
 800909c:	200000a0 	.word	0x200000a0
 80090a0:	0800b210 	.word	0x0800b210
 80090a4:	0800b1e2 	.word	0x0800b1e2
 80090a8:	0800b1d5 	.word	0x0800b1d5

080090ac <_free_r>:
 80090ac:	b538      	push	{r3, r4, r5, lr}
 80090ae:	4605      	mov	r5, r0
 80090b0:	2900      	cmp	r1, #0
 80090b2:	d041      	beq.n	8009138 <_free_r+0x8c>
 80090b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090b8:	1f0c      	subs	r4, r1, #4
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	bfb8      	it	lt
 80090be:	18e4      	addlt	r4, r4, r3
 80090c0:	f000 fbb8 	bl	8009834 <__malloc_lock>
 80090c4:	4a1d      	ldr	r2, [pc, #116]	@ (800913c <_free_r+0x90>)
 80090c6:	6813      	ldr	r3, [r2, #0]
 80090c8:	b933      	cbnz	r3, 80090d8 <_free_r+0x2c>
 80090ca:	6063      	str	r3, [r4, #4]
 80090cc:	6014      	str	r4, [r2, #0]
 80090ce:	4628      	mov	r0, r5
 80090d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090d4:	f000 bbb4 	b.w	8009840 <__malloc_unlock>
 80090d8:	42a3      	cmp	r3, r4
 80090da:	d908      	bls.n	80090ee <_free_r+0x42>
 80090dc:	6820      	ldr	r0, [r4, #0]
 80090de:	1821      	adds	r1, r4, r0
 80090e0:	428b      	cmp	r3, r1
 80090e2:	bf01      	itttt	eq
 80090e4:	6819      	ldreq	r1, [r3, #0]
 80090e6:	685b      	ldreq	r3, [r3, #4]
 80090e8:	1809      	addeq	r1, r1, r0
 80090ea:	6021      	streq	r1, [r4, #0]
 80090ec:	e7ed      	b.n	80090ca <_free_r+0x1e>
 80090ee:	461a      	mov	r2, r3
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	b10b      	cbz	r3, 80090f8 <_free_r+0x4c>
 80090f4:	42a3      	cmp	r3, r4
 80090f6:	d9fa      	bls.n	80090ee <_free_r+0x42>
 80090f8:	6811      	ldr	r1, [r2, #0]
 80090fa:	1850      	adds	r0, r2, r1
 80090fc:	42a0      	cmp	r0, r4
 80090fe:	d10b      	bne.n	8009118 <_free_r+0x6c>
 8009100:	6820      	ldr	r0, [r4, #0]
 8009102:	4401      	add	r1, r0
 8009104:	1850      	adds	r0, r2, r1
 8009106:	4283      	cmp	r3, r0
 8009108:	6011      	str	r1, [r2, #0]
 800910a:	d1e0      	bne.n	80090ce <_free_r+0x22>
 800910c:	6818      	ldr	r0, [r3, #0]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	6053      	str	r3, [r2, #4]
 8009112:	4408      	add	r0, r1
 8009114:	6010      	str	r0, [r2, #0]
 8009116:	e7da      	b.n	80090ce <_free_r+0x22>
 8009118:	d902      	bls.n	8009120 <_free_r+0x74>
 800911a:	230c      	movs	r3, #12
 800911c:	602b      	str	r3, [r5, #0]
 800911e:	e7d6      	b.n	80090ce <_free_r+0x22>
 8009120:	6820      	ldr	r0, [r4, #0]
 8009122:	1821      	adds	r1, r4, r0
 8009124:	428b      	cmp	r3, r1
 8009126:	bf04      	itt	eq
 8009128:	6819      	ldreq	r1, [r3, #0]
 800912a:	685b      	ldreq	r3, [r3, #4]
 800912c:	6063      	str	r3, [r4, #4]
 800912e:	bf04      	itt	eq
 8009130:	1809      	addeq	r1, r1, r0
 8009132:	6021      	streq	r1, [r4, #0]
 8009134:	6054      	str	r4, [r2, #4]
 8009136:	e7ca      	b.n	80090ce <_free_r+0x22>
 8009138:	bd38      	pop	{r3, r4, r5, pc}
 800913a:	bf00      	nop
 800913c:	20029e48 	.word	0x20029e48

08009140 <__sfputc_r>:
 8009140:	6893      	ldr	r3, [r2, #8]
 8009142:	3b01      	subs	r3, #1
 8009144:	2b00      	cmp	r3, #0
 8009146:	b410      	push	{r4}
 8009148:	6093      	str	r3, [r2, #8]
 800914a:	da08      	bge.n	800915e <__sfputc_r+0x1e>
 800914c:	6994      	ldr	r4, [r2, #24]
 800914e:	42a3      	cmp	r3, r4
 8009150:	db01      	blt.n	8009156 <__sfputc_r+0x16>
 8009152:	290a      	cmp	r1, #10
 8009154:	d103      	bne.n	800915e <__sfputc_r+0x1e>
 8009156:	f85d 4b04 	ldr.w	r4, [sp], #4
 800915a:	f000 bbcd 	b.w	80098f8 <__swbuf_r>
 800915e:	6813      	ldr	r3, [r2, #0]
 8009160:	1c58      	adds	r0, r3, #1
 8009162:	6010      	str	r0, [r2, #0]
 8009164:	7019      	strb	r1, [r3, #0]
 8009166:	4608      	mov	r0, r1
 8009168:	f85d 4b04 	ldr.w	r4, [sp], #4
 800916c:	4770      	bx	lr

0800916e <__sfputs_r>:
 800916e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009170:	4606      	mov	r6, r0
 8009172:	460f      	mov	r7, r1
 8009174:	4614      	mov	r4, r2
 8009176:	18d5      	adds	r5, r2, r3
 8009178:	42ac      	cmp	r4, r5
 800917a:	d101      	bne.n	8009180 <__sfputs_r+0x12>
 800917c:	2000      	movs	r0, #0
 800917e:	e007      	b.n	8009190 <__sfputs_r+0x22>
 8009180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009184:	463a      	mov	r2, r7
 8009186:	4630      	mov	r0, r6
 8009188:	f7ff ffda 	bl	8009140 <__sfputc_r>
 800918c:	1c43      	adds	r3, r0, #1
 800918e:	d1f3      	bne.n	8009178 <__sfputs_r+0xa>
 8009190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009194 <_vfiprintf_r>:
 8009194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009198:	460d      	mov	r5, r1
 800919a:	b09d      	sub	sp, #116	@ 0x74
 800919c:	4614      	mov	r4, r2
 800919e:	4698      	mov	r8, r3
 80091a0:	4606      	mov	r6, r0
 80091a2:	b118      	cbz	r0, 80091ac <_vfiprintf_r+0x18>
 80091a4:	6a03      	ldr	r3, [r0, #32]
 80091a6:	b90b      	cbnz	r3, 80091ac <_vfiprintf_r+0x18>
 80091a8:	f7ff fe86 	bl	8008eb8 <__sinit>
 80091ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091ae:	07d9      	lsls	r1, r3, #31
 80091b0:	d405      	bmi.n	80091be <_vfiprintf_r+0x2a>
 80091b2:	89ab      	ldrh	r3, [r5, #12]
 80091b4:	059a      	lsls	r2, r3, #22
 80091b6:	d402      	bmi.n	80091be <_vfiprintf_r+0x2a>
 80091b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091ba:	f7ff ff56 	bl	800906a <__retarget_lock_acquire_recursive>
 80091be:	89ab      	ldrh	r3, [r5, #12]
 80091c0:	071b      	lsls	r3, r3, #28
 80091c2:	d501      	bpl.n	80091c8 <_vfiprintf_r+0x34>
 80091c4:	692b      	ldr	r3, [r5, #16]
 80091c6:	b99b      	cbnz	r3, 80091f0 <_vfiprintf_r+0x5c>
 80091c8:	4629      	mov	r1, r5
 80091ca:	4630      	mov	r0, r6
 80091cc:	f000 fbd2 	bl	8009974 <__swsetup_r>
 80091d0:	b170      	cbz	r0, 80091f0 <_vfiprintf_r+0x5c>
 80091d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091d4:	07dc      	lsls	r4, r3, #31
 80091d6:	d504      	bpl.n	80091e2 <_vfiprintf_r+0x4e>
 80091d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80091dc:	b01d      	add	sp, #116	@ 0x74
 80091de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091e2:	89ab      	ldrh	r3, [r5, #12]
 80091e4:	0598      	lsls	r0, r3, #22
 80091e6:	d4f7      	bmi.n	80091d8 <_vfiprintf_r+0x44>
 80091e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091ea:	f7ff ff3f 	bl	800906c <__retarget_lock_release_recursive>
 80091ee:	e7f3      	b.n	80091d8 <_vfiprintf_r+0x44>
 80091f0:	2300      	movs	r3, #0
 80091f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80091f4:	2320      	movs	r3, #32
 80091f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80091fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80091fe:	2330      	movs	r3, #48	@ 0x30
 8009200:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80093b0 <_vfiprintf_r+0x21c>
 8009204:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009208:	f04f 0901 	mov.w	r9, #1
 800920c:	4623      	mov	r3, r4
 800920e:	469a      	mov	sl, r3
 8009210:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009214:	b10a      	cbz	r2, 800921a <_vfiprintf_r+0x86>
 8009216:	2a25      	cmp	r2, #37	@ 0x25
 8009218:	d1f9      	bne.n	800920e <_vfiprintf_r+0x7a>
 800921a:	ebba 0b04 	subs.w	fp, sl, r4
 800921e:	d00b      	beq.n	8009238 <_vfiprintf_r+0xa4>
 8009220:	465b      	mov	r3, fp
 8009222:	4622      	mov	r2, r4
 8009224:	4629      	mov	r1, r5
 8009226:	4630      	mov	r0, r6
 8009228:	f7ff ffa1 	bl	800916e <__sfputs_r>
 800922c:	3001      	adds	r0, #1
 800922e:	f000 80a7 	beq.w	8009380 <_vfiprintf_r+0x1ec>
 8009232:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009234:	445a      	add	r2, fp
 8009236:	9209      	str	r2, [sp, #36]	@ 0x24
 8009238:	f89a 3000 	ldrb.w	r3, [sl]
 800923c:	2b00      	cmp	r3, #0
 800923e:	f000 809f 	beq.w	8009380 <_vfiprintf_r+0x1ec>
 8009242:	2300      	movs	r3, #0
 8009244:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009248:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800924c:	f10a 0a01 	add.w	sl, sl, #1
 8009250:	9304      	str	r3, [sp, #16]
 8009252:	9307      	str	r3, [sp, #28]
 8009254:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009258:	931a      	str	r3, [sp, #104]	@ 0x68
 800925a:	4654      	mov	r4, sl
 800925c:	2205      	movs	r2, #5
 800925e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009262:	4853      	ldr	r0, [pc, #332]	@ (80093b0 <_vfiprintf_r+0x21c>)
 8009264:	f7f6 ffcc 	bl	8000200 <memchr>
 8009268:	9a04      	ldr	r2, [sp, #16]
 800926a:	b9d8      	cbnz	r0, 80092a4 <_vfiprintf_r+0x110>
 800926c:	06d1      	lsls	r1, r2, #27
 800926e:	bf44      	itt	mi
 8009270:	2320      	movmi	r3, #32
 8009272:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009276:	0713      	lsls	r3, r2, #28
 8009278:	bf44      	itt	mi
 800927a:	232b      	movmi	r3, #43	@ 0x2b
 800927c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009280:	f89a 3000 	ldrb.w	r3, [sl]
 8009284:	2b2a      	cmp	r3, #42	@ 0x2a
 8009286:	d015      	beq.n	80092b4 <_vfiprintf_r+0x120>
 8009288:	9a07      	ldr	r2, [sp, #28]
 800928a:	4654      	mov	r4, sl
 800928c:	2000      	movs	r0, #0
 800928e:	f04f 0c0a 	mov.w	ip, #10
 8009292:	4621      	mov	r1, r4
 8009294:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009298:	3b30      	subs	r3, #48	@ 0x30
 800929a:	2b09      	cmp	r3, #9
 800929c:	d94b      	bls.n	8009336 <_vfiprintf_r+0x1a2>
 800929e:	b1b0      	cbz	r0, 80092ce <_vfiprintf_r+0x13a>
 80092a0:	9207      	str	r2, [sp, #28]
 80092a2:	e014      	b.n	80092ce <_vfiprintf_r+0x13a>
 80092a4:	eba0 0308 	sub.w	r3, r0, r8
 80092a8:	fa09 f303 	lsl.w	r3, r9, r3
 80092ac:	4313      	orrs	r3, r2
 80092ae:	9304      	str	r3, [sp, #16]
 80092b0:	46a2      	mov	sl, r4
 80092b2:	e7d2      	b.n	800925a <_vfiprintf_r+0xc6>
 80092b4:	9b03      	ldr	r3, [sp, #12]
 80092b6:	1d19      	adds	r1, r3, #4
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	9103      	str	r1, [sp, #12]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	bfbb      	ittet	lt
 80092c0:	425b      	neglt	r3, r3
 80092c2:	f042 0202 	orrlt.w	r2, r2, #2
 80092c6:	9307      	strge	r3, [sp, #28]
 80092c8:	9307      	strlt	r3, [sp, #28]
 80092ca:	bfb8      	it	lt
 80092cc:	9204      	strlt	r2, [sp, #16]
 80092ce:	7823      	ldrb	r3, [r4, #0]
 80092d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80092d2:	d10a      	bne.n	80092ea <_vfiprintf_r+0x156>
 80092d4:	7863      	ldrb	r3, [r4, #1]
 80092d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80092d8:	d132      	bne.n	8009340 <_vfiprintf_r+0x1ac>
 80092da:	9b03      	ldr	r3, [sp, #12]
 80092dc:	1d1a      	adds	r2, r3, #4
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	9203      	str	r2, [sp, #12]
 80092e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80092e6:	3402      	adds	r4, #2
 80092e8:	9305      	str	r3, [sp, #20]
 80092ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80093c0 <_vfiprintf_r+0x22c>
 80092ee:	7821      	ldrb	r1, [r4, #0]
 80092f0:	2203      	movs	r2, #3
 80092f2:	4650      	mov	r0, sl
 80092f4:	f7f6 ff84 	bl	8000200 <memchr>
 80092f8:	b138      	cbz	r0, 800930a <_vfiprintf_r+0x176>
 80092fa:	9b04      	ldr	r3, [sp, #16]
 80092fc:	eba0 000a 	sub.w	r0, r0, sl
 8009300:	2240      	movs	r2, #64	@ 0x40
 8009302:	4082      	lsls	r2, r0
 8009304:	4313      	orrs	r3, r2
 8009306:	3401      	adds	r4, #1
 8009308:	9304      	str	r3, [sp, #16]
 800930a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800930e:	4829      	ldr	r0, [pc, #164]	@ (80093b4 <_vfiprintf_r+0x220>)
 8009310:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009314:	2206      	movs	r2, #6
 8009316:	f7f6 ff73 	bl	8000200 <memchr>
 800931a:	2800      	cmp	r0, #0
 800931c:	d03f      	beq.n	800939e <_vfiprintf_r+0x20a>
 800931e:	4b26      	ldr	r3, [pc, #152]	@ (80093b8 <_vfiprintf_r+0x224>)
 8009320:	bb1b      	cbnz	r3, 800936a <_vfiprintf_r+0x1d6>
 8009322:	9b03      	ldr	r3, [sp, #12]
 8009324:	3307      	adds	r3, #7
 8009326:	f023 0307 	bic.w	r3, r3, #7
 800932a:	3308      	adds	r3, #8
 800932c:	9303      	str	r3, [sp, #12]
 800932e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009330:	443b      	add	r3, r7
 8009332:	9309      	str	r3, [sp, #36]	@ 0x24
 8009334:	e76a      	b.n	800920c <_vfiprintf_r+0x78>
 8009336:	fb0c 3202 	mla	r2, ip, r2, r3
 800933a:	460c      	mov	r4, r1
 800933c:	2001      	movs	r0, #1
 800933e:	e7a8      	b.n	8009292 <_vfiprintf_r+0xfe>
 8009340:	2300      	movs	r3, #0
 8009342:	3401      	adds	r4, #1
 8009344:	9305      	str	r3, [sp, #20]
 8009346:	4619      	mov	r1, r3
 8009348:	f04f 0c0a 	mov.w	ip, #10
 800934c:	4620      	mov	r0, r4
 800934e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009352:	3a30      	subs	r2, #48	@ 0x30
 8009354:	2a09      	cmp	r2, #9
 8009356:	d903      	bls.n	8009360 <_vfiprintf_r+0x1cc>
 8009358:	2b00      	cmp	r3, #0
 800935a:	d0c6      	beq.n	80092ea <_vfiprintf_r+0x156>
 800935c:	9105      	str	r1, [sp, #20]
 800935e:	e7c4      	b.n	80092ea <_vfiprintf_r+0x156>
 8009360:	fb0c 2101 	mla	r1, ip, r1, r2
 8009364:	4604      	mov	r4, r0
 8009366:	2301      	movs	r3, #1
 8009368:	e7f0      	b.n	800934c <_vfiprintf_r+0x1b8>
 800936a:	ab03      	add	r3, sp, #12
 800936c:	9300      	str	r3, [sp, #0]
 800936e:	462a      	mov	r2, r5
 8009370:	4b12      	ldr	r3, [pc, #72]	@ (80093bc <_vfiprintf_r+0x228>)
 8009372:	a904      	add	r1, sp, #16
 8009374:	4630      	mov	r0, r6
 8009376:	f3af 8000 	nop.w
 800937a:	4607      	mov	r7, r0
 800937c:	1c78      	adds	r0, r7, #1
 800937e:	d1d6      	bne.n	800932e <_vfiprintf_r+0x19a>
 8009380:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009382:	07d9      	lsls	r1, r3, #31
 8009384:	d405      	bmi.n	8009392 <_vfiprintf_r+0x1fe>
 8009386:	89ab      	ldrh	r3, [r5, #12]
 8009388:	059a      	lsls	r2, r3, #22
 800938a:	d402      	bmi.n	8009392 <_vfiprintf_r+0x1fe>
 800938c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800938e:	f7ff fe6d 	bl	800906c <__retarget_lock_release_recursive>
 8009392:	89ab      	ldrh	r3, [r5, #12]
 8009394:	065b      	lsls	r3, r3, #25
 8009396:	f53f af1f 	bmi.w	80091d8 <_vfiprintf_r+0x44>
 800939a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800939c:	e71e      	b.n	80091dc <_vfiprintf_r+0x48>
 800939e:	ab03      	add	r3, sp, #12
 80093a0:	9300      	str	r3, [sp, #0]
 80093a2:	462a      	mov	r2, r5
 80093a4:	4b05      	ldr	r3, [pc, #20]	@ (80093bc <_vfiprintf_r+0x228>)
 80093a6:	a904      	add	r1, sp, #16
 80093a8:	4630      	mov	r0, r6
 80093aa:	f000 f923 	bl	80095f4 <_printf_i>
 80093ae:	e7e4      	b.n	800937a <_vfiprintf_r+0x1e6>
 80093b0:	0800b211 	.word	0x0800b211
 80093b4:	0800b21b 	.word	0x0800b21b
 80093b8:	00000000 	.word	0x00000000
 80093bc:	0800916f 	.word	0x0800916f
 80093c0:	0800b217 	.word	0x0800b217

080093c4 <malloc>:
 80093c4:	4b02      	ldr	r3, [pc, #8]	@ (80093d0 <malloc+0xc>)
 80093c6:	4601      	mov	r1, r0
 80093c8:	6818      	ldr	r0, [r3, #0]
 80093ca:	f000 b825 	b.w	8009418 <_malloc_r>
 80093ce:	bf00      	nop
 80093d0:	200000a0 	.word	0x200000a0

080093d4 <sbrk_aligned>:
 80093d4:	b570      	push	{r4, r5, r6, lr}
 80093d6:	4e0f      	ldr	r6, [pc, #60]	@ (8009414 <sbrk_aligned+0x40>)
 80093d8:	460c      	mov	r4, r1
 80093da:	6831      	ldr	r1, [r6, #0]
 80093dc:	4605      	mov	r5, r0
 80093de:	b911      	cbnz	r1, 80093e6 <sbrk_aligned+0x12>
 80093e0:	f000 fbd6 	bl	8009b90 <_sbrk_r>
 80093e4:	6030      	str	r0, [r6, #0]
 80093e6:	4621      	mov	r1, r4
 80093e8:	4628      	mov	r0, r5
 80093ea:	f000 fbd1 	bl	8009b90 <_sbrk_r>
 80093ee:	1c43      	adds	r3, r0, #1
 80093f0:	d103      	bne.n	80093fa <sbrk_aligned+0x26>
 80093f2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80093f6:	4620      	mov	r0, r4
 80093f8:	bd70      	pop	{r4, r5, r6, pc}
 80093fa:	1cc4      	adds	r4, r0, #3
 80093fc:	f024 0403 	bic.w	r4, r4, #3
 8009400:	42a0      	cmp	r0, r4
 8009402:	d0f8      	beq.n	80093f6 <sbrk_aligned+0x22>
 8009404:	1a21      	subs	r1, r4, r0
 8009406:	4628      	mov	r0, r5
 8009408:	f000 fbc2 	bl	8009b90 <_sbrk_r>
 800940c:	3001      	adds	r0, #1
 800940e:	d1f2      	bne.n	80093f6 <sbrk_aligned+0x22>
 8009410:	e7ef      	b.n	80093f2 <sbrk_aligned+0x1e>
 8009412:	bf00      	nop
 8009414:	20029e44 	.word	0x20029e44

08009418 <_malloc_r>:
 8009418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800941c:	1ccd      	adds	r5, r1, #3
 800941e:	f025 0503 	bic.w	r5, r5, #3
 8009422:	3508      	adds	r5, #8
 8009424:	2d0c      	cmp	r5, #12
 8009426:	bf38      	it	cc
 8009428:	250c      	movcc	r5, #12
 800942a:	2d00      	cmp	r5, #0
 800942c:	4606      	mov	r6, r0
 800942e:	db01      	blt.n	8009434 <_malloc_r+0x1c>
 8009430:	42a9      	cmp	r1, r5
 8009432:	d904      	bls.n	800943e <_malloc_r+0x26>
 8009434:	230c      	movs	r3, #12
 8009436:	6033      	str	r3, [r6, #0]
 8009438:	2000      	movs	r0, #0
 800943a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800943e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009514 <_malloc_r+0xfc>
 8009442:	f000 f9f7 	bl	8009834 <__malloc_lock>
 8009446:	f8d8 3000 	ldr.w	r3, [r8]
 800944a:	461c      	mov	r4, r3
 800944c:	bb44      	cbnz	r4, 80094a0 <_malloc_r+0x88>
 800944e:	4629      	mov	r1, r5
 8009450:	4630      	mov	r0, r6
 8009452:	f7ff ffbf 	bl	80093d4 <sbrk_aligned>
 8009456:	1c43      	adds	r3, r0, #1
 8009458:	4604      	mov	r4, r0
 800945a:	d158      	bne.n	800950e <_malloc_r+0xf6>
 800945c:	f8d8 4000 	ldr.w	r4, [r8]
 8009460:	4627      	mov	r7, r4
 8009462:	2f00      	cmp	r7, #0
 8009464:	d143      	bne.n	80094ee <_malloc_r+0xd6>
 8009466:	2c00      	cmp	r4, #0
 8009468:	d04b      	beq.n	8009502 <_malloc_r+0xea>
 800946a:	6823      	ldr	r3, [r4, #0]
 800946c:	4639      	mov	r1, r7
 800946e:	4630      	mov	r0, r6
 8009470:	eb04 0903 	add.w	r9, r4, r3
 8009474:	f000 fb8c 	bl	8009b90 <_sbrk_r>
 8009478:	4581      	cmp	r9, r0
 800947a:	d142      	bne.n	8009502 <_malloc_r+0xea>
 800947c:	6821      	ldr	r1, [r4, #0]
 800947e:	1a6d      	subs	r5, r5, r1
 8009480:	4629      	mov	r1, r5
 8009482:	4630      	mov	r0, r6
 8009484:	f7ff ffa6 	bl	80093d4 <sbrk_aligned>
 8009488:	3001      	adds	r0, #1
 800948a:	d03a      	beq.n	8009502 <_malloc_r+0xea>
 800948c:	6823      	ldr	r3, [r4, #0]
 800948e:	442b      	add	r3, r5
 8009490:	6023      	str	r3, [r4, #0]
 8009492:	f8d8 3000 	ldr.w	r3, [r8]
 8009496:	685a      	ldr	r2, [r3, #4]
 8009498:	bb62      	cbnz	r2, 80094f4 <_malloc_r+0xdc>
 800949a:	f8c8 7000 	str.w	r7, [r8]
 800949e:	e00f      	b.n	80094c0 <_malloc_r+0xa8>
 80094a0:	6822      	ldr	r2, [r4, #0]
 80094a2:	1b52      	subs	r2, r2, r5
 80094a4:	d420      	bmi.n	80094e8 <_malloc_r+0xd0>
 80094a6:	2a0b      	cmp	r2, #11
 80094a8:	d917      	bls.n	80094da <_malloc_r+0xc2>
 80094aa:	1961      	adds	r1, r4, r5
 80094ac:	42a3      	cmp	r3, r4
 80094ae:	6025      	str	r5, [r4, #0]
 80094b0:	bf18      	it	ne
 80094b2:	6059      	strne	r1, [r3, #4]
 80094b4:	6863      	ldr	r3, [r4, #4]
 80094b6:	bf08      	it	eq
 80094b8:	f8c8 1000 	streq.w	r1, [r8]
 80094bc:	5162      	str	r2, [r4, r5]
 80094be:	604b      	str	r3, [r1, #4]
 80094c0:	4630      	mov	r0, r6
 80094c2:	f000 f9bd 	bl	8009840 <__malloc_unlock>
 80094c6:	f104 000b 	add.w	r0, r4, #11
 80094ca:	1d23      	adds	r3, r4, #4
 80094cc:	f020 0007 	bic.w	r0, r0, #7
 80094d0:	1ac2      	subs	r2, r0, r3
 80094d2:	bf1c      	itt	ne
 80094d4:	1a1b      	subne	r3, r3, r0
 80094d6:	50a3      	strne	r3, [r4, r2]
 80094d8:	e7af      	b.n	800943a <_malloc_r+0x22>
 80094da:	6862      	ldr	r2, [r4, #4]
 80094dc:	42a3      	cmp	r3, r4
 80094de:	bf0c      	ite	eq
 80094e0:	f8c8 2000 	streq.w	r2, [r8]
 80094e4:	605a      	strne	r2, [r3, #4]
 80094e6:	e7eb      	b.n	80094c0 <_malloc_r+0xa8>
 80094e8:	4623      	mov	r3, r4
 80094ea:	6864      	ldr	r4, [r4, #4]
 80094ec:	e7ae      	b.n	800944c <_malloc_r+0x34>
 80094ee:	463c      	mov	r4, r7
 80094f0:	687f      	ldr	r7, [r7, #4]
 80094f2:	e7b6      	b.n	8009462 <_malloc_r+0x4a>
 80094f4:	461a      	mov	r2, r3
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	42a3      	cmp	r3, r4
 80094fa:	d1fb      	bne.n	80094f4 <_malloc_r+0xdc>
 80094fc:	2300      	movs	r3, #0
 80094fe:	6053      	str	r3, [r2, #4]
 8009500:	e7de      	b.n	80094c0 <_malloc_r+0xa8>
 8009502:	230c      	movs	r3, #12
 8009504:	6033      	str	r3, [r6, #0]
 8009506:	4630      	mov	r0, r6
 8009508:	f000 f99a 	bl	8009840 <__malloc_unlock>
 800950c:	e794      	b.n	8009438 <_malloc_r+0x20>
 800950e:	6005      	str	r5, [r0, #0]
 8009510:	e7d6      	b.n	80094c0 <_malloc_r+0xa8>
 8009512:	bf00      	nop
 8009514:	20029e48 	.word	0x20029e48

08009518 <_printf_common>:
 8009518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800951c:	4616      	mov	r6, r2
 800951e:	4698      	mov	r8, r3
 8009520:	688a      	ldr	r2, [r1, #8]
 8009522:	690b      	ldr	r3, [r1, #16]
 8009524:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009528:	4293      	cmp	r3, r2
 800952a:	bfb8      	it	lt
 800952c:	4613      	movlt	r3, r2
 800952e:	6033      	str	r3, [r6, #0]
 8009530:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009534:	4607      	mov	r7, r0
 8009536:	460c      	mov	r4, r1
 8009538:	b10a      	cbz	r2, 800953e <_printf_common+0x26>
 800953a:	3301      	adds	r3, #1
 800953c:	6033      	str	r3, [r6, #0]
 800953e:	6823      	ldr	r3, [r4, #0]
 8009540:	0699      	lsls	r1, r3, #26
 8009542:	bf42      	ittt	mi
 8009544:	6833      	ldrmi	r3, [r6, #0]
 8009546:	3302      	addmi	r3, #2
 8009548:	6033      	strmi	r3, [r6, #0]
 800954a:	6825      	ldr	r5, [r4, #0]
 800954c:	f015 0506 	ands.w	r5, r5, #6
 8009550:	d106      	bne.n	8009560 <_printf_common+0x48>
 8009552:	f104 0a19 	add.w	sl, r4, #25
 8009556:	68e3      	ldr	r3, [r4, #12]
 8009558:	6832      	ldr	r2, [r6, #0]
 800955a:	1a9b      	subs	r3, r3, r2
 800955c:	42ab      	cmp	r3, r5
 800955e:	dc26      	bgt.n	80095ae <_printf_common+0x96>
 8009560:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009564:	6822      	ldr	r2, [r4, #0]
 8009566:	3b00      	subs	r3, #0
 8009568:	bf18      	it	ne
 800956a:	2301      	movne	r3, #1
 800956c:	0692      	lsls	r2, r2, #26
 800956e:	d42b      	bmi.n	80095c8 <_printf_common+0xb0>
 8009570:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009574:	4641      	mov	r1, r8
 8009576:	4638      	mov	r0, r7
 8009578:	47c8      	blx	r9
 800957a:	3001      	adds	r0, #1
 800957c:	d01e      	beq.n	80095bc <_printf_common+0xa4>
 800957e:	6823      	ldr	r3, [r4, #0]
 8009580:	6922      	ldr	r2, [r4, #16]
 8009582:	f003 0306 	and.w	r3, r3, #6
 8009586:	2b04      	cmp	r3, #4
 8009588:	bf02      	ittt	eq
 800958a:	68e5      	ldreq	r5, [r4, #12]
 800958c:	6833      	ldreq	r3, [r6, #0]
 800958e:	1aed      	subeq	r5, r5, r3
 8009590:	68a3      	ldr	r3, [r4, #8]
 8009592:	bf0c      	ite	eq
 8009594:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009598:	2500      	movne	r5, #0
 800959a:	4293      	cmp	r3, r2
 800959c:	bfc4      	itt	gt
 800959e:	1a9b      	subgt	r3, r3, r2
 80095a0:	18ed      	addgt	r5, r5, r3
 80095a2:	2600      	movs	r6, #0
 80095a4:	341a      	adds	r4, #26
 80095a6:	42b5      	cmp	r5, r6
 80095a8:	d11a      	bne.n	80095e0 <_printf_common+0xc8>
 80095aa:	2000      	movs	r0, #0
 80095ac:	e008      	b.n	80095c0 <_printf_common+0xa8>
 80095ae:	2301      	movs	r3, #1
 80095b0:	4652      	mov	r2, sl
 80095b2:	4641      	mov	r1, r8
 80095b4:	4638      	mov	r0, r7
 80095b6:	47c8      	blx	r9
 80095b8:	3001      	adds	r0, #1
 80095ba:	d103      	bne.n	80095c4 <_printf_common+0xac>
 80095bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80095c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095c4:	3501      	adds	r5, #1
 80095c6:	e7c6      	b.n	8009556 <_printf_common+0x3e>
 80095c8:	18e1      	adds	r1, r4, r3
 80095ca:	1c5a      	adds	r2, r3, #1
 80095cc:	2030      	movs	r0, #48	@ 0x30
 80095ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80095d2:	4422      	add	r2, r4
 80095d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80095d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80095dc:	3302      	adds	r3, #2
 80095de:	e7c7      	b.n	8009570 <_printf_common+0x58>
 80095e0:	2301      	movs	r3, #1
 80095e2:	4622      	mov	r2, r4
 80095e4:	4641      	mov	r1, r8
 80095e6:	4638      	mov	r0, r7
 80095e8:	47c8      	blx	r9
 80095ea:	3001      	adds	r0, #1
 80095ec:	d0e6      	beq.n	80095bc <_printf_common+0xa4>
 80095ee:	3601      	adds	r6, #1
 80095f0:	e7d9      	b.n	80095a6 <_printf_common+0x8e>
	...

080095f4 <_printf_i>:
 80095f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095f8:	7e0f      	ldrb	r7, [r1, #24]
 80095fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80095fc:	2f78      	cmp	r7, #120	@ 0x78
 80095fe:	4691      	mov	r9, r2
 8009600:	4680      	mov	r8, r0
 8009602:	460c      	mov	r4, r1
 8009604:	469a      	mov	sl, r3
 8009606:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800960a:	d807      	bhi.n	800961c <_printf_i+0x28>
 800960c:	2f62      	cmp	r7, #98	@ 0x62
 800960e:	d80a      	bhi.n	8009626 <_printf_i+0x32>
 8009610:	2f00      	cmp	r7, #0
 8009612:	f000 80d2 	beq.w	80097ba <_printf_i+0x1c6>
 8009616:	2f58      	cmp	r7, #88	@ 0x58
 8009618:	f000 80b9 	beq.w	800978e <_printf_i+0x19a>
 800961c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009620:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009624:	e03a      	b.n	800969c <_printf_i+0xa8>
 8009626:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800962a:	2b15      	cmp	r3, #21
 800962c:	d8f6      	bhi.n	800961c <_printf_i+0x28>
 800962e:	a101      	add	r1, pc, #4	@ (adr r1, 8009634 <_printf_i+0x40>)
 8009630:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009634:	0800968d 	.word	0x0800968d
 8009638:	080096a1 	.word	0x080096a1
 800963c:	0800961d 	.word	0x0800961d
 8009640:	0800961d 	.word	0x0800961d
 8009644:	0800961d 	.word	0x0800961d
 8009648:	0800961d 	.word	0x0800961d
 800964c:	080096a1 	.word	0x080096a1
 8009650:	0800961d 	.word	0x0800961d
 8009654:	0800961d 	.word	0x0800961d
 8009658:	0800961d 	.word	0x0800961d
 800965c:	0800961d 	.word	0x0800961d
 8009660:	080097a1 	.word	0x080097a1
 8009664:	080096cb 	.word	0x080096cb
 8009668:	0800975b 	.word	0x0800975b
 800966c:	0800961d 	.word	0x0800961d
 8009670:	0800961d 	.word	0x0800961d
 8009674:	080097c3 	.word	0x080097c3
 8009678:	0800961d 	.word	0x0800961d
 800967c:	080096cb 	.word	0x080096cb
 8009680:	0800961d 	.word	0x0800961d
 8009684:	0800961d 	.word	0x0800961d
 8009688:	08009763 	.word	0x08009763
 800968c:	6833      	ldr	r3, [r6, #0]
 800968e:	1d1a      	adds	r2, r3, #4
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	6032      	str	r2, [r6, #0]
 8009694:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009698:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800969c:	2301      	movs	r3, #1
 800969e:	e09d      	b.n	80097dc <_printf_i+0x1e8>
 80096a0:	6833      	ldr	r3, [r6, #0]
 80096a2:	6820      	ldr	r0, [r4, #0]
 80096a4:	1d19      	adds	r1, r3, #4
 80096a6:	6031      	str	r1, [r6, #0]
 80096a8:	0606      	lsls	r6, r0, #24
 80096aa:	d501      	bpl.n	80096b0 <_printf_i+0xbc>
 80096ac:	681d      	ldr	r5, [r3, #0]
 80096ae:	e003      	b.n	80096b8 <_printf_i+0xc4>
 80096b0:	0645      	lsls	r5, r0, #25
 80096b2:	d5fb      	bpl.n	80096ac <_printf_i+0xb8>
 80096b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80096b8:	2d00      	cmp	r5, #0
 80096ba:	da03      	bge.n	80096c4 <_printf_i+0xd0>
 80096bc:	232d      	movs	r3, #45	@ 0x2d
 80096be:	426d      	negs	r5, r5
 80096c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096c4:	4859      	ldr	r0, [pc, #356]	@ (800982c <_printf_i+0x238>)
 80096c6:	230a      	movs	r3, #10
 80096c8:	e011      	b.n	80096ee <_printf_i+0xfa>
 80096ca:	6821      	ldr	r1, [r4, #0]
 80096cc:	6833      	ldr	r3, [r6, #0]
 80096ce:	0608      	lsls	r0, r1, #24
 80096d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80096d4:	d402      	bmi.n	80096dc <_printf_i+0xe8>
 80096d6:	0649      	lsls	r1, r1, #25
 80096d8:	bf48      	it	mi
 80096da:	b2ad      	uxthmi	r5, r5
 80096dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80096de:	4853      	ldr	r0, [pc, #332]	@ (800982c <_printf_i+0x238>)
 80096e0:	6033      	str	r3, [r6, #0]
 80096e2:	bf14      	ite	ne
 80096e4:	230a      	movne	r3, #10
 80096e6:	2308      	moveq	r3, #8
 80096e8:	2100      	movs	r1, #0
 80096ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80096ee:	6866      	ldr	r6, [r4, #4]
 80096f0:	60a6      	str	r6, [r4, #8]
 80096f2:	2e00      	cmp	r6, #0
 80096f4:	bfa2      	ittt	ge
 80096f6:	6821      	ldrge	r1, [r4, #0]
 80096f8:	f021 0104 	bicge.w	r1, r1, #4
 80096fc:	6021      	strge	r1, [r4, #0]
 80096fe:	b90d      	cbnz	r5, 8009704 <_printf_i+0x110>
 8009700:	2e00      	cmp	r6, #0
 8009702:	d04b      	beq.n	800979c <_printf_i+0x1a8>
 8009704:	4616      	mov	r6, r2
 8009706:	fbb5 f1f3 	udiv	r1, r5, r3
 800970a:	fb03 5711 	mls	r7, r3, r1, r5
 800970e:	5dc7      	ldrb	r7, [r0, r7]
 8009710:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009714:	462f      	mov	r7, r5
 8009716:	42bb      	cmp	r3, r7
 8009718:	460d      	mov	r5, r1
 800971a:	d9f4      	bls.n	8009706 <_printf_i+0x112>
 800971c:	2b08      	cmp	r3, #8
 800971e:	d10b      	bne.n	8009738 <_printf_i+0x144>
 8009720:	6823      	ldr	r3, [r4, #0]
 8009722:	07df      	lsls	r7, r3, #31
 8009724:	d508      	bpl.n	8009738 <_printf_i+0x144>
 8009726:	6923      	ldr	r3, [r4, #16]
 8009728:	6861      	ldr	r1, [r4, #4]
 800972a:	4299      	cmp	r1, r3
 800972c:	bfde      	ittt	le
 800972e:	2330      	movle	r3, #48	@ 0x30
 8009730:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009734:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009738:	1b92      	subs	r2, r2, r6
 800973a:	6122      	str	r2, [r4, #16]
 800973c:	f8cd a000 	str.w	sl, [sp]
 8009740:	464b      	mov	r3, r9
 8009742:	aa03      	add	r2, sp, #12
 8009744:	4621      	mov	r1, r4
 8009746:	4640      	mov	r0, r8
 8009748:	f7ff fee6 	bl	8009518 <_printf_common>
 800974c:	3001      	adds	r0, #1
 800974e:	d14a      	bne.n	80097e6 <_printf_i+0x1f2>
 8009750:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009754:	b004      	add	sp, #16
 8009756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800975a:	6823      	ldr	r3, [r4, #0]
 800975c:	f043 0320 	orr.w	r3, r3, #32
 8009760:	6023      	str	r3, [r4, #0]
 8009762:	4833      	ldr	r0, [pc, #204]	@ (8009830 <_printf_i+0x23c>)
 8009764:	2778      	movs	r7, #120	@ 0x78
 8009766:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800976a:	6823      	ldr	r3, [r4, #0]
 800976c:	6831      	ldr	r1, [r6, #0]
 800976e:	061f      	lsls	r7, r3, #24
 8009770:	f851 5b04 	ldr.w	r5, [r1], #4
 8009774:	d402      	bmi.n	800977c <_printf_i+0x188>
 8009776:	065f      	lsls	r7, r3, #25
 8009778:	bf48      	it	mi
 800977a:	b2ad      	uxthmi	r5, r5
 800977c:	6031      	str	r1, [r6, #0]
 800977e:	07d9      	lsls	r1, r3, #31
 8009780:	bf44      	itt	mi
 8009782:	f043 0320 	orrmi.w	r3, r3, #32
 8009786:	6023      	strmi	r3, [r4, #0]
 8009788:	b11d      	cbz	r5, 8009792 <_printf_i+0x19e>
 800978a:	2310      	movs	r3, #16
 800978c:	e7ac      	b.n	80096e8 <_printf_i+0xf4>
 800978e:	4827      	ldr	r0, [pc, #156]	@ (800982c <_printf_i+0x238>)
 8009790:	e7e9      	b.n	8009766 <_printf_i+0x172>
 8009792:	6823      	ldr	r3, [r4, #0]
 8009794:	f023 0320 	bic.w	r3, r3, #32
 8009798:	6023      	str	r3, [r4, #0]
 800979a:	e7f6      	b.n	800978a <_printf_i+0x196>
 800979c:	4616      	mov	r6, r2
 800979e:	e7bd      	b.n	800971c <_printf_i+0x128>
 80097a0:	6833      	ldr	r3, [r6, #0]
 80097a2:	6825      	ldr	r5, [r4, #0]
 80097a4:	6961      	ldr	r1, [r4, #20]
 80097a6:	1d18      	adds	r0, r3, #4
 80097a8:	6030      	str	r0, [r6, #0]
 80097aa:	062e      	lsls	r6, r5, #24
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	d501      	bpl.n	80097b4 <_printf_i+0x1c0>
 80097b0:	6019      	str	r1, [r3, #0]
 80097b2:	e002      	b.n	80097ba <_printf_i+0x1c6>
 80097b4:	0668      	lsls	r0, r5, #25
 80097b6:	d5fb      	bpl.n	80097b0 <_printf_i+0x1bc>
 80097b8:	8019      	strh	r1, [r3, #0]
 80097ba:	2300      	movs	r3, #0
 80097bc:	6123      	str	r3, [r4, #16]
 80097be:	4616      	mov	r6, r2
 80097c0:	e7bc      	b.n	800973c <_printf_i+0x148>
 80097c2:	6833      	ldr	r3, [r6, #0]
 80097c4:	1d1a      	adds	r2, r3, #4
 80097c6:	6032      	str	r2, [r6, #0]
 80097c8:	681e      	ldr	r6, [r3, #0]
 80097ca:	6862      	ldr	r2, [r4, #4]
 80097cc:	2100      	movs	r1, #0
 80097ce:	4630      	mov	r0, r6
 80097d0:	f7f6 fd16 	bl	8000200 <memchr>
 80097d4:	b108      	cbz	r0, 80097da <_printf_i+0x1e6>
 80097d6:	1b80      	subs	r0, r0, r6
 80097d8:	6060      	str	r0, [r4, #4]
 80097da:	6863      	ldr	r3, [r4, #4]
 80097dc:	6123      	str	r3, [r4, #16]
 80097de:	2300      	movs	r3, #0
 80097e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097e4:	e7aa      	b.n	800973c <_printf_i+0x148>
 80097e6:	6923      	ldr	r3, [r4, #16]
 80097e8:	4632      	mov	r2, r6
 80097ea:	4649      	mov	r1, r9
 80097ec:	4640      	mov	r0, r8
 80097ee:	47d0      	blx	sl
 80097f0:	3001      	adds	r0, #1
 80097f2:	d0ad      	beq.n	8009750 <_printf_i+0x15c>
 80097f4:	6823      	ldr	r3, [r4, #0]
 80097f6:	079b      	lsls	r3, r3, #30
 80097f8:	d413      	bmi.n	8009822 <_printf_i+0x22e>
 80097fa:	68e0      	ldr	r0, [r4, #12]
 80097fc:	9b03      	ldr	r3, [sp, #12]
 80097fe:	4298      	cmp	r0, r3
 8009800:	bfb8      	it	lt
 8009802:	4618      	movlt	r0, r3
 8009804:	e7a6      	b.n	8009754 <_printf_i+0x160>
 8009806:	2301      	movs	r3, #1
 8009808:	4632      	mov	r2, r6
 800980a:	4649      	mov	r1, r9
 800980c:	4640      	mov	r0, r8
 800980e:	47d0      	blx	sl
 8009810:	3001      	adds	r0, #1
 8009812:	d09d      	beq.n	8009750 <_printf_i+0x15c>
 8009814:	3501      	adds	r5, #1
 8009816:	68e3      	ldr	r3, [r4, #12]
 8009818:	9903      	ldr	r1, [sp, #12]
 800981a:	1a5b      	subs	r3, r3, r1
 800981c:	42ab      	cmp	r3, r5
 800981e:	dcf2      	bgt.n	8009806 <_printf_i+0x212>
 8009820:	e7eb      	b.n	80097fa <_printf_i+0x206>
 8009822:	2500      	movs	r5, #0
 8009824:	f104 0619 	add.w	r6, r4, #25
 8009828:	e7f5      	b.n	8009816 <_printf_i+0x222>
 800982a:	bf00      	nop
 800982c:	0800b222 	.word	0x0800b222
 8009830:	0800b233 	.word	0x0800b233

08009834 <__malloc_lock>:
 8009834:	4801      	ldr	r0, [pc, #4]	@ (800983c <__malloc_lock+0x8>)
 8009836:	f7ff bc18 	b.w	800906a <__retarget_lock_acquire_recursive>
 800983a:	bf00      	nop
 800983c:	20029e40 	.word	0x20029e40

08009840 <__malloc_unlock>:
 8009840:	4801      	ldr	r0, [pc, #4]	@ (8009848 <__malloc_unlock+0x8>)
 8009842:	f7ff bc13 	b.w	800906c <__retarget_lock_release_recursive>
 8009846:	bf00      	nop
 8009848:	20029e40 	.word	0x20029e40

0800984c <__sread>:
 800984c:	b510      	push	{r4, lr}
 800984e:	460c      	mov	r4, r1
 8009850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009854:	f000 f98a 	bl	8009b6c <_read_r>
 8009858:	2800      	cmp	r0, #0
 800985a:	bfab      	itete	ge
 800985c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800985e:	89a3      	ldrhlt	r3, [r4, #12]
 8009860:	181b      	addge	r3, r3, r0
 8009862:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009866:	bfac      	ite	ge
 8009868:	6563      	strge	r3, [r4, #84]	@ 0x54
 800986a:	81a3      	strhlt	r3, [r4, #12]
 800986c:	bd10      	pop	{r4, pc}

0800986e <__swrite>:
 800986e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009872:	461f      	mov	r7, r3
 8009874:	898b      	ldrh	r3, [r1, #12]
 8009876:	05db      	lsls	r3, r3, #23
 8009878:	4605      	mov	r5, r0
 800987a:	460c      	mov	r4, r1
 800987c:	4616      	mov	r6, r2
 800987e:	d505      	bpl.n	800988c <__swrite+0x1e>
 8009880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009884:	2302      	movs	r3, #2
 8009886:	2200      	movs	r2, #0
 8009888:	f000 f95e 	bl	8009b48 <_lseek_r>
 800988c:	89a3      	ldrh	r3, [r4, #12]
 800988e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009892:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009896:	81a3      	strh	r3, [r4, #12]
 8009898:	4632      	mov	r2, r6
 800989a:	463b      	mov	r3, r7
 800989c:	4628      	mov	r0, r5
 800989e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098a2:	f000 b985 	b.w	8009bb0 <_write_r>

080098a6 <__sseek>:
 80098a6:	b510      	push	{r4, lr}
 80098a8:	460c      	mov	r4, r1
 80098aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098ae:	f000 f94b 	bl	8009b48 <_lseek_r>
 80098b2:	1c43      	adds	r3, r0, #1
 80098b4:	89a3      	ldrh	r3, [r4, #12]
 80098b6:	bf15      	itete	ne
 80098b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80098ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80098be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80098c2:	81a3      	strheq	r3, [r4, #12]
 80098c4:	bf18      	it	ne
 80098c6:	81a3      	strhne	r3, [r4, #12]
 80098c8:	bd10      	pop	{r4, pc}

080098ca <__sclose>:
 80098ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098ce:	f000 b909 	b.w	8009ae4 <_close_r>
	...

080098d4 <fiprintf>:
 80098d4:	b40e      	push	{r1, r2, r3}
 80098d6:	b503      	push	{r0, r1, lr}
 80098d8:	4601      	mov	r1, r0
 80098da:	ab03      	add	r3, sp, #12
 80098dc:	4805      	ldr	r0, [pc, #20]	@ (80098f4 <fiprintf+0x20>)
 80098de:	f853 2b04 	ldr.w	r2, [r3], #4
 80098e2:	6800      	ldr	r0, [r0, #0]
 80098e4:	9301      	str	r3, [sp, #4]
 80098e6:	f7ff fc55 	bl	8009194 <_vfiprintf_r>
 80098ea:	b002      	add	sp, #8
 80098ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80098f0:	b003      	add	sp, #12
 80098f2:	4770      	bx	lr
 80098f4:	200000a0 	.word	0x200000a0

080098f8 <__swbuf_r>:
 80098f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098fa:	460e      	mov	r6, r1
 80098fc:	4614      	mov	r4, r2
 80098fe:	4605      	mov	r5, r0
 8009900:	b118      	cbz	r0, 800990a <__swbuf_r+0x12>
 8009902:	6a03      	ldr	r3, [r0, #32]
 8009904:	b90b      	cbnz	r3, 800990a <__swbuf_r+0x12>
 8009906:	f7ff fad7 	bl	8008eb8 <__sinit>
 800990a:	69a3      	ldr	r3, [r4, #24]
 800990c:	60a3      	str	r3, [r4, #8]
 800990e:	89a3      	ldrh	r3, [r4, #12]
 8009910:	071a      	lsls	r2, r3, #28
 8009912:	d501      	bpl.n	8009918 <__swbuf_r+0x20>
 8009914:	6923      	ldr	r3, [r4, #16]
 8009916:	b943      	cbnz	r3, 800992a <__swbuf_r+0x32>
 8009918:	4621      	mov	r1, r4
 800991a:	4628      	mov	r0, r5
 800991c:	f000 f82a 	bl	8009974 <__swsetup_r>
 8009920:	b118      	cbz	r0, 800992a <__swbuf_r+0x32>
 8009922:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009926:	4638      	mov	r0, r7
 8009928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800992a:	6823      	ldr	r3, [r4, #0]
 800992c:	6922      	ldr	r2, [r4, #16]
 800992e:	1a98      	subs	r0, r3, r2
 8009930:	6963      	ldr	r3, [r4, #20]
 8009932:	b2f6      	uxtb	r6, r6
 8009934:	4283      	cmp	r3, r0
 8009936:	4637      	mov	r7, r6
 8009938:	dc05      	bgt.n	8009946 <__swbuf_r+0x4e>
 800993a:	4621      	mov	r1, r4
 800993c:	4628      	mov	r0, r5
 800993e:	f7ff f9b5 	bl	8008cac <_fflush_r>
 8009942:	2800      	cmp	r0, #0
 8009944:	d1ed      	bne.n	8009922 <__swbuf_r+0x2a>
 8009946:	68a3      	ldr	r3, [r4, #8]
 8009948:	3b01      	subs	r3, #1
 800994a:	60a3      	str	r3, [r4, #8]
 800994c:	6823      	ldr	r3, [r4, #0]
 800994e:	1c5a      	adds	r2, r3, #1
 8009950:	6022      	str	r2, [r4, #0]
 8009952:	701e      	strb	r6, [r3, #0]
 8009954:	6962      	ldr	r2, [r4, #20]
 8009956:	1c43      	adds	r3, r0, #1
 8009958:	429a      	cmp	r2, r3
 800995a:	d004      	beq.n	8009966 <__swbuf_r+0x6e>
 800995c:	89a3      	ldrh	r3, [r4, #12]
 800995e:	07db      	lsls	r3, r3, #31
 8009960:	d5e1      	bpl.n	8009926 <__swbuf_r+0x2e>
 8009962:	2e0a      	cmp	r6, #10
 8009964:	d1df      	bne.n	8009926 <__swbuf_r+0x2e>
 8009966:	4621      	mov	r1, r4
 8009968:	4628      	mov	r0, r5
 800996a:	f7ff f99f 	bl	8008cac <_fflush_r>
 800996e:	2800      	cmp	r0, #0
 8009970:	d0d9      	beq.n	8009926 <__swbuf_r+0x2e>
 8009972:	e7d6      	b.n	8009922 <__swbuf_r+0x2a>

08009974 <__swsetup_r>:
 8009974:	b538      	push	{r3, r4, r5, lr}
 8009976:	4b29      	ldr	r3, [pc, #164]	@ (8009a1c <__swsetup_r+0xa8>)
 8009978:	4605      	mov	r5, r0
 800997a:	6818      	ldr	r0, [r3, #0]
 800997c:	460c      	mov	r4, r1
 800997e:	b118      	cbz	r0, 8009988 <__swsetup_r+0x14>
 8009980:	6a03      	ldr	r3, [r0, #32]
 8009982:	b90b      	cbnz	r3, 8009988 <__swsetup_r+0x14>
 8009984:	f7ff fa98 	bl	8008eb8 <__sinit>
 8009988:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800998c:	0719      	lsls	r1, r3, #28
 800998e:	d422      	bmi.n	80099d6 <__swsetup_r+0x62>
 8009990:	06da      	lsls	r2, r3, #27
 8009992:	d407      	bmi.n	80099a4 <__swsetup_r+0x30>
 8009994:	2209      	movs	r2, #9
 8009996:	602a      	str	r2, [r5, #0]
 8009998:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800999c:	81a3      	strh	r3, [r4, #12]
 800999e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80099a2:	e033      	b.n	8009a0c <__swsetup_r+0x98>
 80099a4:	0758      	lsls	r0, r3, #29
 80099a6:	d512      	bpl.n	80099ce <__swsetup_r+0x5a>
 80099a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80099aa:	b141      	cbz	r1, 80099be <__swsetup_r+0x4a>
 80099ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80099b0:	4299      	cmp	r1, r3
 80099b2:	d002      	beq.n	80099ba <__swsetup_r+0x46>
 80099b4:	4628      	mov	r0, r5
 80099b6:	f7ff fb79 	bl	80090ac <_free_r>
 80099ba:	2300      	movs	r3, #0
 80099bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80099be:	89a3      	ldrh	r3, [r4, #12]
 80099c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80099c4:	81a3      	strh	r3, [r4, #12]
 80099c6:	2300      	movs	r3, #0
 80099c8:	6063      	str	r3, [r4, #4]
 80099ca:	6923      	ldr	r3, [r4, #16]
 80099cc:	6023      	str	r3, [r4, #0]
 80099ce:	89a3      	ldrh	r3, [r4, #12]
 80099d0:	f043 0308 	orr.w	r3, r3, #8
 80099d4:	81a3      	strh	r3, [r4, #12]
 80099d6:	6923      	ldr	r3, [r4, #16]
 80099d8:	b94b      	cbnz	r3, 80099ee <__swsetup_r+0x7a>
 80099da:	89a3      	ldrh	r3, [r4, #12]
 80099dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80099e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099e4:	d003      	beq.n	80099ee <__swsetup_r+0x7a>
 80099e6:	4621      	mov	r1, r4
 80099e8:	4628      	mov	r0, r5
 80099ea:	f000 f83f 	bl	8009a6c <__smakebuf_r>
 80099ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099f2:	f013 0201 	ands.w	r2, r3, #1
 80099f6:	d00a      	beq.n	8009a0e <__swsetup_r+0x9a>
 80099f8:	2200      	movs	r2, #0
 80099fa:	60a2      	str	r2, [r4, #8]
 80099fc:	6962      	ldr	r2, [r4, #20]
 80099fe:	4252      	negs	r2, r2
 8009a00:	61a2      	str	r2, [r4, #24]
 8009a02:	6922      	ldr	r2, [r4, #16]
 8009a04:	b942      	cbnz	r2, 8009a18 <__swsetup_r+0xa4>
 8009a06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009a0a:	d1c5      	bne.n	8009998 <__swsetup_r+0x24>
 8009a0c:	bd38      	pop	{r3, r4, r5, pc}
 8009a0e:	0799      	lsls	r1, r3, #30
 8009a10:	bf58      	it	pl
 8009a12:	6962      	ldrpl	r2, [r4, #20]
 8009a14:	60a2      	str	r2, [r4, #8]
 8009a16:	e7f4      	b.n	8009a02 <__swsetup_r+0x8e>
 8009a18:	2000      	movs	r0, #0
 8009a1a:	e7f7      	b.n	8009a0c <__swsetup_r+0x98>
 8009a1c:	200000a0 	.word	0x200000a0

08009a20 <__swhatbuf_r>:
 8009a20:	b570      	push	{r4, r5, r6, lr}
 8009a22:	460c      	mov	r4, r1
 8009a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a28:	2900      	cmp	r1, #0
 8009a2a:	b096      	sub	sp, #88	@ 0x58
 8009a2c:	4615      	mov	r5, r2
 8009a2e:	461e      	mov	r6, r3
 8009a30:	da0d      	bge.n	8009a4e <__swhatbuf_r+0x2e>
 8009a32:	89a3      	ldrh	r3, [r4, #12]
 8009a34:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009a38:	f04f 0100 	mov.w	r1, #0
 8009a3c:	bf14      	ite	ne
 8009a3e:	2340      	movne	r3, #64	@ 0x40
 8009a40:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009a44:	2000      	movs	r0, #0
 8009a46:	6031      	str	r1, [r6, #0]
 8009a48:	602b      	str	r3, [r5, #0]
 8009a4a:	b016      	add	sp, #88	@ 0x58
 8009a4c:	bd70      	pop	{r4, r5, r6, pc}
 8009a4e:	466a      	mov	r2, sp
 8009a50:	f000 f858 	bl	8009b04 <_fstat_r>
 8009a54:	2800      	cmp	r0, #0
 8009a56:	dbec      	blt.n	8009a32 <__swhatbuf_r+0x12>
 8009a58:	9901      	ldr	r1, [sp, #4]
 8009a5a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009a5e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009a62:	4259      	negs	r1, r3
 8009a64:	4159      	adcs	r1, r3
 8009a66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a6a:	e7eb      	b.n	8009a44 <__swhatbuf_r+0x24>

08009a6c <__smakebuf_r>:
 8009a6c:	898b      	ldrh	r3, [r1, #12]
 8009a6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a70:	079d      	lsls	r5, r3, #30
 8009a72:	4606      	mov	r6, r0
 8009a74:	460c      	mov	r4, r1
 8009a76:	d507      	bpl.n	8009a88 <__smakebuf_r+0x1c>
 8009a78:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009a7c:	6023      	str	r3, [r4, #0]
 8009a7e:	6123      	str	r3, [r4, #16]
 8009a80:	2301      	movs	r3, #1
 8009a82:	6163      	str	r3, [r4, #20]
 8009a84:	b003      	add	sp, #12
 8009a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a88:	ab01      	add	r3, sp, #4
 8009a8a:	466a      	mov	r2, sp
 8009a8c:	f7ff ffc8 	bl	8009a20 <__swhatbuf_r>
 8009a90:	9f00      	ldr	r7, [sp, #0]
 8009a92:	4605      	mov	r5, r0
 8009a94:	4639      	mov	r1, r7
 8009a96:	4630      	mov	r0, r6
 8009a98:	f7ff fcbe 	bl	8009418 <_malloc_r>
 8009a9c:	b948      	cbnz	r0, 8009ab2 <__smakebuf_r+0x46>
 8009a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009aa2:	059a      	lsls	r2, r3, #22
 8009aa4:	d4ee      	bmi.n	8009a84 <__smakebuf_r+0x18>
 8009aa6:	f023 0303 	bic.w	r3, r3, #3
 8009aaa:	f043 0302 	orr.w	r3, r3, #2
 8009aae:	81a3      	strh	r3, [r4, #12]
 8009ab0:	e7e2      	b.n	8009a78 <__smakebuf_r+0xc>
 8009ab2:	89a3      	ldrh	r3, [r4, #12]
 8009ab4:	6020      	str	r0, [r4, #0]
 8009ab6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009aba:	81a3      	strh	r3, [r4, #12]
 8009abc:	9b01      	ldr	r3, [sp, #4]
 8009abe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009ac2:	b15b      	cbz	r3, 8009adc <__smakebuf_r+0x70>
 8009ac4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ac8:	4630      	mov	r0, r6
 8009aca:	f000 f82d 	bl	8009b28 <_isatty_r>
 8009ace:	b128      	cbz	r0, 8009adc <__smakebuf_r+0x70>
 8009ad0:	89a3      	ldrh	r3, [r4, #12]
 8009ad2:	f023 0303 	bic.w	r3, r3, #3
 8009ad6:	f043 0301 	orr.w	r3, r3, #1
 8009ada:	81a3      	strh	r3, [r4, #12]
 8009adc:	89a3      	ldrh	r3, [r4, #12]
 8009ade:	431d      	orrs	r5, r3
 8009ae0:	81a5      	strh	r5, [r4, #12]
 8009ae2:	e7cf      	b.n	8009a84 <__smakebuf_r+0x18>

08009ae4 <_close_r>:
 8009ae4:	b538      	push	{r3, r4, r5, lr}
 8009ae6:	4d06      	ldr	r5, [pc, #24]	@ (8009b00 <_close_r+0x1c>)
 8009ae8:	2300      	movs	r3, #0
 8009aea:	4604      	mov	r4, r0
 8009aec:	4608      	mov	r0, r1
 8009aee:	602b      	str	r3, [r5, #0]
 8009af0:	f7fe fe92 	bl	8008818 <_close>
 8009af4:	1c43      	adds	r3, r0, #1
 8009af6:	d102      	bne.n	8009afe <_close_r+0x1a>
 8009af8:	682b      	ldr	r3, [r5, #0]
 8009afa:	b103      	cbz	r3, 8009afe <_close_r+0x1a>
 8009afc:	6023      	str	r3, [r4, #0]
 8009afe:	bd38      	pop	{r3, r4, r5, pc}
 8009b00:	20029e4c 	.word	0x20029e4c

08009b04 <_fstat_r>:
 8009b04:	b538      	push	{r3, r4, r5, lr}
 8009b06:	4d07      	ldr	r5, [pc, #28]	@ (8009b24 <_fstat_r+0x20>)
 8009b08:	2300      	movs	r3, #0
 8009b0a:	4604      	mov	r4, r0
 8009b0c:	4608      	mov	r0, r1
 8009b0e:	4611      	mov	r1, r2
 8009b10:	602b      	str	r3, [r5, #0]
 8009b12:	f7fe fec6 	bl	80088a2 <_fstat>
 8009b16:	1c43      	adds	r3, r0, #1
 8009b18:	d102      	bne.n	8009b20 <_fstat_r+0x1c>
 8009b1a:	682b      	ldr	r3, [r5, #0]
 8009b1c:	b103      	cbz	r3, 8009b20 <_fstat_r+0x1c>
 8009b1e:	6023      	str	r3, [r4, #0]
 8009b20:	bd38      	pop	{r3, r4, r5, pc}
 8009b22:	bf00      	nop
 8009b24:	20029e4c 	.word	0x20029e4c

08009b28 <_isatty_r>:
 8009b28:	b538      	push	{r3, r4, r5, lr}
 8009b2a:	4d06      	ldr	r5, [pc, #24]	@ (8009b44 <_isatty_r+0x1c>)
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	4604      	mov	r4, r0
 8009b30:	4608      	mov	r0, r1
 8009b32:	602b      	str	r3, [r5, #0]
 8009b34:	f7ff f818 	bl	8008b68 <_isatty>
 8009b38:	1c43      	adds	r3, r0, #1
 8009b3a:	d102      	bne.n	8009b42 <_isatty_r+0x1a>
 8009b3c:	682b      	ldr	r3, [r5, #0]
 8009b3e:	b103      	cbz	r3, 8009b42 <_isatty_r+0x1a>
 8009b40:	6023      	str	r3, [r4, #0]
 8009b42:	bd38      	pop	{r3, r4, r5, pc}
 8009b44:	20029e4c 	.word	0x20029e4c

08009b48 <_lseek_r>:
 8009b48:	b538      	push	{r3, r4, r5, lr}
 8009b4a:	4d07      	ldr	r5, [pc, #28]	@ (8009b68 <_lseek_r+0x20>)
 8009b4c:	4604      	mov	r4, r0
 8009b4e:	4608      	mov	r0, r1
 8009b50:	4611      	mov	r1, r2
 8009b52:	2200      	movs	r2, #0
 8009b54:	602a      	str	r2, [r5, #0]
 8009b56:	461a      	mov	r2, r3
 8009b58:	f7fe fe1f 	bl	800879a <_lseek>
 8009b5c:	1c43      	adds	r3, r0, #1
 8009b5e:	d102      	bne.n	8009b66 <_lseek_r+0x1e>
 8009b60:	682b      	ldr	r3, [r5, #0]
 8009b62:	b103      	cbz	r3, 8009b66 <_lseek_r+0x1e>
 8009b64:	6023      	str	r3, [r4, #0]
 8009b66:	bd38      	pop	{r3, r4, r5, pc}
 8009b68:	20029e4c 	.word	0x20029e4c

08009b6c <_read_r>:
 8009b6c:	b538      	push	{r3, r4, r5, lr}
 8009b6e:	4d07      	ldr	r5, [pc, #28]	@ (8009b8c <_read_r+0x20>)
 8009b70:	4604      	mov	r4, r0
 8009b72:	4608      	mov	r0, r1
 8009b74:	4611      	mov	r1, r2
 8009b76:	2200      	movs	r2, #0
 8009b78:	602a      	str	r2, [r5, #0]
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	f7fe fdb7 	bl	80086ee <_read>
 8009b80:	1c43      	adds	r3, r0, #1
 8009b82:	d102      	bne.n	8009b8a <_read_r+0x1e>
 8009b84:	682b      	ldr	r3, [r5, #0]
 8009b86:	b103      	cbz	r3, 8009b8a <_read_r+0x1e>
 8009b88:	6023      	str	r3, [r4, #0]
 8009b8a:	bd38      	pop	{r3, r4, r5, pc}
 8009b8c:	20029e4c 	.word	0x20029e4c

08009b90 <_sbrk_r>:
 8009b90:	b538      	push	{r3, r4, r5, lr}
 8009b92:	4d06      	ldr	r5, [pc, #24]	@ (8009bac <_sbrk_r+0x1c>)
 8009b94:	2300      	movs	r3, #0
 8009b96:	4604      	mov	r4, r0
 8009b98:	4608      	mov	r0, r1
 8009b9a:	602b      	str	r3, [r5, #0]
 8009b9c:	f7fa f962 	bl	8003e64 <_sbrk>
 8009ba0:	1c43      	adds	r3, r0, #1
 8009ba2:	d102      	bne.n	8009baa <_sbrk_r+0x1a>
 8009ba4:	682b      	ldr	r3, [r5, #0]
 8009ba6:	b103      	cbz	r3, 8009baa <_sbrk_r+0x1a>
 8009ba8:	6023      	str	r3, [r4, #0]
 8009baa:	bd38      	pop	{r3, r4, r5, pc}
 8009bac:	20029e4c 	.word	0x20029e4c

08009bb0 <_write_r>:
 8009bb0:	b538      	push	{r3, r4, r5, lr}
 8009bb2:	4d07      	ldr	r5, [pc, #28]	@ (8009bd0 <_write_r+0x20>)
 8009bb4:	4604      	mov	r4, r0
 8009bb6:	4608      	mov	r0, r1
 8009bb8:	4611      	mov	r1, r2
 8009bba:	2200      	movs	r2, #0
 8009bbc:	602a      	str	r2, [r5, #0]
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	f7fe fdfd 	bl	80087be <_write>
 8009bc4:	1c43      	adds	r3, r0, #1
 8009bc6:	d102      	bne.n	8009bce <_write_r+0x1e>
 8009bc8:	682b      	ldr	r3, [r5, #0]
 8009bca:	b103      	cbz	r3, 8009bce <_write_r+0x1e>
 8009bcc:	6023      	str	r3, [r4, #0]
 8009bce:	bd38      	pop	{r3, r4, r5, pc}
 8009bd0:	20029e4c 	.word	0x20029e4c

08009bd4 <abort>:
 8009bd4:	b508      	push	{r3, lr}
 8009bd6:	2006      	movs	r0, #6
 8009bd8:	f000 f82c 	bl	8009c34 <raise>
 8009bdc:	2001      	movs	r0, #1
 8009bde:	f000 f84d 	bl	8009c7c <_exit>

08009be2 <_raise_r>:
 8009be2:	291f      	cmp	r1, #31
 8009be4:	b538      	push	{r3, r4, r5, lr}
 8009be6:	4605      	mov	r5, r0
 8009be8:	460c      	mov	r4, r1
 8009bea:	d904      	bls.n	8009bf6 <_raise_r+0x14>
 8009bec:	2316      	movs	r3, #22
 8009bee:	6003      	str	r3, [r0, #0]
 8009bf0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009bf4:	bd38      	pop	{r3, r4, r5, pc}
 8009bf6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009bf8:	b112      	cbz	r2, 8009c00 <_raise_r+0x1e>
 8009bfa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009bfe:	b94b      	cbnz	r3, 8009c14 <_raise_r+0x32>
 8009c00:	4628      	mov	r0, r5
 8009c02:	f000 f831 	bl	8009c68 <_getpid_r>
 8009c06:	4622      	mov	r2, r4
 8009c08:	4601      	mov	r1, r0
 8009c0a:	4628      	mov	r0, r5
 8009c0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c10:	f000 b818 	b.w	8009c44 <_kill_r>
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d00a      	beq.n	8009c2e <_raise_r+0x4c>
 8009c18:	1c59      	adds	r1, r3, #1
 8009c1a:	d103      	bne.n	8009c24 <_raise_r+0x42>
 8009c1c:	2316      	movs	r3, #22
 8009c1e:	6003      	str	r3, [r0, #0]
 8009c20:	2001      	movs	r0, #1
 8009c22:	e7e7      	b.n	8009bf4 <_raise_r+0x12>
 8009c24:	2100      	movs	r1, #0
 8009c26:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	4798      	blx	r3
 8009c2e:	2000      	movs	r0, #0
 8009c30:	e7e0      	b.n	8009bf4 <_raise_r+0x12>
	...

08009c34 <raise>:
 8009c34:	4b02      	ldr	r3, [pc, #8]	@ (8009c40 <raise+0xc>)
 8009c36:	4601      	mov	r1, r0
 8009c38:	6818      	ldr	r0, [r3, #0]
 8009c3a:	f7ff bfd2 	b.w	8009be2 <_raise_r>
 8009c3e:	bf00      	nop
 8009c40:	200000a0 	.word	0x200000a0

08009c44 <_kill_r>:
 8009c44:	b538      	push	{r3, r4, r5, lr}
 8009c46:	4d07      	ldr	r5, [pc, #28]	@ (8009c64 <_kill_r+0x20>)
 8009c48:	2300      	movs	r3, #0
 8009c4a:	4604      	mov	r4, r0
 8009c4c:	4608      	mov	r0, r1
 8009c4e:	4611      	mov	r1, r2
 8009c50:	602b      	str	r3, [r5, #0]
 8009c52:	f000 f80b 	bl	8009c6c <_kill>
 8009c56:	1c43      	adds	r3, r0, #1
 8009c58:	d102      	bne.n	8009c60 <_kill_r+0x1c>
 8009c5a:	682b      	ldr	r3, [r5, #0]
 8009c5c:	b103      	cbz	r3, 8009c60 <_kill_r+0x1c>
 8009c5e:	6023      	str	r3, [r4, #0]
 8009c60:	bd38      	pop	{r3, r4, r5, pc}
 8009c62:	bf00      	nop
 8009c64:	20029e4c 	.word	0x20029e4c

08009c68 <_getpid_r>:
 8009c68:	f7fe bdf8 	b.w	800885c <_getpid>

08009c6c <_kill>:
 8009c6c:	4b02      	ldr	r3, [pc, #8]	@ (8009c78 <_kill+0xc>)
 8009c6e:	2258      	movs	r2, #88	@ 0x58
 8009c70:	601a      	str	r2, [r3, #0]
 8009c72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c76:	4770      	bx	lr
 8009c78:	20029e4c 	.word	0x20029e4c

08009c7c <_exit>:
 8009c7c:	e7fe      	b.n	8009c7c <_exit>
	...

08009c80 <_init>:
 8009c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c82:	bf00      	nop
 8009c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c86:	bc08      	pop	{r3}
 8009c88:	469e      	mov	lr, r3
 8009c8a:	4770      	bx	lr

08009c8c <_fini>:
 8009c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c8e:	bf00      	nop
 8009c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c92:	bc08      	pop	{r3}
 8009c94:	469e      	mov	lr, r3
 8009c96:	4770      	bx	lr
